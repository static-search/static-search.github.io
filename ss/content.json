[{"title":"jQuery API Documentation","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })();","tags":"","url":"https:\/\/api.jquery.com\/"},{"title":".html() | jQuery API Documentation","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })();","tags":"","url":"https:\/\/api.jquery.com\/html\/"},{"title":"jQuery.ajax() | jQuery API Documentation","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })();","tags":"","url":"https:\/\/api.jquery.com\/jQuery.ajax\/"},{"title":"jQuery.getJSON() | jQuery API Documentation","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })();","tags":"","url":"https:\/\/api.jquery.com\/jQuery.getJSON\/"},{"title":"jQuery.getScript() | jQuery API Documentation","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getScript() Categories: Ajax > Shorthand Methods jQuery.getScript( url [, success ] )Returns: jqXHR Description: Load a JavaScript file from the server using a GET HTTP request, then execute it. version added: 1.0jQuery.getScript( url [, success ] ) url Type: String A string containing the URL to which the request is sent. success Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 $.ajax({ url: url, dataType: \"script\", success: success}); The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page. Success Callback The callback is fired once the script has been loaded but not necessarily executed. Scripts are included and run by referencing the file name: 1 2 3 4 5 6 $.getScript( \"ajax\/test.js\", function( data, textStatus, jqxhr ) { console.log( data ); \/\/ Data returned console.log( textStatus ); \/\/ Success console.log( jqxhr.status ); \/\/ 200 console.log( \"Load was performed.\" );}); Handling Errors As of jQuery 1.5, you may use .fail() to account for errors: 1 2 3 4 5 6 7 $.getScript( \"ajax\/test.js\" ) .done(function( script, textStatus ) { console.log( textStatus ); }) .fail(function( jqxhr, settings, exception ) { $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );}); Prior to jQuery 1.5, the global .ajaxError() callback event had to be used in order to handle $.getScript() errors: 1 2 3 4 5 $( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) { if ( settings.dataType == \"script\" ) { $( this ).text( \"Triggered ajaxError handler.\" ); }}); Caching Responses By default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using $.ajaxSetup(): 1 2 3 $.ajaxSetup({ cache: true}); Alternatively, you could define a new method that uses the more flexible $.ajax() method. Examples: Define a $.cachedScript() method that allows fetching a cached script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 jQuery.cachedScript = function( url, options ) { \/\/ Allow user to set any option except for dataType, cache, and url options = $.extend( options || {}, { dataType: \"script\", cache: true, url: url }); \/\/ Use $.ajax() since it is more flexible than $.getScript \/\/ Return the jqXHR object so we can chain callbacks return jQuery.ajax( options );}; \/\/ Usage$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) { console.log( textStatus );}); Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 jQuery.getScript demo .block { background-color: blue; width: 150px; height: 70px; margin: 10px; } &raquo; Run var url = \"https:\/\/code.jquery.com\/color\/jquery.color.js\";$.getScript( url, function() { $( \"#go\" ).click(function() { $( \".block\" ) .animate({ backgroundColor: \"rgb(255, 180, 180)\" }, 1000 ) .delay( 500 ) .animate({ backgroundColor: \"olive\" }, 1000 ) .delay( 500\u00a0) .animate({ backgroundColor: \"#00f\" }, 1000 ); });}); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })();","tags":"","url":"https:\/\/api.jquery.com\/jQuery.getScript\/"},{"title":"CodeIgniter Web Framework","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getScript() Categories: Ajax > Shorthand Methods jQuery.getScript( url [, success ] )Returns: jqXHR Description: Load a JavaScript file from the server using a GET HTTP request, then execute it. version added: 1.0jQuery.getScript( url [, success ] ) url Type: String A string containing the URL to which the request is sent. success Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 $.ajax({ url: url, dataType: \"script\", success: success}); The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page. Success Callback The callback is fired once the script has been loaded but not necessarily executed. Scripts are included and run by referencing the file name: 1 2 3 4 5 6 $.getScript( \"ajax\/test.js\", function( data, textStatus, jqxhr ) { console.log( data ); \/\/ Data returned console.log( textStatus ); \/\/ Success console.log( jqxhr.status ); \/\/ 200 console.log( \"Load was performed.\" );}); Handling Errors As of jQuery 1.5, you may use .fail() to account for errors: 1 2 3 4 5 6 7 $.getScript( \"ajax\/test.js\" ) .done(function( script, textStatus ) { console.log( textStatus ); }) .fail(function( jqxhr, settings, exception ) { $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );}); Prior to jQuery 1.5, the global .ajaxError() callback event had to be used in order to handle $.getScript() errors: 1 2 3 4 5 $( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) { if ( settings.dataType == \"script\" ) { $( this ).text( \"Triggered ajaxError handler.\" ); }}); Caching Responses By default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using $.ajaxSetup(): 1 2 3 $.ajaxSetup({ cache: true}); Alternatively, you could define a new method that uses the more flexible $.ajax() method. Examples: Define a $.cachedScript() method that allows fetching a cached script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 jQuery.cachedScript = function( url, options ) { \/\/ Allow user to set any option except for dataType, cache, and url options = $.extend( options || {}, { dataType: \"script\", cache: true, url: url }); \/\/ Use $.ajax() since it is more flexible than $.getScript \/\/ Return the jqXHR object so we can chain callbacks return jQuery.ajax( options );}; \/\/ Usage$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) { console.log( textStatus );}); Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 jQuery.getScript demo .block { background-color: blue; width: 150px; height: 70px; margin: 10px; } &raquo; Run var url = \"https:\/\/code.jquery.com\/color\/jquery.color.js\";$.getScript( url, function() { $( \"#go\" ).click(function() { $( \".block\" ) .animate({ backgroundColor: \"rgb(255, 180, 180)\" }, 1000 ) .delay( 500 ) .animate({ backgroundColor: \"olive\" }, 1000 ) .delay( 500\u00a0) .animate({ backgroundColor: \"#00f\" }, 1000 ); });}); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); Toggle navigation CodeIgniter Download Documentation Community Contribute CodeIgniter Rocks CodeIgniter is a powerful PHP framework with a very small footprint, built for developers who need a simple and elegant toolkit to create full-featured web applications. Star 14,705 Fork 6,953 @CodeIgniter Download The latest is Version 3.1.5 Read the Manual Clear documentation View the Forums Get Support & Discuss Things On GitHub Fix Bugs or Add Features Recent News 2017.07.11 Project Update - 2017.07.10 2017.06.19 CodeIgniter 3.1.5 Released 2017.03.20 CodeIgniter 3.1.4 released 2017.03.09 BCIT newsletter story about CodeIgniter 2017.01.20 Planned Server Downtime Jan 21, 2017 Active Forum Threads 2017.07.11 form_input don't output html since ci3 upgrade 2017.07.11 Community Auth : Login Error 2017.07.11 Get data from cookie on subdomain with Codeigniter 2017.07.11 local to gmt function doesn't work 2017.07.11 REST API request does not reply until shell script is done Why CodeIgniter? Framework with a small footprint CodeIgniter 3 has a 2MB download, including the user guide. Simple solutions over complexity CodeIgniter encourages MVC, but does not force it on you. Clear documentation The CodeIgniter User Guide comes with the download. It contains an introduction, tutorial, a number of \"how to\" guides, and then reference documentation for the components that make up the framework. Exceptional performance CodeIgniter consistently outperforms most of its competitors. Strong Security We take security seriously, with built-in protection against CSRF and XSS attacks. Nearly zero configuration Much of the CodeIgniter configuration is done by convention, for instance putting models in a \"models\" folder. There are still a number of configuration options available, through scripts in the \"config\" folder. Policies The Fine Print About CodeIgniter was created by EllisLab and is now a project of the British Columbia Institute of Technology !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = \/^http:\/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + ':\/\/platform.twitter.com\/widgets.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'twitter-wjs');\/* -1&&m>28){j=28+s;s='';if(j *\/","tags":"","url":"http:\/\/codeigniter.com\/"},{"title":"CodeIgniter4 User Guide \u2014 CodeIgniter4 4.0.0-dev documentation","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getScript() Categories: Ajax > Shorthand Methods jQuery.getScript( url [, success ] )Returns: jqXHR Description: Load a JavaScript file from the server using a GET HTTP request, then execute it. version added: 1.0jQuery.getScript( url [, success ] ) url Type: String A string containing the URL to which the request is sent. success Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 $.ajax({ url: url, dataType: \"script\", success: success}); The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page. Success Callback The callback is fired once the script has been loaded but not necessarily executed. Scripts are included and run by referencing the file name: 1 2 3 4 5 6 $.getScript( \"ajax\/test.js\", function( data, textStatus, jqxhr ) { console.log( data ); \/\/ Data returned console.log( textStatus ); \/\/ Success console.log( jqxhr.status ); \/\/ 200 console.log( \"Load was performed.\" );}); Handling Errors As of jQuery 1.5, you may use .fail() to account for errors: 1 2 3 4 5 6 7 $.getScript( \"ajax\/test.js\" ) .done(function( script, textStatus ) { console.log( textStatus ); }) .fail(function( jqxhr, settings, exception ) { $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );}); Prior to jQuery 1.5, the global .ajaxError() callback event had to be used in order to handle $.getScript() errors: 1 2 3 4 5 $( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) { if ( settings.dataType == \"script\" ) { $( this ).text( \"Triggered ajaxError handler.\" ); }}); Caching Responses By default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using $.ajaxSetup(): 1 2 3 $.ajaxSetup({ cache: true}); Alternatively, you could define a new method that uses the more flexible $.ajax() method. Examples: Define a $.cachedScript() method that allows fetching a cached script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 jQuery.cachedScript = function( url, options ) { \/\/ Allow user to set any option except for dataType, cache, and url options = $.extend( options || {}, { dataType: \"script\", cache: true, url: url }); \/\/ Use $.ajax() since it is more flexible than $.getScript \/\/ Return the jqXHR object so we can chain callbacks return jQuery.ajax( options );}; \/\/ Usage$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) { console.log( textStatus );}); Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 jQuery.getScript demo .block { background-color: blue; width: 150px; height: 70px; margin: 10px; } &raquo; Run var url = \"https:\/\/code.jquery.com\/color\/jquery.color.js\";$.getScript( url, function() { $( \"#go\" ).click(function() { $( \".block\" ) .animate({ backgroundColor: \"rgb(255, 180, 180)\" }, 1000 ) .delay( 500 ) .animate({ backgroundColor: \"olive\" }, 1000 ) .delay( 500\u00a0) .animate({ backgroundColor: \"#00f\" }, 1000 ); });}); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); Toggle navigation CodeIgniter Download Documentation Community Contribute CodeIgniter Rocks CodeIgniter is a powerful PHP framework with a very small footprint, built for developers who need a simple and elegant toolkit to create full-featured web applications. Star 14,705 Fork 6,953 @CodeIgniter Download The latest is Version 3.1.5 Read the Manual Clear documentation View the Forums Get Support & Discuss Things On GitHub Fix Bugs or Add Features Recent News 2017.07.11 Project Update - 2017.07.10 2017.06.19 CodeIgniter 3.1.5 Released 2017.03.20 CodeIgniter 3.1.4 released 2017.03.09 BCIT newsletter story about CodeIgniter 2017.01.20 Planned Server Downtime Jan 21, 2017 Active Forum Threads 2017.07.11 form_input don't output html since ci3 upgrade 2017.07.11 Community Auth : Login Error 2017.07.11 Get data from cookie on subdomain with Codeigniter 2017.07.11 local to gmt function doesn't work 2017.07.11 REST API request does not reply until shell script is done Why CodeIgniter? Framework with a small footprint CodeIgniter 3 has a 2MB download, including the user guide. Simple solutions over complexity CodeIgniter encourages MVC, but does not force it on you. Clear documentation The CodeIgniter User Guide comes with the download. It contains an introduction, tutorial, a number of \"how to\" guides, and then reference documentation for the components that make up the framework. Exceptional performance CodeIgniter consistently outperforms most of its competitors. Strong Security We take security seriously, with built-in protection against CSRF and XSS attacks. Nearly zero configuration Much of the CodeIgniter configuration is done by convention, for instance putting models in a \"models\" folder. There are still a number of configuration options available, through scripts in the \"config\" folder. Policies The Fine Print About CodeIgniter was created by EllisLab and is now a project of the British Columbia Institute of Technology !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = \/^http:\/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + ':\/\/platform.twitter.com\/widgets.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'twitter-wjs');\/* -1&&m>28){j=28+s;s='';if(j *\/ Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 CodeIgniter4 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 \u00a0 CodeIgniter4 Docs \u00bb CodeIgniter4 User Guide CodeIgniter4 User Guide\u00b6 License Agreement Change Log Welcome Installation Tutorial CodeIgniter4 Overview General Topics Library Reference Database Reference Helper Reference Contributing to CodeIgniter Welcome\u00b6 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance Installation\u00b6 InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server Tutorial\u00b6 TutorialStatic pages News section Create news items Conclusion CodeIgniter4 Overview\u00b6 CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General Topics\u00b6 General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library Reference\u00b6 Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database Reference\u00b6 Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events Helper Reference\u00b6 HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniter\u00b6 Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 Next \u00a9 Copyright 2014 - 2017, British Columbia Institute of Technology. Last updated on Jul 05, 2017. Built with Sphinx using a theme provided by Read the Docs. var DOCUMENTATION_OPTIONS = { URL_ROOT:'.\/', VERSION:'4.0.0-dev', COLLAPSE_INDEX:false, FILE_SUFFIX:'.html', HAS_SOURCE: false }; jQuery(function () { SphinxRtdTheme.StickyNav.enable(); });","tags":"","url":"https:\/\/bcit-ci.github.io\/CodeIgniter4\/"},{"title":"Debian -- The Universal Operating System ","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getScript() Categories: Ajax > Shorthand Methods jQuery.getScript( url [, success ] )Returns: jqXHR Description: Load a JavaScript file from the server using a GET HTTP request, then execute it. version added: 1.0jQuery.getScript( url [, success ] ) url Type: String A string containing the URL to which the request is sent. success Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 $.ajax({ url: url, dataType: \"script\", success: success}); The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page. Success Callback The callback is fired once the script has been loaded but not necessarily executed. Scripts are included and run by referencing the file name: 1 2 3 4 5 6 $.getScript( \"ajax\/test.js\", function( data, textStatus, jqxhr ) { console.log( data ); \/\/ Data returned console.log( textStatus ); \/\/ Success console.log( jqxhr.status ); \/\/ 200 console.log( \"Load was performed.\" );}); Handling Errors As of jQuery 1.5, you may use .fail() to account for errors: 1 2 3 4 5 6 7 $.getScript( \"ajax\/test.js\" ) .done(function( script, textStatus ) { console.log( textStatus ); }) .fail(function( jqxhr, settings, exception ) { $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );}); Prior to jQuery 1.5, the global .ajaxError() callback event had to be used in order to handle $.getScript() errors: 1 2 3 4 5 $( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) { if ( settings.dataType == \"script\" ) { $( this ).text( \"Triggered ajaxError handler.\" ); }}); Caching Responses By default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using $.ajaxSetup(): 1 2 3 $.ajaxSetup({ cache: true}); Alternatively, you could define a new method that uses the more flexible $.ajax() method. Examples: Define a $.cachedScript() method that allows fetching a cached script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 jQuery.cachedScript = function( url, options ) { \/\/ Allow user to set any option except for dataType, cache, and url options = $.extend( options || {}, { dataType: \"script\", cache: true, url: url }); \/\/ Use $.ajax() since it is more flexible than $.getScript \/\/ Return the jqXHR object so we can chain callbacks return jQuery.ajax( options );}; \/\/ Usage$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) { console.log( textStatus );}); Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 jQuery.getScript demo .block { background-color: blue; width: 150px; height: 70px; margin: 10px; } &raquo; Run var url = \"https:\/\/code.jquery.com\/color\/jquery.color.js\";$.getScript( url, function() { $( \"#go\" ).click(function() { $( \".block\" ) .animate({ backgroundColor: \"rgb(255, 180, 180)\" }, 1000 ) .delay( 500 ) .animate({ backgroundColor: \"olive\" }, 1000 ) .delay( 500\u00a0) .animate({ backgroundColor: \"#00f\" }, 1000 ); });}); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); Toggle navigation CodeIgniter Download Documentation Community Contribute CodeIgniter Rocks CodeIgniter is a powerful PHP framework with a very small footprint, built for developers who need a simple and elegant toolkit to create full-featured web applications. Star 14,705 Fork 6,953 @CodeIgniter Download The latest is Version 3.1.5 Read the Manual Clear documentation View the Forums Get Support & Discuss Things On GitHub Fix Bugs or Add Features Recent News 2017.07.11 Project Update - 2017.07.10 2017.06.19 CodeIgniter 3.1.5 Released 2017.03.20 CodeIgniter 3.1.4 released 2017.03.09 BCIT newsletter story about CodeIgniter 2017.01.20 Planned Server Downtime Jan 21, 2017 Active Forum Threads 2017.07.11 form_input don't output html since ci3 upgrade 2017.07.11 Community Auth : Login Error 2017.07.11 Get data from cookie on subdomain with Codeigniter 2017.07.11 local to gmt function doesn't work 2017.07.11 REST API request does not reply until shell script is done Why CodeIgniter? Framework with a small footprint CodeIgniter 3 has a 2MB download, including the user guide. Simple solutions over complexity CodeIgniter encourages MVC, but does not force it on you. Clear documentation The CodeIgniter User Guide comes with the download. It contains an introduction, tutorial, a number of \"how to\" guides, and then reference documentation for the components that make up the framework. Exceptional performance CodeIgniter consistently outperforms most of its competitors. Strong Security We take security seriously, with built-in protection against CSRF and XSS attacks. Nearly zero configuration Much of the CodeIgniter configuration is done by convention, for instance putting models in a \"models\" folder. There are still a number of configuration options available, through scripts in the \"config\" folder. Policies The Fine Print About CodeIgniter was created by EllisLab and is now a project of the British Columbia Institute of Technology !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = \/^http:\/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + ':\/\/platform.twitter.com\/widgets.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'twitter-wjs');\/* -1&&m>28){j=28+s;s='';if(j *\/ Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 CodeIgniter4 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 \u00a0 CodeIgniter4 Docs \u00bb CodeIgniter4 User Guide CodeIgniter4 User Guide\u00b6 License Agreement Change Log Welcome Installation Tutorial CodeIgniter4 Overview General Topics Library Reference Database Reference Helper Reference Contributing to CodeIgniter Welcome\u00b6 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance Installation\u00b6 InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server Tutorial\u00b6 TutorialStatic pages News section Create news items Conclusion CodeIgniter4 Overview\u00b6 CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General Topics\u00b6 General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library Reference\u00b6 Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database Reference\u00b6 Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events Helper Reference\u00b6 HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniter\u00b6 Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 Next \u00a9 Copyright 2014 - 2017, British Columbia Institute of Technology. Last updated on Jul 05, 2017. Built with Sphinx using a theme provided by Read the Docs. var DOCUMENTATION_OPTIONS = { URL_ROOT:'.\/', VERSION:'4.0.0-dev', COLLAPSE_INDEX:false, FILE_SUFFIX:'.html', HAS_SOURCE: false }; jQuery(function () { SphinxRtdTheme.StickyNav.enable(); }); Skip Quicknav About Debian Getting Debian Support Developers' Corner \u00a0 Download Debian 9.0(64-bit PC Network installer) Debian Debian is a free operating system (OS) for your computer. An operating system is the set of basic programs and utilities that make your computer run. Debian provides more than a pure OS: it comes with over 51000 packages, precompiled software bundled up in a nice format for easy installation on your machine. Read more... About Social Contract Code of Conduct Free Software Partners Donations Contact Us Help Debian Getting Debian Network install CD\/USB ISO images CD vendors Pre-installed Pure Blends Debian Packages Developers' Corner News Project News Events Documentation Release Info Installation manual Debian Books Debian Wiki Support Debian International Security Information Bug reports Mailing Lists Mailing List Archives Ports\/Architectures Miscellaneous Site map Search The Debian Blog The latest stable release of Debian is 9.0. The last update to this release was made on June 17th, 2017. Read more about available versions of Debian. Getting Started If you'd like to start using Debian, you can easily obtain a copy, and then follow the installation instructions to install it. If you're upgrading to the latest stable release from a previous version, please read the release notes before proceeding. To get help in using or setting up Debian, see our documentation and support pages. Users that speak languages other than English should check the international section. People who use systems other than Intel x86 should check the ports section. RSS News [18 Jun 2017] Debian Edu \/ Skolelinux Stretch \u2014 a complete Linux solution for your school[17 Jun 2017] Debian 9 Stretch released[06 May 2017] Updated Debian 8: 8.8 released[25 Apr 2017] Shutting down public FTP services[17 Apr 2017] Statement concerning the arrest of Dmitry Bogatov[14 Jan 2017] Updated Debian 8: 8.7 released For older news items see the News Page. If you would like to receive mail whenever new Debian news comes out, subscribe to the debian-announce mailing list. RSS Security Advisories [09 Jul 2017] DSA-3905 xorg-server - security update [08 Jul 2017] DSA-3904 bind9 - security update [05 Jul 2017] DSA-3903 tiff - security update [05 Jul 2017] DSA-3902 jabberd2 - security update [02 Jul 2017] DSA-3901 libgcrypt20 - security update [27 Jun 2017] DSA-3900 openvpn - security update [27 Jun 2017] DSA-3899 vlc - security update [25 Jun 2017] DSA-3898 expat - security update [24 Jun 2017] DSA-3897 drupal7 - security update [22 Jun 2017] DSA-3896 apache2 - security update [22 Jun 2017] DSA-3895 flatpak - security update [22 Jun 2017] DSA-3894 graphite2 - security update [22 Jun 2017] DSA-3893 jython - security update [22 Jun 2017] DSA-3892 tomcat7 - security update [22 Jun 2017] DSA-3891 tomcat8 - security update For older security advisories see the Security Page. If you would like to receive security advisories as soon as they're announced, subscribe to the debian-security-announce mailing list. This page is also available in the following languages: \u0639\u0631\u0628\u064a\u0629\u00a0(Arabiya) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u00a0(B\u0259lgarski) catal\u00e0 \u010desky dansk Deutsch \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\u00a0(Ellinika) espa\u00f1ol Esperanto \u0641\u0627\u0631\u0633\u06cc\u00a0(Farsi) fran\u00e7ais Galego \ud55c\uad6d\uc5b4\u00a0(Hangul) \u0540\u0561\u0575\u0565\u0580\u0565\u0576\u00a0(hayeren) hrvatski Indonesia Italiano \u05e2\u05d1\u05e8\u05d9\u05ea\u00a0(ivrit) Lietuvi\u0173 magyar Nederlands \u65e5\u672c\u8a9e\u00a0(Nihongo) norsk\u00a0(bokm\u00e5l) polski Portugu\u00eas rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439\u00a0(Russkij) slovensky suomi svenska \u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u00a0(Tamil) Ti\u1ebfng Vi\u1ec7t T\u00fcrk\u00e7e \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u00a0(ukrajins'ka) \u4e2d\u6587(\u7b80) \u4e2d\u6587(HK) \u4e2d\u6587(\u7e41) How to set the default document language To report a problem with the web site, e-mail our publicly archived mailing list debian-www@lists.debian.org. For other contact information, see the Debian contact page. Web site source code is available. Last Modified: Thu, Jun 8 15:25:09 UTC 2017 Copyright \u00a9 1997-2017 SPI and others; See license terms Debian is a registered trademark of Software in the Public Interest, Inc.","tags":"","url":"https:\/\/www.debian.org\/"},{"title":"You are being redirected...","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getScript() Categories: Ajax > Shorthand Methods jQuery.getScript( url [, success ] )Returns: jqXHR Description: Load a JavaScript file from the server using a GET HTTP request, then execute it. version added: 1.0jQuery.getScript( url [, success ] ) url Type: String A string containing the URL to which the request is sent. success Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 $.ajax({ url: url, dataType: \"script\", success: success}); The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page. Success Callback The callback is fired once the script has been loaded but not necessarily executed. Scripts are included and run by referencing the file name: 1 2 3 4 5 6 $.getScript( \"ajax\/test.js\", function( data, textStatus, jqxhr ) { console.log( data ); \/\/ Data returned console.log( textStatus ); \/\/ Success console.log( jqxhr.status ); \/\/ 200 console.log( \"Load was performed.\" );}); Handling Errors As of jQuery 1.5, you may use .fail() to account for errors: 1 2 3 4 5 6 7 $.getScript( \"ajax\/test.js\" ) .done(function( script, textStatus ) { console.log( textStatus ); }) .fail(function( jqxhr, settings, exception ) { $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );}); Prior to jQuery 1.5, the global .ajaxError() callback event had to be used in order to handle $.getScript() errors: 1 2 3 4 5 $( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) { if ( settings.dataType == \"script\" ) { $( this ).text( \"Triggered ajaxError handler.\" ); }}); Caching Responses By default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using $.ajaxSetup(): 1 2 3 $.ajaxSetup({ cache: true}); Alternatively, you could define a new method that uses the more flexible $.ajax() method. Examples: Define a $.cachedScript() method that allows fetching a cached script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 jQuery.cachedScript = function( url, options ) { \/\/ Allow user to set any option except for dataType, cache, and url options = $.extend( options || {}, { dataType: \"script\", cache: true, url: url }); \/\/ Use $.ajax() since it is more flexible than $.getScript \/\/ Return the jqXHR object so we can chain callbacks return jQuery.ajax( options );}; \/\/ Usage$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) { console.log( textStatus );}); Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 jQuery.getScript demo .block { background-color: blue; width: 150px; height: 70px; margin: 10px; } &raquo; Run var url = \"https:\/\/code.jquery.com\/color\/jquery.color.js\";$.getScript( url, function() { $( \"#go\" ).click(function() { $( \".block\" ) .animate({ backgroundColor: \"rgb(255, 180, 180)\" }, 1000 ) .delay( 500 ) .animate({ backgroundColor: \"olive\" }, 1000 ) .delay( 500\u00a0) .animate({ backgroundColor: \"#00f\" }, 1000 ); });}); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); Toggle navigation CodeIgniter Download Documentation Community Contribute CodeIgniter Rocks CodeIgniter is a powerful PHP framework with a very small footprint, built for developers who need a simple and elegant toolkit to create full-featured web applications. Star 14,705 Fork 6,953 @CodeIgniter Download The latest is Version 3.1.5 Read the Manual Clear documentation View the Forums Get Support & Discuss Things On GitHub Fix Bugs or Add Features Recent News 2017.07.11 Project Update - 2017.07.10 2017.06.19 CodeIgniter 3.1.5 Released 2017.03.20 CodeIgniter 3.1.4 released 2017.03.09 BCIT newsletter story about CodeIgniter 2017.01.20 Planned Server Downtime Jan 21, 2017 Active Forum Threads 2017.07.11 form_input don't output html since ci3 upgrade 2017.07.11 Community Auth : Login Error 2017.07.11 Get data from cookie on subdomain with Codeigniter 2017.07.11 local to gmt function doesn't work 2017.07.11 REST API request does not reply until shell script is done Why CodeIgniter? Framework with a small footprint CodeIgniter 3 has a 2MB download, including the user guide. Simple solutions over complexity CodeIgniter encourages MVC, but does not force it on you. Clear documentation The CodeIgniter User Guide comes with the download. It contains an introduction, tutorial, a number of \"how to\" guides, and then reference documentation for the components that make up the framework. Exceptional performance CodeIgniter consistently outperforms most of its competitors. Strong Security We take security seriously, with built-in protection against CSRF and XSS attacks. Nearly zero configuration Much of the CodeIgniter configuration is done by convention, for instance putting models in a \"models\" folder. There are still a number of configuration options available, through scripts in the \"config\" folder. Policies The Fine Print About CodeIgniter was created by EllisLab and is now a project of the British Columbia Institute of Technology !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = \/^http:\/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + ':\/\/platform.twitter.com\/widgets.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'twitter-wjs');\/* -1&&m>28){j=28+s;s='';if(j *\/ Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 CodeIgniter4 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 \u00a0 CodeIgniter4 Docs \u00bb CodeIgniter4 User Guide CodeIgniter4 User Guide\u00b6 License Agreement Change Log Welcome Installation Tutorial CodeIgniter4 Overview General Topics Library Reference Database Reference Helper Reference Contributing to CodeIgniter Welcome\u00b6 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance Installation\u00b6 InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server Tutorial\u00b6 TutorialStatic pages News section Create news items Conclusion CodeIgniter4 Overview\u00b6 CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General Topics\u00b6 General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library Reference\u00b6 Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database Reference\u00b6 Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events Helper Reference\u00b6 HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniter\u00b6 Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 Next \u00a9 Copyright 2014 - 2017, British Columbia Institute of Technology. Last updated on Jul 05, 2017. Built with Sphinx using a theme provided by Read the Docs. var DOCUMENTATION_OPTIONS = { URL_ROOT:'.\/', VERSION:'4.0.0-dev', COLLAPSE_INDEX:false, FILE_SUFFIX:'.html', HAS_SOURCE: false }; jQuery(function () { SphinxRtdTheme.StickyNav.enable(); }); Skip Quicknav About Debian Getting Debian Support Developers' Corner \u00a0 Download Debian 9.0(64-bit PC Network installer) Debian Debian is a free operating system (OS) for your computer. An operating system is the set of basic programs and utilities that make your computer run. Debian provides more than a pure OS: it comes with over 51000 packages, precompiled software bundled up in a nice format for easy installation on your machine. Read more... About Social Contract Code of Conduct Free Software Partners Donations Contact Us Help Debian Getting Debian Network install CD\/USB ISO images CD vendors Pre-installed Pure Blends Debian Packages Developers' Corner News Project News Events Documentation Release Info Installation manual Debian Books Debian Wiki Support Debian International Security Information Bug reports Mailing Lists Mailing List Archives Ports\/Architectures Miscellaneous Site map Search The Debian Blog The latest stable release of Debian is 9.0. The last update to this release was made on June 17th, 2017. Read more about available versions of Debian. Getting Started If you'd like to start using Debian, you can easily obtain a copy, and then follow the installation instructions to install it. If you're upgrading to the latest stable release from a previous version, please read the release notes before proceeding. To get help in using or setting up Debian, see our documentation and support pages. Users that speak languages other than English should check the international section. People who use systems other than Intel x86 should check the ports section. RSS News [18 Jun 2017] Debian Edu \/ Skolelinux Stretch \u2014 a complete Linux solution for your school[17 Jun 2017] Debian 9 Stretch released[06 May 2017] Updated Debian 8: 8.8 released[25 Apr 2017] Shutting down public FTP services[17 Apr 2017] Statement concerning the arrest of Dmitry Bogatov[14 Jan 2017] Updated Debian 8: 8.7 released For older news items see the News Page. If you would like to receive mail whenever new Debian news comes out, subscribe to the debian-announce mailing list. RSS Security Advisories [09 Jul 2017] DSA-3905 xorg-server - security update [08 Jul 2017] DSA-3904 bind9 - security update [05 Jul 2017] DSA-3903 tiff - security update [05 Jul 2017] DSA-3902 jabberd2 - security update [02 Jul 2017] DSA-3901 libgcrypt20 - security update [27 Jun 2017] DSA-3900 openvpn - security update [27 Jun 2017] DSA-3899 vlc - security update [25 Jun 2017] DSA-3898 expat - security update [24 Jun 2017] DSA-3897 drupal7 - security update [22 Jun 2017] DSA-3896 apache2 - security update [22 Jun 2017] DSA-3895 flatpak - security update [22 Jun 2017] DSA-3894 graphite2 - security update [22 Jun 2017] DSA-3893 jython - security update [22 Jun 2017] DSA-3892 tomcat7 - security update [22 Jun 2017] DSA-3891 tomcat8 - security update For older security advisories see the Security Page. If you would like to receive security advisories as soon as they're announced, subscribe to the debian-security-announce mailing list. This page is also available in the following languages: \u0639\u0631\u0628\u064a\u0629\u00a0(Arabiya) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u00a0(B\u0259lgarski) catal\u00e0 \u010desky dansk Deutsch \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\u00a0(Ellinika) espa\u00f1ol Esperanto \u0641\u0627\u0631\u0633\u06cc\u00a0(Farsi) fran\u00e7ais Galego \ud55c\uad6d\uc5b4\u00a0(Hangul) \u0540\u0561\u0575\u0565\u0580\u0565\u0576\u00a0(hayeren) hrvatski Indonesia Italiano \u05e2\u05d1\u05e8\u05d9\u05ea\u00a0(ivrit) Lietuvi\u0173 magyar Nederlands \u65e5\u672c\u8a9e\u00a0(Nihongo) norsk\u00a0(bokm\u00e5l) polski Portugu\u00eas rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439\u00a0(Russkij) slovensky suomi svenska \u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u00a0(Tamil) Ti\u1ebfng Vi\u1ec7t T\u00fcrk\u00e7e \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u00a0(ukrajins'ka) \u4e2d\u6587(\u7b80) \u4e2d\u6587(HK) \u4e2d\u6587(\u7e41) How to set the default document language To report a problem with the web site, e-mail our publicly archived mailing list debian-www@lists.debian.org. For other contact information, see the Debian contact page. Web site source code is available. Last Modified: Thu, Jun 8 15:25:09 UTC 2017 Copyright \u00a9 1997-2017 SPI and others; See license terms Debian is a registered trademark of Software in the Public Interest, Inc.","tags":"","url":"https:\/\/docs.kali.org\/downloading\/kali-linux-live-usb-persistence"},{"title":"GeoIP2 Downloadable Databases \u00ab MaxMind Developer Site","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getScript() Categories: Ajax > Shorthand Methods jQuery.getScript( url [, success ] )Returns: jqXHR Description: Load a JavaScript file from the server using a GET HTTP request, then execute it. version added: 1.0jQuery.getScript( url [, success ] ) url Type: String A string containing the URL to which the request is sent. success Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 $.ajax({ url: url, dataType: \"script\", success: success}); The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page. Success Callback The callback is fired once the script has been loaded but not necessarily executed. Scripts are included and run by referencing the file name: 1 2 3 4 5 6 $.getScript( \"ajax\/test.js\", function( data, textStatus, jqxhr ) { console.log( data ); \/\/ Data returned console.log( textStatus ); \/\/ Success console.log( jqxhr.status ); \/\/ 200 console.log( \"Load was performed.\" );}); Handling Errors As of jQuery 1.5, you may use .fail() to account for errors: 1 2 3 4 5 6 7 $.getScript( \"ajax\/test.js\" ) .done(function( script, textStatus ) { console.log( textStatus ); }) .fail(function( jqxhr, settings, exception ) { $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );}); Prior to jQuery 1.5, the global .ajaxError() callback event had to be used in order to handle $.getScript() errors: 1 2 3 4 5 $( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) { if ( settings.dataType == \"script\" ) { $( this ).text( \"Triggered ajaxError handler.\" ); }}); Caching Responses By default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using $.ajaxSetup(): 1 2 3 $.ajaxSetup({ cache: true}); Alternatively, you could define a new method that uses the more flexible $.ajax() method. Examples: Define a $.cachedScript() method that allows fetching a cached script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 jQuery.cachedScript = function( url, options ) { \/\/ Allow user to set any option except for dataType, cache, and url options = $.extend( options || {}, { dataType: \"script\", cache: true, url: url }); \/\/ Use $.ajax() since it is more flexible than $.getScript \/\/ Return the jqXHR object so we can chain callbacks return jQuery.ajax( options );}; \/\/ Usage$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) { console.log( textStatus );}); Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 jQuery.getScript demo .block { background-color: blue; width: 150px; height: 70px; margin: 10px; } &raquo; Run var url = \"https:\/\/code.jquery.com\/color\/jquery.color.js\";$.getScript( url, function() { $( \"#go\" ).click(function() { $( \".block\" ) .animate({ backgroundColor: \"rgb(255, 180, 180)\" }, 1000 ) .delay( 500 ) .animate({ backgroundColor: \"olive\" }, 1000 ) .delay( 500\u00a0) .animate({ backgroundColor: \"#00f\" }, 1000 ); });}); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); Toggle navigation CodeIgniter Download Documentation Community Contribute CodeIgniter Rocks CodeIgniter is a powerful PHP framework with a very small footprint, built for developers who need a simple and elegant toolkit to create full-featured web applications. Star 14,705 Fork 6,953 @CodeIgniter Download The latest is Version 3.1.5 Read the Manual Clear documentation View the Forums Get Support & Discuss Things On GitHub Fix Bugs or Add Features Recent News 2017.07.11 Project Update - 2017.07.10 2017.06.19 CodeIgniter 3.1.5 Released 2017.03.20 CodeIgniter 3.1.4 released 2017.03.09 BCIT newsletter story about CodeIgniter 2017.01.20 Planned Server Downtime Jan 21, 2017 Active Forum Threads 2017.07.11 form_input don't output html since ci3 upgrade 2017.07.11 Community Auth : Login Error 2017.07.11 Get data from cookie on subdomain with Codeigniter 2017.07.11 local to gmt function doesn't work 2017.07.11 REST API request does not reply until shell script is done Why CodeIgniter? Framework with a small footprint CodeIgniter 3 has a 2MB download, including the user guide. Simple solutions over complexity CodeIgniter encourages MVC, but does not force it on you. Clear documentation The CodeIgniter User Guide comes with the download. It contains an introduction, tutorial, a number of \"how to\" guides, and then reference documentation for the components that make up the framework. Exceptional performance CodeIgniter consistently outperforms most of its competitors. Strong Security We take security seriously, with built-in protection against CSRF and XSS attacks. Nearly zero configuration Much of the CodeIgniter configuration is done by convention, for instance putting models in a \"models\" folder. There are still a number of configuration options available, through scripts in the \"config\" folder. Policies The Fine Print About CodeIgniter was created by EllisLab and is now a project of the British Columbia Institute of Technology !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = \/^http:\/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + ':\/\/platform.twitter.com\/widgets.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'twitter-wjs');\/* -1&&m>28){j=28+s;s='';if(j *\/ Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 CodeIgniter4 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 \u00a0 CodeIgniter4 Docs \u00bb CodeIgniter4 User Guide CodeIgniter4 User Guide\u00b6 License Agreement Change Log Welcome Installation Tutorial CodeIgniter4 Overview General Topics Library Reference Database Reference Helper Reference Contributing to CodeIgniter Welcome\u00b6 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance Installation\u00b6 InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server Tutorial\u00b6 TutorialStatic pages News section Create news items Conclusion CodeIgniter4 Overview\u00b6 CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General Topics\u00b6 General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library Reference\u00b6 Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database Reference\u00b6 Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events Helper Reference\u00b6 HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniter\u00b6 Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 Next \u00a9 Copyright 2014 - 2017, British Columbia Institute of Technology. Last updated on Jul 05, 2017. Built with Sphinx using a theme provided by Read the Docs. var DOCUMENTATION_OPTIONS = { URL_ROOT:'.\/', VERSION:'4.0.0-dev', COLLAPSE_INDEX:false, FILE_SUFFIX:'.html', HAS_SOURCE: false }; jQuery(function () { SphinxRtdTheme.StickyNav.enable(); }); Skip Quicknav About Debian Getting Debian Support Developers' Corner \u00a0 Download Debian 9.0(64-bit PC Network installer) Debian Debian is a free operating system (OS) for your computer. An operating system is the set of basic programs and utilities that make your computer run. Debian provides more than a pure OS: it comes with over 51000 packages, precompiled software bundled up in a nice format for easy installation on your machine. Read more... About Social Contract Code of Conduct Free Software Partners Donations Contact Us Help Debian Getting Debian Network install CD\/USB ISO images CD vendors Pre-installed Pure Blends Debian Packages Developers' Corner News Project News Events Documentation Release Info Installation manual Debian Books Debian Wiki Support Debian International Security Information Bug reports Mailing Lists Mailing List Archives Ports\/Architectures Miscellaneous Site map Search The Debian Blog The latest stable release of Debian is 9.0. The last update to this release was made on June 17th, 2017. Read more about available versions of Debian. Getting Started If you'd like to start using Debian, you can easily obtain a copy, and then follow the installation instructions to install it. If you're upgrading to the latest stable release from a previous version, please read the release notes before proceeding. To get help in using or setting up Debian, see our documentation and support pages. Users that speak languages other than English should check the international section. People who use systems other than Intel x86 should check the ports section. RSS News [18 Jun 2017] Debian Edu \/ Skolelinux Stretch \u2014 a complete Linux solution for your school[17 Jun 2017] Debian 9 Stretch released[06 May 2017] Updated Debian 8: 8.8 released[25 Apr 2017] Shutting down public FTP services[17 Apr 2017] Statement concerning the arrest of Dmitry Bogatov[14 Jan 2017] Updated Debian 8: 8.7 released For older news items see the News Page. If you would like to receive mail whenever new Debian news comes out, subscribe to the debian-announce mailing list. RSS Security Advisories [09 Jul 2017] DSA-3905 xorg-server - security update [08 Jul 2017] DSA-3904 bind9 - security update [05 Jul 2017] DSA-3903 tiff - security update [05 Jul 2017] DSA-3902 jabberd2 - security update [02 Jul 2017] DSA-3901 libgcrypt20 - security update [27 Jun 2017] DSA-3900 openvpn - security update [27 Jun 2017] DSA-3899 vlc - security update [25 Jun 2017] DSA-3898 expat - security update [24 Jun 2017] DSA-3897 drupal7 - security update [22 Jun 2017] DSA-3896 apache2 - security update [22 Jun 2017] DSA-3895 flatpak - security update [22 Jun 2017] DSA-3894 graphite2 - security update [22 Jun 2017] DSA-3893 jython - security update [22 Jun 2017] DSA-3892 tomcat7 - security update [22 Jun 2017] DSA-3891 tomcat8 - security update For older security advisories see the Security Page. If you would like to receive security advisories as soon as they're announced, subscribe to the debian-security-announce mailing list. This page is also available in the following languages: \u0639\u0631\u0628\u064a\u0629\u00a0(Arabiya) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u00a0(B\u0259lgarski) catal\u00e0 \u010desky dansk Deutsch \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\u00a0(Ellinika) espa\u00f1ol Esperanto \u0641\u0627\u0631\u0633\u06cc\u00a0(Farsi) fran\u00e7ais Galego \ud55c\uad6d\uc5b4\u00a0(Hangul) \u0540\u0561\u0575\u0565\u0580\u0565\u0576\u00a0(hayeren) hrvatski Indonesia Italiano \u05e2\u05d1\u05e8\u05d9\u05ea\u00a0(ivrit) Lietuvi\u0173 magyar Nederlands \u65e5\u672c\u8a9e\u00a0(Nihongo) norsk\u00a0(bokm\u00e5l) polski Portugu\u00eas rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439\u00a0(Russkij) slovensky suomi svenska \u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u00a0(Tamil) Ti\u1ebfng Vi\u1ec7t T\u00fcrk\u00e7e \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u00a0(ukrajins'ka) \u4e2d\u6587(\u7b80) \u4e2d\u6587(HK) \u4e2d\u6587(\u7e41) How to set the default document language To report a problem with the web site, e-mail our publicly archived mailing list debian-www@lists.debian.org. For other contact information, see the Debian contact page. Web site source code is available. Last Modified: Thu, Jun 8 15:25:09 UTC 2017 Copyright \u00a9 1997-2017 SPI and others; See license terms Debian is a registered trademark of Software in the Public Interest, Inc. Dev Home minFraud GeoIP FAQ Main Site Site Map English \u7b80\u4f53\u4e2d\u6587 (Chinese (Simplified)) Search\r Search\r Table of ContentsBinary DatabasesMaxMind Supported APIsThird-Party APIsUpdating Downloadable DatabasesCSV DatabasesDownload LimitsLinksSystem Status \/*","tags":"","url":"https:\/\/dev.maxmind.com\/geoip\/geoip2\/downloadable\/"},{"title":"The world's leading software development platform \u00b7 GitHub","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getScript() Categories: Ajax > Shorthand Methods jQuery.getScript( url [, success ] )Returns: jqXHR Description: Load a JavaScript file from the server using a GET HTTP request, then execute it. version added: 1.0jQuery.getScript( url [, success ] ) url Type: String A string containing the URL to which the request is sent. success Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 $.ajax({ url: url, dataType: \"script\", success: success}); The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page. Success Callback The callback is fired once the script has been loaded but not necessarily executed. Scripts are included and run by referencing the file name: 1 2 3 4 5 6 $.getScript( \"ajax\/test.js\", function( data, textStatus, jqxhr ) { console.log( data ); \/\/ Data returned console.log( textStatus ); \/\/ Success console.log( jqxhr.status ); \/\/ 200 console.log( \"Load was performed.\" );}); Handling Errors As of jQuery 1.5, you may use .fail() to account for errors: 1 2 3 4 5 6 7 $.getScript( \"ajax\/test.js\" ) .done(function( script, textStatus ) { console.log( textStatus ); }) .fail(function( jqxhr, settings, exception ) { $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );}); Prior to jQuery 1.5, the global .ajaxError() callback event had to be used in order to handle $.getScript() errors: 1 2 3 4 5 $( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) { if ( settings.dataType == \"script\" ) { $( this ).text( \"Triggered ajaxError handler.\" ); }}); Caching Responses By default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using $.ajaxSetup(): 1 2 3 $.ajaxSetup({ cache: true}); Alternatively, you could define a new method that uses the more flexible $.ajax() method. Examples: Define a $.cachedScript() method that allows fetching a cached script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 jQuery.cachedScript = function( url, options ) { \/\/ Allow user to set any option except for dataType, cache, and url options = $.extend( options || {}, { dataType: \"script\", cache: true, url: url }); \/\/ Use $.ajax() since it is more flexible than $.getScript \/\/ Return the jqXHR object so we can chain callbacks return jQuery.ajax( options );}; \/\/ Usage$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) { console.log( textStatus );}); Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 jQuery.getScript demo .block { background-color: blue; width: 150px; height: 70px; margin: 10px; } &raquo; Run var url = \"https:\/\/code.jquery.com\/color\/jquery.color.js\";$.getScript( url, function() { $( \"#go\" ).click(function() { $( \".block\" ) .animate({ backgroundColor: \"rgb(255, 180, 180)\" }, 1000 ) .delay( 500 ) .animate({ backgroundColor: \"olive\" }, 1000 ) .delay( 500\u00a0) .animate({ backgroundColor: \"#00f\" }, 1000 ); });}); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); Toggle navigation CodeIgniter Download Documentation Community Contribute CodeIgniter Rocks CodeIgniter is a powerful PHP framework with a very small footprint, built for developers who need a simple and elegant toolkit to create full-featured web applications. Star 14,705 Fork 6,953 @CodeIgniter Download The latest is Version 3.1.5 Read the Manual Clear documentation View the Forums Get Support & Discuss Things On GitHub Fix Bugs or Add Features Recent News 2017.07.11 Project Update - 2017.07.10 2017.06.19 CodeIgniter 3.1.5 Released 2017.03.20 CodeIgniter 3.1.4 released 2017.03.09 BCIT newsletter story about CodeIgniter 2017.01.20 Planned Server Downtime Jan 21, 2017 Active Forum Threads 2017.07.11 form_input don't output html since ci3 upgrade 2017.07.11 Community Auth : Login Error 2017.07.11 Get data from cookie on subdomain with Codeigniter 2017.07.11 local to gmt function doesn't work 2017.07.11 REST API request does not reply until shell script is done Why CodeIgniter? Framework with a small footprint CodeIgniter 3 has a 2MB download, including the user guide. Simple solutions over complexity CodeIgniter encourages MVC, but does not force it on you. Clear documentation The CodeIgniter User Guide comes with the download. It contains an introduction, tutorial, a number of \"how to\" guides, and then reference documentation for the components that make up the framework. Exceptional performance CodeIgniter consistently outperforms most of its competitors. Strong Security We take security seriously, with built-in protection against CSRF and XSS attacks. Nearly zero configuration Much of the CodeIgniter configuration is done by convention, for instance putting models in a \"models\" folder. There are still a number of configuration options available, through scripts in the \"config\" folder. Policies The Fine Print About CodeIgniter was created by EllisLab and is now a project of the British Columbia Institute of Technology !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = \/^http:\/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + ':\/\/platform.twitter.com\/widgets.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'twitter-wjs');\/* -1&&m>28){j=28+s;s='';if(j *\/ Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 CodeIgniter4 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 \u00a0 CodeIgniter4 Docs \u00bb CodeIgniter4 User Guide CodeIgniter4 User Guide\u00b6 License Agreement Change Log Welcome Installation Tutorial CodeIgniter4 Overview General Topics Library Reference Database Reference Helper Reference Contributing to CodeIgniter Welcome\u00b6 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance Installation\u00b6 InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server Tutorial\u00b6 TutorialStatic pages News section Create news items Conclusion CodeIgniter4 Overview\u00b6 CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General Topics\u00b6 General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library Reference\u00b6 Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database Reference\u00b6 Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events Helper Reference\u00b6 HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniter\u00b6 Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 Next \u00a9 Copyright 2014 - 2017, British Columbia Institute of Technology. Last updated on Jul 05, 2017. Built with Sphinx using a theme provided by Read the Docs. var DOCUMENTATION_OPTIONS = { URL_ROOT:'.\/', VERSION:'4.0.0-dev', COLLAPSE_INDEX:false, FILE_SUFFIX:'.html', HAS_SOURCE: false }; jQuery(function () { SphinxRtdTheme.StickyNav.enable(); }); Skip Quicknav About Debian Getting Debian Support Developers' Corner \u00a0 Download Debian 9.0(64-bit PC Network installer) Debian Debian is a free operating system (OS) for your computer. An operating system is the set of basic programs and utilities that make your computer run. Debian provides more than a pure OS: it comes with over 51000 packages, precompiled software bundled up in a nice format for easy installation on your machine. Read more... About Social Contract Code of Conduct Free Software Partners Donations Contact Us Help Debian Getting Debian Network install CD\/USB ISO images CD vendors Pre-installed Pure Blends Debian Packages Developers' Corner News Project News Events Documentation Release Info Installation manual Debian Books Debian Wiki Support Debian International Security Information Bug reports Mailing Lists Mailing List Archives Ports\/Architectures Miscellaneous Site map Search The Debian Blog The latest stable release of Debian is 9.0. The last update to this release was made on June 17th, 2017. Read more about available versions of Debian. Getting Started If you'd like to start using Debian, you can easily obtain a copy, and then follow the installation instructions to install it. If you're upgrading to the latest stable release from a previous version, please read the release notes before proceeding. To get help in using or setting up Debian, see our documentation and support pages. Users that speak languages other than English should check the international section. People who use systems other than Intel x86 should check the ports section. RSS News [18 Jun 2017] Debian Edu \/ Skolelinux Stretch \u2014 a complete Linux solution for your school[17 Jun 2017] Debian 9 Stretch released[06 May 2017] Updated Debian 8: 8.8 released[25 Apr 2017] Shutting down public FTP services[17 Apr 2017] Statement concerning the arrest of Dmitry Bogatov[14 Jan 2017] Updated Debian 8: 8.7 released For older news items see the News Page. If you would like to receive mail whenever new Debian news comes out, subscribe to the debian-announce mailing list. RSS Security Advisories [09 Jul 2017] DSA-3905 xorg-server - security update [08 Jul 2017] DSA-3904 bind9 - security update [05 Jul 2017] DSA-3903 tiff - security update [05 Jul 2017] DSA-3902 jabberd2 - security update [02 Jul 2017] DSA-3901 libgcrypt20 - security update [27 Jun 2017] DSA-3900 openvpn - security update [27 Jun 2017] DSA-3899 vlc - security update [25 Jun 2017] DSA-3898 expat - security update [24 Jun 2017] DSA-3897 drupal7 - security update [22 Jun 2017] DSA-3896 apache2 - security update [22 Jun 2017] DSA-3895 flatpak - security update [22 Jun 2017] DSA-3894 graphite2 - security update [22 Jun 2017] DSA-3893 jython - security update [22 Jun 2017] DSA-3892 tomcat7 - security update [22 Jun 2017] DSA-3891 tomcat8 - security update For older security advisories see the Security Page. If you would like to receive security advisories as soon as they're announced, subscribe to the debian-security-announce mailing list. This page is also available in the following languages: \u0639\u0631\u0628\u064a\u0629\u00a0(Arabiya) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u00a0(B\u0259lgarski) catal\u00e0 \u010desky dansk Deutsch \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\u00a0(Ellinika) espa\u00f1ol Esperanto \u0641\u0627\u0631\u0633\u06cc\u00a0(Farsi) fran\u00e7ais Galego \ud55c\uad6d\uc5b4\u00a0(Hangul) \u0540\u0561\u0575\u0565\u0580\u0565\u0576\u00a0(hayeren) hrvatski Indonesia Italiano \u05e2\u05d1\u05e8\u05d9\u05ea\u00a0(ivrit) Lietuvi\u0173 magyar Nederlands \u65e5\u672c\u8a9e\u00a0(Nihongo) norsk\u00a0(bokm\u00e5l) polski Portugu\u00eas rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439\u00a0(Russkij) slovensky suomi svenska \u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u00a0(Tamil) Ti\u1ebfng Vi\u1ec7t T\u00fcrk\u00e7e \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u00a0(ukrajins'ka) \u4e2d\u6587(\u7b80) \u4e2d\u6587(HK) \u4e2d\u6587(\u7e41) How to set the default document language To report a problem with the web site, e-mail our publicly archived mailing list debian-www@lists.debian.org. For other contact information, see the Debian contact page. Web site source code is available. Last Modified: Thu, Jun 8 15:25:09 UTC 2017 Copyright \u00a9 1997-2017 SPI and others; See license terms Debian is a registered trademark of Software in the Public Interest, Inc. Dev Home minFraud GeoIP FAQ Main Site Site Map English \u7b80\u4f53\u4e2d\u6587 (Chinese (Simplified)) Search\r Search\r Table of ContentsBinary DatabasesMaxMind Supported APIsThird-Party APIsUpdating Downloadable DatabasesCSV DatabasesDownload LimitsLinksSystem Status \/* Skip to content Features Business Explore Marketplace Pricing \/dashboard Sign in or Sign up Built for developers GitHub is a development platform inspired by the way you work. From open source to business, you can host and review code, manage projects, and build software alongside millions of other developers. Username Email Password Use at least one letter, one numeral, and seven characters. Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. Sign up for GitHub teams GitHub for teams A better way to work together GitHub brings teams together to work through problems, move ideas forward, and learn from each other along the way. Sign up your team Write better code Collaboration makes perfect. The conversations and code reviews that happen in Pull Requests help your team share the weight of your work and improve the software you build. Learn about code review on GitHub Manage your chaos Take a deep breath. On GitHub, project management happens in Issues and Projects, right alongside your code. All you have to do is mention a teammate to get them involved. Learn about project management on GitHub security-admin Security and administration Boxes? Check. We worried about your administrative and security needs so you don\u2019t have to. From flexible hosting to authentication options, GitHub can help you meet your team\u2019s requirements. Learn about GitHub for Business Code security Prevent problems before they happen. Protected branches, signed commits, and required status checks protect your work and help you maintain a high standard for your code. Access controlled Encourage teams to work together while limiting access to those who need it with granular permissions and authentication through SAML\/SSO and LDAP. Hosted where you need it Securely and reliably host your work on GitHub.com. Or, deploy GitHub Enterprise on your own servers or in a private cloud using Amazon Web Services, Azure or Google Cloud Platform. integrations Integrations Build on GitHub Customize your process with GitHub apps and an intuitive API. Integrate the tools you already use or discover new favorites to create a happier, more efficient way of working. Learn about integrations Sometimes, there\u2019s more than one tool for the job. Why not try something new? Browse GitHub Marketplace open-source Community Welcome home, developers GitHub is home to the world\u2019s largest community of developers and their\u00a0projects... Ariya Hidayat PhantomJS maintainer Russell Keith-Magee PyBee maintainer MailChimp Marketing customer Kris Nova Kubernetes\/kops maintainer Evan You Vue maintainer Mapbox Software customer Jess Frazelle Kubernetes, previously Docker maintainer ...whether you\u2019re making your first commit or sending a Rover to Mars, there\u2019s room for you here, too. 62M repositories worldwide GitHub\u2019s users create and maintain influential technologies alongside the world's largest open source\u00a0community. 22M developers worldwide Developers use GitHub for personal projects, from experimenting with new programming languages to hosting their life\u2019s work. 117K businesses worldwide Businesses of all sizes use GitHub to support their development process and to securely build software. More than a million teams use GitHub Get started for free \u2014 join the millions of developers already using GitHub to share their code, work together, and build amazing things. Username Email Password Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. \u00a9 2017 Features Code review Project management Community Documentation Code hosting Platform Atom Electron GitHub Desktop Developers Community Personal Open source For Business For Education Sponsorships Company About Blog Customers Careers Press Shop Resources Contact GitHub Help Status Terms Privacy Security Training You can't perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session.","tags":"","url":"http:\/\/github.com\/"},{"title":"Jekyll \u2022 Simple, blog-aware, static sites | Transform your plain text into static websites and blogs","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getScript() Categories: Ajax > Shorthand Methods jQuery.getScript( url [, success ] )Returns: jqXHR Description: Load a JavaScript file from the server using a GET HTTP request, then execute it. version added: 1.0jQuery.getScript( url [, success ] ) url Type: String A string containing the URL to which the request is sent. success Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 $.ajax({ url: url, dataType: \"script\", success: success}); The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page. Success Callback The callback is fired once the script has been loaded but not necessarily executed. Scripts are included and run by referencing the file name: 1 2 3 4 5 6 $.getScript( \"ajax\/test.js\", function( data, textStatus, jqxhr ) { console.log( data ); \/\/ Data returned console.log( textStatus ); \/\/ Success console.log( jqxhr.status ); \/\/ 200 console.log( \"Load was performed.\" );}); Handling Errors As of jQuery 1.5, you may use .fail() to account for errors: 1 2 3 4 5 6 7 $.getScript( \"ajax\/test.js\" ) .done(function( script, textStatus ) { console.log( textStatus ); }) .fail(function( jqxhr, settings, exception ) { $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );}); Prior to jQuery 1.5, the global .ajaxError() callback event had to be used in order to handle $.getScript() errors: 1 2 3 4 5 $( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) { if ( settings.dataType == \"script\" ) { $( this ).text( \"Triggered ajaxError handler.\" ); }}); Caching Responses By default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using $.ajaxSetup(): 1 2 3 $.ajaxSetup({ cache: true}); Alternatively, you could define a new method that uses the more flexible $.ajax() method. Examples: Define a $.cachedScript() method that allows fetching a cached script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 jQuery.cachedScript = function( url, options ) { \/\/ Allow user to set any option except for dataType, cache, and url options = $.extend( options || {}, { dataType: \"script\", cache: true, url: url }); \/\/ Use $.ajax() since it is more flexible than $.getScript \/\/ Return the jqXHR object so we can chain callbacks return jQuery.ajax( options );}; \/\/ Usage$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) { console.log( textStatus );}); Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 jQuery.getScript demo .block { background-color: blue; width: 150px; height: 70px; margin: 10px; } &raquo; Run var url = \"https:\/\/code.jquery.com\/color\/jquery.color.js\";$.getScript( url, function() { $( \"#go\" ).click(function() { $( \".block\" ) .animate({ backgroundColor: \"rgb(255, 180, 180)\" }, 1000 ) .delay( 500 ) .animate({ backgroundColor: \"olive\" }, 1000 ) .delay( 500\u00a0) .animate({ backgroundColor: \"#00f\" }, 1000 ); });}); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); Toggle navigation CodeIgniter Download Documentation Community Contribute CodeIgniter Rocks CodeIgniter is a powerful PHP framework with a very small footprint, built for developers who need a simple and elegant toolkit to create full-featured web applications. Star 14,705 Fork 6,953 @CodeIgniter Download The latest is Version 3.1.5 Read the Manual Clear documentation View the Forums Get Support & Discuss Things On GitHub Fix Bugs or Add Features Recent News 2017.07.11 Project Update - 2017.07.10 2017.06.19 CodeIgniter 3.1.5 Released 2017.03.20 CodeIgniter 3.1.4 released 2017.03.09 BCIT newsletter story about CodeIgniter 2017.01.20 Planned Server Downtime Jan 21, 2017 Active Forum Threads 2017.07.11 form_input don't output html since ci3 upgrade 2017.07.11 Community Auth : Login Error 2017.07.11 Get data from cookie on subdomain with Codeigniter 2017.07.11 local to gmt function doesn't work 2017.07.11 REST API request does not reply until shell script is done Why CodeIgniter? Framework with a small footprint CodeIgniter 3 has a 2MB download, including the user guide. Simple solutions over complexity CodeIgniter encourages MVC, but does not force it on you. Clear documentation The CodeIgniter User Guide comes with the download. It contains an introduction, tutorial, a number of \"how to\" guides, and then reference documentation for the components that make up the framework. Exceptional performance CodeIgniter consistently outperforms most of its competitors. Strong Security We take security seriously, with built-in protection against CSRF and XSS attacks. Nearly zero configuration Much of the CodeIgniter configuration is done by convention, for instance putting models in a \"models\" folder. There are still a number of configuration options available, through scripts in the \"config\" folder. Policies The Fine Print About CodeIgniter was created by EllisLab and is now a project of the British Columbia Institute of Technology !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = \/^http:\/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + ':\/\/platform.twitter.com\/widgets.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'twitter-wjs');\/* -1&&m>28){j=28+s;s='';if(j *\/ Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 CodeIgniter4 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 \u00a0 CodeIgniter4 Docs \u00bb CodeIgniter4 User Guide CodeIgniter4 User Guide\u00b6 License Agreement Change Log Welcome Installation Tutorial CodeIgniter4 Overview General Topics Library Reference Database Reference Helper Reference Contributing to CodeIgniter Welcome\u00b6 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance Installation\u00b6 InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server Tutorial\u00b6 TutorialStatic pages News section Create news items Conclusion CodeIgniter4 Overview\u00b6 CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General Topics\u00b6 General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library Reference\u00b6 Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database Reference\u00b6 Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events Helper Reference\u00b6 HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniter\u00b6 Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 Next \u00a9 Copyright 2014 - 2017, British Columbia Institute of Technology. Last updated on Jul 05, 2017. Built with Sphinx using a theme provided by Read the Docs. var DOCUMENTATION_OPTIONS = { URL_ROOT:'.\/', VERSION:'4.0.0-dev', COLLAPSE_INDEX:false, FILE_SUFFIX:'.html', HAS_SOURCE: false }; jQuery(function () { SphinxRtdTheme.StickyNav.enable(); }); Skip Quicknav About Debian Getting Debian Support Developers' Corner \u00a0 Download Debian 9.0(64-bit PC Network installer) Debian Debian is a free operating system (OS) for your computer. An operating system is the set of basic programs and utilities that make your computer run. Debian provides more than a pure OS: it comes with over 51000 packages, precompiled software bundled up in a nice format for easy installation on your machine. Read more... About Social Contract Code of Conduct Free Software Partners Donations Contact Us Help Debian Getting Debian Network install CD\/USB ISO images CD vendors Pre-installed Pure Blends Debian Packages Developers' Corner News Project News Events Documentation Release Info Installation manual Debian Books Debian Wiki Support Debian International Security Information Bug reports Mailing Lists Mailing List Archives Ports\/Architectures Miscellaneous Site map Search The Debian Blog The latest stable release of Debian is 9.0. The last update to this release was made on June 17th, 2017. Read more about available versions of Debian. Getting Started If you'd like to start using Debian, you can easily obtain a copy, and then follow the installation instructions to install it. If you're upgrading to the latest stable release from a previous version, please read the release notes before proceeding. To get help in using or setting up Debian, see our documentation and support pages. Users that speak languages other than English should check the international section. People who use systems other than Intel x86 should check the ports section. RSS News [18 Jun 2017] Debian Edu \/ Skolelinux Stretch \u2014 a complete Linux solution for your school[17 Jun 2017] Debian 9 Stretch released[06 May 2017] Updated Debian 8: 8.8 released[25 Apr 2017] Shutting down public FTP services[17 Apr 2017] Statement concerning the arrest of Dmitry Bogatov[14 Jan 2017] Updated Debian 8: 8.7 released For older news items see the News Page. If you would like to receive mail whenever new Debian news comes out, subscribe to the debian-announce mailing list. RSS Security Advisories [09 Jul 2017] DSA-3905 xorg-server - security update [08 Jul 2017] DSA-3904 bind9 - security update [05 Jul 2017] DSA-3903 tiff - security update [05 Jul 2017] DSA-3902 jabberd2 - security update [02 Jul 2017] DSA-3901 libgcrypt20 - security update [27 Jun 2017] DSA-3900 openvpn - security update [27 Jun 2017] DSA-3899 vlc - security update [25 Jun 2017] DSA-3898 expat - security update [24 Jun 2017] DSA-3897 drupal7 - security update [22 Jun 2017] DSA-3896 apache2 - security update [22 Jun 2017] DSA-3895 flatpak - security update [22 Jun 2017] DSA-3894 graphite2 - security update [22 Jun 2017] DSA-3893 jython - security update [22 Jun 2017] DSA-3892 tomcat7 - security update [22 Jun 2017] DSA-3891 tomcat8 - security update For older security advisories see the Security Page. If you would like to receive security advisories as soon as they're announced, subscribe to the debian-security-announce mailing list. This page is also available in the following languages: \u0639\u0631\u0628\u064a\u0629\u00a0(Arabiya) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u00a0(B\u0259lgarski) catal\u00e0 \u010desky dansk Deutsch \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\u00a0(Ellinika) espa\u00f1ol Esperanto \u0641\u0627\u0631\u0633\u06cc\u00a0(Farsi) fran\u00e7ais Galego \ud55c\uad6d\uc5b4\u00a0(Hangul) \u0540\u0561\u0575\u0565\u0580\u0565\u0576\u00a0(hayeren) hrvatski Indonesia Italiano \u05e2\u05d1\u05e8\u05d9\u05ea\u00a0(ivrit) Lietuvi\u0173 magyar Nederlands \u65e5\u672c\u8a9e\u00a0(Nihongo) norsk\u00a0(bokm\u00e5l) polski Portugu\u00eas rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439\u00a0(Russkij) slovensky suomi svenska \u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u00a0(Tamil) Ti\u1ebfng Vi\u1ec7t T\u00fcrk\u00e7e \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u00a0(ukrajins'ka) \u4e2d\u6587(\u7b80) \u4e2d\u6587(HK) \u4e2d\u6587(\u7e41) How to set the default document language To report a problem with the web site, e-mail our publicly archived mailing list debian-www@lists.debian.org. For other contact information, see the Debian contact page. Web site source code is available. Last Modified: Thu, Jun 8 15:25:09 UTC 2017 Copyright \u00a9 1997-2017 SPI and others; See license terms Debian is a registered trademark of Software in the Public Interest, Inc. Dev Home minFraud GeoIP FAQ Main Site Site Map English \u7b80\u4f53\u4e2d\u6587 (Chinese (Simplified)) Search\r Search\r Table of ContentsBinary DatabasesMaxMind Supported APIsThird-Party APIsUpdating Downloadable DatabasesCSV DatabasesDownload LimitsLinksSystem Status \/* Skip to content Features Business Explore Marketplace Pricing \/dashboard Sign in or Sign up Built for developers GitHub is a development platform inspired by the way you work. From open source to business, you can host and review code, manage projects, and build software alongside millions of other developers. Username Email Password Use at least one letter, one numeral, and seven characters. Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. Sign up for GitHub teams GitHub for teams A better way to work together GitHub brings teams together to work through problems, move ideas forward, and learn from each other along the way. Sign up your team Write better code Collaboration makes perfect. The conversations and code reviews that happen in Pull Requests help your team share the weight of your work and improve the software you build. Learn about code review on GitHub Manage your chaos Take a deep breath. On GitHub, project management happens in Issues and Projects, right alongside your code. All you have to do is mention a teammate to get them involved. Learn about project management on GitHub security-admin Security and administration Boxes? Check. We worried about your administrative and security needs so you don\u2019t have to. From flexible hosting to authentication options, GitHub can help you meet your team\u2019s requirements. Learn about GitHub for Business Code security Prevent problems before they happen. Protected branches, signed commits, and required status checks protect your work and help you maintain a high standard for your code. Access controlled Encourage teams to work together while limiting access to those who need it with granular permissions and authentication through SAML\/SSO and LDAP. Hosted where you need it Securely and reliably host your work on GitHub.com. Or, deploy GitHub Enterprise on your own servers or in a private cloud using Amazon Web Services, Azure or Google Cloud Platform. integrations Integrations Build on GitHub Customize your process with GitHub apps and an intuitive API. Integrate the tools you already use or discover new favorites to create a happier, more efficient way of working. Learn about integrations Sometimes, there\u2019s more than one tool for the job. Why not try something new? Browse GitHub Marketplace open-source Community Welcome home, developers GitHub is home to the world\u2019s largest community of developers and their\u00a0projects... Ariya Hidayat PhantomJS maintainer Russell Keith-Magee PyBee maintainer MailChimp Marketing customer Kris Nova Kubernetes\/kops maintainer Evan You Vue maintainer Mapbox Software customer Jess Frazelle Kubernetes, previously Docker maintainer ...whether you\u2019re making your first commit or sending a Rover to Mars, there\u2019s room for you here, too. 62M repositories worldwide GitHub\u2019s users create and maintain influential technologies alongside the world's largest open source\u00a0community. 22M developers worldwide Developers use GitHub for personal projects, from experimenting with new programming languages to hosting their life\u2019s work. 117K businesses worldwide Businesses of all sizes use GitHub to support their development process and to securely build software. More than a million teams use GitHub Get started for free \u2014 join the millions of developers already using GitHub to share their code, work together, and build amazing things. Username Email Password Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. \u00a9 2017 Features Code review Project management Community Documentation Code hosting Platform Atom Electron GitHub Desktop Developers Community Personal Open source For Business For Education Sponsorships Company About Blog Customers Careers Press Shop Resources Contact GitHub Help Status Terms Privacy Security Training You can't perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Transform your plain text into static\u00a0websites and\u00a0blogs. Simple No more databases, comment moderation, or pesky updates to install\u2014just your content. How Jekyll works \u2192 Static Markdown (or Textile), Liquid, HTML & CSS go in. Static sites come out ready for deployment. Jekyll template guide \u2192 Blog-aware Permalinks, categories, pages, posts, and custom layouts are all first-class citizens here. Migrate your blog \u2192 Get up and running in\u00a0seconds. Quick-start Instructions ~ $ gem install jekyll bundler ~ $ jekyll new my-awesome-site ~ $ cd my-awesome-site ~\/my-awesome-site $ bundle exec jekyll serve # => Now browse to http:\/\/localhost:4000 Free hosting with GitHub Pages Sick of dealing with hosting companies? GitHub Pages are powered by Jekyll, so you can easily deploy your site using GitHub for free\u2014custom domain name and\u00a0all. Learn more about GitHub Pages \u2192 The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level","tags":"","url":"http:\/\/jekyllrb.com\/"},{"title":"Templates | Jekyll \u2022 Simple, blog-aware, static sites","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getScript() Categories: Ajax > Shorthand Methods jQuery.getScript( url [, success ] )Returns: jqXHR Description: Load a JavaScript file from the server using a GET HTTP request, then execute it. version added: 1.0jQuery.getScript( url [, success ] ) url Type: String A string containing the URL to which the request is sent. success Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 $.ajax({ url: url, dataType: \"script\", success: success}); The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page. Success Callback The callback is fired once the script has been loaded but not necessarily executed. Scripts are included and run by referencing the file name: 1 2 3 4 5 6 $.getScript( \"ajax\/test.js\", function( data, textStatus, jqxhr ) { console.log( data ); \/\/ Data returned console.log( textStatus ); \/\/ Success console.log( jqxhr.status ); \/\/ 200 console.log( \"Load was performed.\" );}); Handling Errors As of jQuery 1.5, you may use .fail() to account for errors: 1 2 3 4 5 6 7 $.getScript( \"ajax\/test.js\" ) .done(function( script, textStatus ) { console.log( textStatus ); }) .fail(function( jqxhr, settings, exception ) { $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );}); Prior to jQuery 1.5, the global .ajaxError() callback event had to be used in order to handle $.getScript() errors: 1 2 3 4 5 $( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) { if ( settings.dataType == \"script\" ) { $( this ).text( \"Triggered ajaxError handler.\" ); }}); Caching Responses By default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using $.ajaxSetup(): 1 2 3 $.ajaxSetup({ cache: true}); Alternatively, you could define a new method that uses the more flexible $.ajax() method. Examples: Define a $.cachedScript() method that allows fetching a cached script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 jQuery.cachedScript = function( url, options ) { \/\/ Allow user to set any option except for dataType, cache, and url options = $.extend( options || {}, { dataType: \"script\", cache: true, url: url }); \/\/ Use $.ajax() since it is more flexible than $.getScript \/\/ Return the jqXHR object so we can chain callbacks return jQuery.ajax( options );}; \/\/ Usage$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) { console.log( textStatus );}); Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 jQuery.getScript demo .block { background-color: blue; width: 150px; height: 70px; margin: 10px; } &raquo; Run var url = \"https:\/\/code.jquery.com\/color\/jquery.color.js\";$.getScript( url, function() { $( \"#go\" ).click(function() { $( \".block\" ) .animate({ backgroundColor: \"rgb(255, 180, 180)\" }, 1000 ) .delay( 500 ) .animate({ backgroundColor: \"olive\" }, 1000 ) .delay( 500\u00a0) .animate({ backgroundColor: \"#00f\" }, 1000 ); });}); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); Toggle navigation CodeIgniter Download Documentation Community Contribute CodeIgniter Rocks CodeIgniter is a powerful PHP framework with a very small footprint, built for developers who need a simple and elegant toolkit to create full-featured web applications. Star 14,705 Fork 6,953 @CodeIgniter Download The latest is Version 3.1.5 Read the Manual Clear documentation View the Forums Get Support & Discuss Things On GitHub Fix Bugs or Add Features Recent News 2017.07.11 Project Update - 2017.07.10 2017.06.19 CodeIgniter 3.1.5 Released 2017.03.20 CodeIgniter 3.1.4 released 2017.03.09 BCIT newsletter story about CodeIgniter 2017.01.20 Planned Server Downtime Jan 21, 2017 Active Forum Threads 2017.07.11 form_input don't output html since ci3 upgrade 2017.07.11 Community Auth : Login Error 2017.07.11 Get data from cookie on subdomain with Codeigniter 2017.07.11 local to gmt function doesn't work 2017.07.11 REST API request does not reply until shell script is done Why CodeIgniter? Framework with a small footprint CodeIgniter 3 has a 2MB download, including the user guide. Simple solutions over complexity CodeIgniter encourages MVC, but does not force it on you. Clear documentation The CodeIgniter User Guide comes with the download. It contains an introduction, tutorial, a number of \"how to\" guides, and then reference documentation for the components that make up the framework. Exceptional performance CodeIgniter consistently outperforms most of its competitors. Strong Security We take security seriously, with built-in protection against CSRF and XSS attacks. Nearly zero configuration Much of the CodeIgniter configuration is done by convention, for instance putting models in a \"models\" folder. There are still a number of configuration options available, through scripts in the \"config\" folder. Policies The Fine Print About CodeIgniter was created by EllisLab and is now a project of the British Columbia Institute of Technology !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = \/^http:\/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + ':\/\/platform.twitter.com\/widgets.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'twitter-wjs');\/* -1&&m>28){j=28+s;s='';if(j *\/ Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 CodeIgniter4 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 \u00a0 CodeIgniter4 Docs \u00bb CodeIgniter4 User Guide CodeIgniter4 User Guide\u00b6 License Agreement Change Log Welcome Installation Tutorial CodeIgniter4 Overview General Topics Library Reference Database Reference Helper Reference Contributing to CodeIgniter Welcome\u00b6 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance Installation\u00b6 InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server Tutorial\u00b6 TutorialStatic pages News section Create news items Conclusion CodeIgniter4 Overview\u00b6 CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General Topics\u00b6 General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library Reference\u00b6 Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database Reference\u00b6 Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events Helper Reference\u00b6 HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniter\u00b6 Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 Next \u00a9 Copyright 2014 - 2017, British Columbia Institute of Technology. Last updated on Jul 05, 2017. Built with Sphinx using a theme provided by Read the Docs. var DOCUMENTATION_OPTIONS = { URL_ROOT:'.\/', VERSION:'4.0.0-dev', COLLAPSE_INDEX:false, FILE_SUFFIX:'.html', HAS_SOURCE: false }; jQuery(function () { SphinxRtdTheme.StickyNav.enable(); }); Skip Quicknav About Debian Getting Debian Support Developers' Corner \u00a0 Download Debian 9.0(64-bit PC Network installer) Debian Debian is a free operating system (OS) for your computer. An operating system is the set of basic programs and utilities that make your computer run. Debian provides more than a pure OS: it comes with over 51000 packages, precompiled software bundled up in a nice format for easy installation on your machine. Read more... About Social Contract Code of Conduct Free Software Partners Donations Contact Us Help Debian Getting Debian Network install CD\/USB ISO images CD vendors Pre-installed Pure Blends Debian Packages Developers' Corner News Project News Events Documentation Release Info Installation manual Debian Books Debian Wiki Support Debian International Security Information Bug reports Mailing Lists Mailing List Archives Ports\/Architectures Miscellaneous Site map Search The Debian Blog The latest stable release of Debian is 9.0. The last update to this release was made on June 17th, 2017. Read more about available versions of Debian. Getting Started If you'd like to start using Debian, you can easily obtain a copy, and then follow the installation instructions to install it. If you're upgrading to the latest stable release from a previous version, please read the release notes before proceeding. To get help in using or setting up Debian, see our documentation and support pages. Users that speak languages other than English should check the international section. People who use systems other than Intel x86 should check the ports section. RSS News [18 Jun 2017] Debian Edu \/ Skolelinux Stretch \u2014 a complete Linux solution for your school[17 Jun 2017] Debian 9 Stretch released[06 May 2017] Updated Debian 8: 8.8 released[25 Apr 2017] Shutting down public FTP services[17 Apr 2017] Statement concerning the arrest of Dmitry Bogatov[14 Jan 2017] Updated Debian 8: 8.7 released For older news items see the News Page. If you would like to receive mail whenever new Debian news comes out, subscribe to the debian-announce mailing list. RSS Security Advisories [09 Jul 2017] DSA-3905 xorg-server - security update [08 Jul 2017] DSA-3904 bind9 - security update [05 Jul 2017] DSA-3903 tiff - security update [05 Jul 2017] DSA-3902 jabberd2 - security update [02 Jul 2017] DSA-3901 libgcrypt20 - security update [27 Jun 2017] DSA-3900 openvpn - security update [27 Jun 2017] DSA-3899 vlc - security update [25 Jun 2017] DSA-3898 expat - security update [24 Jun 2017] DSA-3897 drupal7 - security update [22 Jun 2017] DSA-3896 apache2 - security update [22 Jun 2017] DSA-3895 flatpak - security update [22 Jun 2017] DSA-3894 graphite2 - security update [22 Jun 2017] DSA-3893 jython - security update [22 Jun 2017] DSA-3892 tomcat7 - security update [22 Jun 2017] DSA-3891 tomcat8 - security update For older security advisories see the Security Page. If you would like to receive security advisories as soon as they're announced, subscribe to the debian-security-announce mailing list. This page is also available in the following languages: \u0639\u0631\u0628\u064a\u0629\u00a0(Arabiya) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u00a0(B\u0259lgarski) catal\u00e0 \u010desky dansk Deutsch \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\u00a0(Ellinika) espa\u00f1ol Esperanto \u0641\u0627\u0631\u0633\u06cc\u00a0(Farsi) fran\u00e7ais Galego \ud55c\uad6d\uc5b4\u00a0(Hangul) \u0540\u0561\u0575\u0565\u0580\u0565\u0576\u00a0(hayeren) hrvatski Indonesia Italiano \u05e2\u05d1\u05e8\u05d9\u05ea\u00a0(ivrit) Lietuvi\u0173 magyar Nederlands \u65e5\u672c\u8a9e\u00a0(Nihongo) norsk\u00a0(bokm\u00e5l) polski Portugu\u00eas rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439\u00a0(Russkij) slovensky suomi svenska \u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u00a0(Tamil) Ti\u1ebfng Vi\u1ec7t T\u00fcrk\u00e7e \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u00a0(ukrajins'ka) \u4e2d\u6587(\u7b80) \u4e2d\u6587(HK) \u4e2d\u6587(\u7e41) How to set the default document language To report a problem with the web site, e-mail our publicly archived mailing list debian-www@lists.debian.org. For other contact information, see the Debian contact page. Web site source code is available. Last Modified: Thu, Jun 8 15:25:09 UTC 2017 Copyright \u00a9 1997-2017 SPI and others; See license terms Debian is a registered trademark of Software in the Public Interest, Inc. Dev Home minFraud GeoIP FAQ Main Site Site Map English \u7b80\u4f53\u4e2d\u6587 (Chinese (Simplified)) Search\r Search\r Table of ContentsBinary DatabasesMaxMind Supported APIsThird-Party APIsUpdating Downloadable DatabasesCSV DatabasesDownload LimitsLinksSystem Status \/* Skip to content Features Business Explore Marketplace Pricing \/dashboard Sign in or Sign up Built for developers GitHub is a development platform inspired by the way you work. From open source to business, you can host and review code, manage projects, and build software alongside millions of other developers. Username Email Password Use at least one letter, one numeral, and seven characters. Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. Sign up for GitHub teams GitHub for teams A better way to work together GitHub brings teams together to work through problems, move ideas forward, and learn from each other along the way. Sign up your team Write better code Collaboration makes perfect. The conversations and code reviews that happen in Pull Requests help your team share the weight of your work and improve the software you build. Learn about code review on GitHub Manage your chaos Take a deep breath. On GitHub, project management happens in Issues and Projects, right alongside your code. All you have to do is mention a teammate to get them involved. Learn about project management on GitHub security-admin Security and administration Boxes? Check. We worried about your administrative and security needs so you don\u2019t have to. From flexible hosting to authentication options, GitHub can help you meet your team\u2019s requirements. Learn about GitHub for Business Code security Prevent problems before they happen. Protected branches, signed commits, and required status checks protect your work and help you maintain a high standard for your code. Access controlled Encourage teams to work together while limiting access to those who need it with granular permissions and authentication through SAML\/SSO and LDAP. Hosted where you need it Securely and reliably host your work on GitHub.com. Or, deploy GitHub Enterprise on your own servers or in a private cloud using Amazon Web Services, Azure or Google Cloud Platform. integrations Integrations Build on GitHub Customize your process with GitHub apps and an intuitive API. Integrate the tools you already use or discover new favorites to create a happier, more efficient way of working. Learn about integrations Sometimes, there\u2019s more than one tool for the job. Why not try something new? Browse GitHub Marketplace open-source Community Welcome home, developers GitHub is home to the world\u2019s largest community of developers and their\u00a0projects... Ariya Hidayat PhantomJS maintainer Russell Keith-Magee PyBee maintainer MailChimp Marketing customer Kris Nova Kubernetes\/kops maintainer Evan You Vue maintainer Mapbox Software customer Jess Frazelle Kubernetes, previously Docker maintainer ...whether you\u2019re making your first commit or sending a Rover to Mars, there\u2019s room for you here, too. 62M repositories worldwide GitHub\u2019s users create and maintain influential technologies alongside the world's largest open source\u00a0community. 22M developers worldwide Developers use GitHub for personal projects, from experimenting with new programming languages to hosting their life\u2019s work. 117K businesses worldwide Businesses of all sizes use GitHub to support their development process and to securely build software. More than a million teams use GitHub Get started for free \u2014 join the millions of developers already using GitHub to share their code, work together, and build amazing things. Username Email Password Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. \u00a9 2017 Features Code review Project management Community Documentation Code hosting Platform Atom Electron GitHub Desktop Developers Community Personal Open source For Business For Education Sponsorships Company About Blog Customers Careers Press Shop Resources Contact GitHub Help Status Terms Privacy Security Training You can't perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Transform your plain text into static\u00a0websites and\u00a0blogs. Simple No more databases, comment moderation, or pesky updates to install\u2014just your content. How Jekyll works \u2192 Static Markdown (or Textile), Liquid, HTML & CSS go in. Static sites come out ready for deployment. Jekyll template guide \u2192 Blog-aware Permalinks, categories, pages, posts, and custom layouts are all first-class citizens here. Migrate your blog \u2192 Get up and running in\u00a0seconds. Quick-start Instructions ~ $ gem install jekyll bundler ~ $ jekyll new my-awesome-site ~ $ cd my-awesome-site ~\/my-awesome-site $ bundle exec jekyll serve # => Now browse to http:\/\/localhost:4000 Free hosting with GitHub Pages Sick of dealing with hosting companies? GitHub Pages are powered by Jekyll, so you can easily deploy your site using GitHub for free\u2014custom domain name and\u00a0all. Learn more about GitHub Pages \u2192 The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Navigate the docs\u2026WelcomeQuick-start guideInstallationJekyll on WindowsBasic UsageDirectory structureConfigurationFront MatterWriting postsWorking with draftsCreating pagesStatic FilesVariablesCollectionsData FilesAssetsBlog migrationsTemplatesIncludesPermalinksPaginationPluginsThemesExtrasGitHub PagesDeployment methodsContinuous IntegrationTroubleshootingSites using JekyllResourcesUpgrading from 0.x to 2.xUpgrading from 2.x to 3.xContributingMaintaining JekyllCode of ConductHistory \u00a0Improve this page Templates Jekyll uses the Liquid templating language to process templates. All of the standard Liquid tags and filters are supported. Jekyll even adds a few handy filters and tags of its own to make common tasks easier. Filters Description Filter and Output Relative URL Prepend the baseurl value to the input. Useful if your site is hosted at a subpath rather than the root of the domain. {{ \"\/assets\/style.css\" | relative_url }} \/my-baseurl\/assets\/style.css Absolute URL Prepend the url and baseurl value to the input. {{ \"\/assets\/style.css\" | absolute_url }} http:\/\/example.com\/my-baseurl\/assets\/style.css Date to XML Schema Convert a Date into XML Schema (ISO 8601) format. {{ site.time | date_to_xmlschema }} 2008-11-07T13:07:54-08:00 Date to RFC-822 Format Convert a Date into the RFC-822 format used for RSS feeds. {{ site.time | date_to_rfc822 }} Mon, 07 Nov 2008 13:07:54 -0800 Date to String Convert a date to short format. {{ site.time | date_to_string }} 07 Nov 2008 Date to Long String Format a date to long format. {{ site.time | date_to_long_string }} 07 November 2008 Where Select all the objects in an array where the key has the given value. {{ site.members | where:\"graduation_year\",\"2014\" }} Where Expression Select all the objects in an array where the expression is true. Jekyll v3.2.0 & later. {{ site.members | where_exp:\"item\", \"item.graduation_year == 2014\" }} {{ site.members | where_exp:\"item\", \"item.graduation_year < 2014\" }} {{ site.members | where_exp:\"item\", \"item.projects contains 'foo'\" }} Group By Group an array's items by a given property. {{ site.members | group_by:\"graduation_year\" }} [{\"name\"=>\"2013\", \"items\"=>[...]}, {\"name\"=>\"2014\", \"items\"=>[...]}] Group By Expression Group an array's items using a Liquid expression. {{ site.members | group_by_exp:\"item\", \"item.graduation_year | truncate: 3, \\\"\\\"\" }} [{\"name\"=>\"201...\", \"items\"=>[...]}, {\"name\"=>\"200...\", \"items\"=>[...]}] XML Escape Escape some text for use in XML. {{ page.content | xml_escape }} CGI Escape CGI escape a string for use in a URL. Replaces any special characters with appropriate %XX replacements. CGI escape normally replaces a space with a plus + sign. {{ \"foo, bar; baz?\" | cgi_escape }} foo%2C+bar%3B+baz%3F URI Escape Percent encodes any special characters in a URI. URI escape normally replaces a space with %20. Reserved characters will not be escaped. {{ \"http:\/\/foo.com\/?q=foo, \\bar?\" | uri_escape }} http:\/\/foo.com\/?q=foo,%20%5Cbar? Number of Words Count the number of words in some text. {{ page.content | number_of_words }} 1337 Array to Sentence Convert an array into a sentence. Useful for listing tags. Optional argument for connector. {{ page.tags | array_to_sentence_string }} foo, bar, and baz {{ page.tags | array_to_sentence_string: 'or' }} foo, bar, or baz Markdownify Convert a Markdown-formatted string into HTML. {{ page.excerpt | markdownify }} Smartify Convert \"quotes\" into \u201csmart quotes.\u201d {{ page.title | smartify }} Converting Sass\/SCSS Convert a Sass- or SCSS-formatted string into CSS. {{ some_scss | scssify }} {{ some_sass | sassify }} Slugify Convert a string into a lowercase URL \"slug\". See below for options. {{ \"The _config.yml file\" | slugify }} the-config-yml-file {{ \"The _config.yml file\" | slugify: 'pretty' }} the-_config.yml-file Data To JSON Convert Hash or Array to JSON. {{ site.data.projects | jsonify }} Normalize Whitespace Replace any occurrence of whitespace with a single space. {{ \"a \\n b\" | normalize_whitespace }} Sort Sort an array. Optional arguments for hashes: 1.\u00a0property name 2.\u00a0nils order (first or last). {{ page.tags | sort }} {{ site.posts | sort: 'author' }} {{ site.pages | sort: 'title', 'last' }} Sample Pick a random value from an array. Optional: pick multiple values. {{ site.pages | sample }} {{ site.pages | sample:2 }} To Integer Convert a string or boolean to integer. {{ some_var | to_integer }} Array Filters Push, pop, shift, and unshift elements from an Array. These are NON-DESTRUCTIVE, i.e. they do not mutate the array, but rather make a copy and mutate that. {{ page.tags | push: 'Spokane' }} ['Seattle', 'Tacoma', 'Spokane'] {{ page.tags | pop }} ['Seattle'] {{ page.tags | shift }} ['Tacoma'] {{ page.tags | unshift: \"Olympia\" }} ['Olympia', 'Seattle', 'Tacoma'] Inspect Convert an object into its String representation for debugging. {{ some_var | inspect }} Options for the slugify filter The slugify filter accepts an option, each specifying what to filter. The default is default. They are as follows (with what they filter): none: no characters raw: spaces default: spaces and non-alphanumeric characters pretty: spaces and non-alphanumeric characters except for ._~!$&'()+,;=@ Tags Includes If you have small page snippets that you want to include in multiple places on your site, save the snippets as include files and insert them where required, by using the include tag: {% include footer.html %} Jekyll expects all include files to be placed in an _includes directory at the root of your source directory. In the above example, this will embed the contents of _includes\/footer.html into the calling file. For more advanced information on using includes, see Includes. Code snippet highlighting Jekyll has built in support for syntax highlighting of over 60 languages thanks to Rouge. Rouge is the default highlighter in Jekyll 3 and above. To use it in Jekyll 2, set highlighter to rouge and ensure the rouge gem is installed properly. Alternatively, you can use Pygments to highlight your code snippets. To use Pygments, you must have Python installed on your system, have the pygments.rb gem installed and set highlighter to pygments in your site\u2019s configuration file. Pygments supports over 100 languages To render a code block with syntax highlighting, surround your code as follows: {% highlight ruby %} def foo puts 'foo' end {% endhighlight %} The argument to the highlight tag (ruby in the example above) is the language identifier. To find the appropriate identifier to use for the language you want to highlight, look for the \u201cshort name\u201d on the Rouge wiki or the Pygments\u2019 Lexers page. Line numbers There is a second argument to highlight called linenos that is optional. Including the linenos argument will force the highlighted code to include line numbers. For instance, the following code block would include line numbers next to each line: {% highlight ruby linenos %} def foo puts 'foo' end {% endhighlight %} Stylesheets for syntax highlighting In order for the highlighting to show up, you\u2019ll need to include a highlighting stylesheet. For an example stylesheet you can look at syntax.css. These are the same styles as used by GitHub and you are free to use them for your own site. If you use linenos, you might want to include an additional CSS class definition for the .lineno class in syntax.css to distinguish the line numbers from the highlighted code. Gist Use the gist tag to easily embed a GitHub Gist onto your site. This works with public or secret gists: {% gist parkr\/931c1c8d465a04042403 %} You may also optionally specify the filename in the gist to display: {% gist parkr\/931c1c8d465a04042403 jekyll-private-gist.markdown %} To use the gist tag, you\u2019ll need to add the jekyll-gist gem to your project. Links Linking to pages To link to a post, a page, collection item, or file, the link tag will generate the correct permalink URL for the path you specify. For example, if you use the link tag to link to mypage.html, even if you change your permalink style to include the file extension or omit it, the URL formed by the link tag will always be valid. You must include the file\u2019s original extension when using the link tag. Here are some examples: {{ site.baseurl }}{% link _collection\/name-of-document.md %} {{ site.baseurl }}{% link _posts\/2016-07-26-name-of-post.md %} {{ site.baseurl }}{% link news\/index.html %} {{ site.baseurl }}{% link \/assets\/files\/doc.pdf %} You can also use the link tag to create a link in Markdown as follows: [Link to a document]({{ site.baseurl }}{% link _collection\/name-of-document.md %}) [Link to a post]({{ site.baseurl }}{% link _posts\/2016-07-26-name-of-post.md %}) [Link to a page]({{ site.baseurl }}{% link news\/index.html %}) [Link to a file]({{ site.baseurl }}{% link \/assets\/files\/doc.pdf %}) (Including {{ site.baseurl }} is optional \u2014 it depends on whether you want to preface the page URL with the baseurl value.) The path to the post, page, or collection is defined as the path relative to the root directory (where your config file is) to the file, not the path from your existing page to the other page. For example, suppose you\u2019re creating a link in page_a.md (stored in pages\/folder1\/folder2) to page_b.md (stored in pages\/folder1). Your path in the link would not be ..\/page_b.html. Instead, it would be \/pages\/folder1\/page_b.md. If you\u2019re unsure of the path, add {{ page.path }} to the page and it will display the path. One major benefit of using the link tag is link validation. If the link doesn\u2019t exist, Jekyll won\u2019t build your site. This is a good thing, as it will alert you to a broken link so you can fix it (rather than allowing you to build and deploy a site with broken links). Note you cannot add filters to link tags. For example, you cannot append a string using Liquid filters, such as {% link mypage.html | append: \"#section1\" %} . To link to sections on a page, you will need to use regular HTML or Markdown linking techniques. Linking to posts If you want to include a link to a post on your site, the post_url tag will generate the correct permalink URL for the post you specify. {{ site.baseurl }}{% post_url 2010-07-21-name-of-post %} If you organize your posts in subdirectories, you need to include subdirectory path to the post: {{ site.baseurl }}{% post_url \/subdir\/2010-07-21-name-of-post %} There is no need to include the file extension when using the post_url tag. You can also use this tag to create a link to a post in Markdown as follows: [Name of Link]({{ site.baseurl }}{% post_url 2010-07-21-name-of-post %}) Back Next Getting Started Welcome Quick-start guide Installation Jekyll on Windows Basic Usage Directory structure Configuration Your Content Front Matter Writing posts Working with drafts Creating pages Static Files Variables Collections Data Files Assets Blog migrations Customization Templates Includes Permalinks Pagination Plugins Themes Extras Deployment GitHub Pages Deployment methods Continuous Integration Miscellaneous Troubleshooting Sites using Jekyll Resources Upgrading from 0.x to 2.x Upgrading from 2.x to 3.x Meta Contributing Maintaining Jekyll Code of Conduct History The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level","tags":"","url":"http:\/\/jekyllrb.com\/docs\/templates\/"},{"title":"Natan Felles","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getScript() Categories: Ajax > Shorthand Methods jQuery.getScript( url [, success ] )Returns: jqXHR Description: Load a JavaScript file from the server using a GET HTTP request, then execute it. version added: 1.0jQuery.getScript( url [, success ] ) url Type: String A string containing the URL to which the request is sent. success Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 $.ajax({ url: url, dataType: \"script\", success: success}); The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page. Success Callback The callback is fired once the script has been loaded but not necessarily executed. Scripts are included and run by referencing the file name: 1 2 3 4 5 6 $.getScript( \"ajax\/test.js\", function( data, textStatus, jqxhr ) { console.log( data ); \/\/ Data returned console.log( textStatus ); \/\/ Success console.log( jqxhr.status ); \/\/ 200 console.log( \"Load was performed.\" );}); Handling Errors As of jQuery 1.5, you may use .fail() to account for errors: 1 2 3 4 5 6 7 $.getScript( \"ajax\/test.js\" ) .done(function( script, textStatus ) { console.log( textStatus ); }) .fail(function( jqxhr, settings, exception ) { $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );}); Prior to jQuery 1.5, the global .ajaxError() callback event had to be used in order to handle $.getScript() errors: 1 2 3 4 5 $( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) { if ( settings.dataType == \"script\" ) { $( this ).text( \"Triggered ajaxError handler.\" ); }}); Caching Responses By default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using $.ajaxSetup(): 1 2 3 $.ajaxSetup({ cache: true}); Alternatively, you could define a new method that uses the more flexible $.ajax() method. Examples: Define a $.cachedScript() method that allows fetching a cached script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 jQuery.cachedScript = function( url, options ) { \/\/ Allow user to set any option except for dataType, cache, and url options = $.extend( options || {}, { dataType: \"script\", cache: true, url: url }); \/\/ Use $.ajax() since it is more flexible than $.getScript \/\/ Return the jqXHR object so we can chain callbacks return jQuery.ajax( options );}; \/\/ Usage$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) { console.log( textStatus );}); Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 jQuery.getScript demo .block { background-color: blue; width: 150px; height: 70px; margin: 10px; } &raquo; Run var url = \"https:\/\/code.jquery.com\/color\/jquery.color.js\";$.getScript( url, function() { $( \"#go\" ).click(function() { $( \".block\" ) .animate({ backgroundColor: \"rgb(255, 180, 180)\" }, 1000 ) .delay( 500 ) .animate({ backgroundColor: \"olive\" }, 1000 ) .delay( 500\u00a0) .animate({ backgroundColor: \"#00f\" }, 1000 ); });}); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); Toggle navigation CodeIgniter Download Documentation Community Contribute CodeIgniter Rocks CodeIgniter is a powerful PHP framework with a very small footprint, built for developers who need a simple and elegant toolkit to create full-featured web applications. Star 14,705 Fork 6,953 @CodeIgniter Download The latest is Version 3.1.5 Read the Manual Clear documentation View the Forums Get Support & Discuss Things On GitHub Fix Bugs or Add Features Recent News 2017.07.11 Project Update - 2017.07.10 2017.06.19 CodeIgniter 3.1.5 Released 2017.03.20 CodeIgniter 3.1.4 released 2017.03.09 BCIT newsletter story about CodeIgniter 2017.01.20 Planned Server Downtime Jan 21, 2017 Active Forum Threads 2017.07.11 form_input don't output html since ci3 upgrade 2017.07.11 Community Auth : Login Error 2017.07.11 Get data from cookie on subdomain with Codeigniter 2017.07.11 local to gmt function doesn't work 2017.07.11 REST API request does not reply until shell script is done Why CodeIgniter? Framework with a small footprint CodeIgniter 3 has a 2MB download, including the user guide. Simple solutions over complexity CodeIgniter encourages MVC, but does not force it on you. Clear documentation The CodeIgniter User Guide comes with the download. It contains an introduction, tutorial, a number of \"how to\" guides, and then reference documentation for the components that make up the framework. Exceptional performance CodeIgniter consistently outperforms most of its competitors. Strong Security We take security seriously, with built-in protection against CSRF and XSS attacks. Nearly zero configuration Much of the CodeIgniter configuration is done by convention, for instance putting models in a \"models\" folder. There are still a number of configuration options available, through scripts in the \"config\" folder. Policies The Fine Print About CodeIgniter was created by EllisLab and is now a project of the British Columbia Institute of Technology !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = \/^http:\/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + ':\/\/platform.twitter.com\/widgets.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'twitter-wjs');\/* -1&&m>28){j=28+s;s='';if(j *\/ Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 CodeIgniter4 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 \u00a0 CodeIgniter4 Docs \u00bb CodeIgniter4 User Guide CodeIgniter4 User Guide\u00b6 License Agreement Change Log Welcome Installation Tutorial CodeIgniter4 Overview General Topics Library Reference Database Reference Helper Reference Contributing to CodeIgniter Welcome\u00b6 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance Installation\u00b6 InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server Tutorial\u00b6 TutorialStatic pages News section Create news items Conclusion CodeIgniter4 Overview\u00b6 CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General Topics\u00b6 General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library Reference\u00b6 Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database Reference\u00b6 Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events Helper Reference\u00b6 HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniter\u00b6 Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 Next \u00a9 Copyright 2014 - 2017, British Columbia Institute of Technology. Last updated on Jul 05, 2017. Built with Sphinx using a theme provided by Read the Docs. var DOCUMENTATION_OPTIONS = { URL_ROOT:'.\/', VERSION:'4.0.0-dev', COLLAPSE_INDEX:false, FILE_SUFFIX:'.html', HAS_SOURCE: false }; jQuery(function () { SphinxRtdTheme.StickyNav.enable(); }); Skip Quicknav About Debian Getting Debian Support Developers' Corner \u00a0 Download Debian 9.0(64-bit PC Network installer) Debian Debian is a free operating system (OS) for your computer. An operating system is the set of basic programs and utilities that make your computer run. Debian provides more than a pure OS: it comes with over 51000 packages, precompiled software bundled up in a nice format for easy installation on your machine. Read more... About Social Contract Code of Conduct Free Software Partners Donations Contact Us Help Debian Getting Debian Network install CD\/USB ISO images CD vendors Pre-installed Pure Blends Debian Packages Developers' Corner News Project News Events Documentation Release Info Installation manual Debian Books Debian Wiki Support Debian International Security Information Bug reports Mailing Lists Mailing List Archives Ports\/Architectures Miscellaneous Site map Search The Debian Blog The latest stable release of Debian is 9.0. The last update to this release was made on June 17th, 2017. Read more about available versions of Debian. Getting Started If you'd like to start using Debian, you can easily obtain a copy, and then follow the installation instructions to install it. If you're upgrading to the latest stable release from a previous version, please read the release notes before proceeding. To get help in using or setting up Debian, see our documentation and support pages. Users that speak languages other than English should check the international section. People who use systems other than Intel x86 should check the ports section. RSS News [18 Jun 2017] Debian Edu \/ Skolelinux Stretch \u2014 a complete Linux solution for your school[17 Jun 2017] Debian 9 Stretch released[06 May 2017] Updated Debian 8: 8.8 released[25 Apr 2017] Shutting down public FTP services[17 Apr 2017] Statement concerning the arrest of Dmitry Bogatov[14 Jan 2017] Updated Debian 8: 8.7 released For older news items see the News Page. If you would like to receive mail whenever new Debian news comes out, subscribe to the debian-announce mailing list. RSS Security Advisories [09 Jul 2017] DSA-3905 xorg-server - security update [08 Jul 2017] DSA-3904 bind9 - security update [05 Jul 2017] DSA-3903 tiff - security update [05 Jul 2017] DSA-3902 jabberd2 - security update [02 Jul 2017] DSA-3901 libgcrypt20 - security update [27 Jun 2017] DSA-3900 openvpn - security update [27 Jun 2017] DSA-3899 vlc - security update [25 Jun 2017] DSA-3898 expat - security update [24 Jun 2017] DSA-3897 drupal7 - security update [22 Jun 2017] DSA-3896 apache2 - security update [22 Jun 2017] DSA-3895 flatpak - security update [22 Jun 2017] DSA-3894 graphite2 - security update [22 Jun 2017] DSA-3893 jython - security update [22 Jun 2017] DSA-3892 tomcat7 - security update [22 Jun 2017] DSA-3891 tomcat8 - security update For older security advisories see the Security Page. If you would like to receive security advisories as soon as they're announced, subscribe to the debian-security-announce mailing list. This page is also available in the following languages: \u0639\u0631\u0628\u064a\u0629\u00a0(Arabiya) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u00a0(B\u0259lgarski) catal\u00e0 \u010desky dansk Deutsch \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\u00a0(Ellinika) espa\u00f1ol Esperanto \u0641\u0627\u0631\u0633\u06cc\u00a0(Farsi) fran\u00e7ais Galego \ud55c\uad6d\uc5b4\u00a0(Hangul) \u0540\u0561\u0575\u0565\u0580\u0565\u0576\u00a0(hayeren) hrvatski Indonesia Italiano \u05e2\u05d1\u05e8\u05d9\u05ea\u00a0(ivrit) Lietuvi\u0173 magyar Nederlands \u65e5\u672c\u8a9e\u00a0(Nihongo) norsk\u00a0(bokm\u00e5l) polski Portugu\u00eas rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439\u00a0(Russkij) slovensky suomi svenska \u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u00a0(Tamil) Ti\u1ebfng Vi\u1ec7t T\u00fcrk\u00e7e \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u00a0(ukrajins'ka) \u4e2d\u6587(\u7b80) \u4e2d\u6587(HK) \u4e2d\u6587(\u7e41) How to set the default document language To report a problem with the web site, e-mail our publicly archived mailing list debian-www@lists.debian.org. For other contact information, see the Debian contact page. Web site source code is available. Last Modified: Thu, Jun 8 15:25:09 UTC 2017 Copyright \u00a9 1997-2017 SPI and others; See license terms Debian is a registered trademark of Software in the Public Interest, Inc. Dev Home minFraud GeoIP FAQ Main Site Site Map English \u7b80\u4f53\u4e2d\u6587 (Chinese (Simplified)) Search\r Search\r Table of ContentsBinary DatabasesMaxMind Supported APIsThird-Party APIsUpdating Downloadable DatabasesCSV DatabasesDownload LimitsLinksSystem Status \/* Skip to content Features Business Explore Marketplace Pricing \/dashboard Sign in or Sign up Built for developers GitHub is a development platform inspired by the way you work. From open source to business, you can host and review code, manage projects, and build software alongside millions of other developers. Username Email Password Use at least one letter, one numeral, and seven characters. Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. Sign up for GitHub teams GitHub for teams A better way to work together GitHub brings teams together to work through problems, move ideas forward, and learn from each other along the way. Sign up your team Write better code Collaboration makes perfect. The conversations and code reviews that happen in Pull Requests help your team share the weight of your work and improve the software you build. Learn about code review on GitHub Manage your chaos Take a deep breath. On GitHub, project management happens in Issues and Projects, right alongside your code. All you have to do is mention a teammate to get them involved. Learn about project management on GitHub security-admin Security and administration Boxes? Check. We worried about your administrative and security needs so you don\u2019t have to. From flexible hosting to authentication options, GitHub can help you meet your team\u2019s requirements. Learn about GitHub for Business Code security Prevent problems before they happen. Protected branches, signed commits, and required status checks protect your work and help you maintain a high standard for your code. Access controlled Encourage teams to work together while limiting access to those who need it with granular permissions and authentication through SAML\/SSO and LDAP. Hosted where you need it Securely and reliably host your work on GitHub.com. Or, deploy GitHub Enterprise on your own servers or in a private cloud using Amazon Web Services, Azure or Google Cloud Platform. integrations Integrations Build on GitHub Customize your process with GitHub apps and an intuitive API. Integrate the tools you already use or discover new favorites to create a happier, more efficient way of working. Learn about integrations Sometimes, there\u2019s more than one tool for the job. Why not try something new? Browse GitHub Marketplace open-source Community Welcome home, developers GitHub is home to the world\u2019s largest community of developers and their\u00a0projects... Ariya Hidayat PhantomJS maintainer Russell Keith-Magee PyBee maintainer MailChimp Marketing customer Kris Nova Kubernetes\/kops maintainer Evan You Vue maintainer Mapbox Software customer Jess Frazelle Kubernetes, previously Docker maintainer ...whether you\u2019re making your first commit or sending a Rover to Mars, there\u2019s room for you here, too. 62M repositories worldwide GitHub\u2019s users create and maintain influential technologies alongside the world's largest open source\u00a0community. 22M developers worldwide Developers use GitHub for personal projects, from experimenting with new programming languages to hosting their life\u2019s work. 117K businesses worldwide Businesses of all sizes use GitHub to support their development process and to securely build software. More than a million teams use GitHub Get started for free \u2014 join the millions of developers already using GitHub to share their code, work together, and build amazing things. Username Email Password Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. \u00a9 2017 Features Code review Project management Community Documentation Code hosting Platform Atom Electron GitHub Desktop Developers Community Personal Open source For Business For Education Sponsorships Company About Blog Customers Careers Press Shop Resources Contact GitHub Help Status Terms Privacy Security Training You can't perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Transform your plain text into static\u00a0websites and\u00a0blogs. Simple No more databases, comment moderation, or pesky updates to install\u2014just your content. How Jekyll works \u2192 Static Markdown (or Textile), Liquid, HTML & CSS go in. Static sites come out ready for deployment. Jekyll template guide \u2192 Blog-aware Permalinks, categories, pages, posts, and custom layouts are all first-class citizens here. Migrate your blog \u2192 Get up and running in\u00a0seconds. Quick-start Instructions ~ $ gem install jekyll bundler ~ $ jekyll new my-awesome-site ~ $ cd my-awesome-site ~\/my-awesome-site $ bundle exec jekyll serve # => Now browse to http:\/\/localhost:4000 Free hosting with GitHub Pages Sick of dealing with hosting companies? GitHub Pages are powered by Jekyll, so you can easily deploy your site using GitHub for free\u2014custom domain name and\u00a0all. Learn more about GitHub Pages \u2192 The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Navigate the docs\u2026WelcomeQuick-start guideInstallationJekyll on WindowsBasic UsageDirectory structureConfigurationFront MatterWriting postsWorking with draftsCreating pagesStatic FilesVariablesCollectionsData FilesAssetsBlog migrationsTemplatesIncludesPermalinksPaginationPluginsThemesExtrasGitHub PagesDeployment methodsContinuous IntegrationTroubleshootingSites using JekyllResourcesUpgrading from 0.x to 2.xUpgrading from 2.x to 3.xContributingMaintaining JekyllCode of ConductHistory \u00a0Improve this page Templates Jekyll uses the Liquid templating language to process templates. All of the standard Liquid tags and filters are supported. Jekyll even adds a few handy filters and tags of its own to make common tasks easier. Filters Description Filter and Output Relative URL Prepend the baseurl value to the input. Useful if your site is hosted at a subpath rather than the root of the domain. {{ \"\/assets\/style.css\" | relative_url }} \/my-baseurl\/assets\/style.css Absolute URL Prepend the url and baseurl value to the input. {{ \"\/assets\/style.css\" | absolute_url }} http:\/\/example.com\/my-baseurl\/assets\/style.css Date to XML Schema Convert a Date into XML Schema (ISO 8601) format. {{ site.time | date_to_xmlschema }} 2008-11-07T13:07:54-08:00 Date to RFC-822 Format Convert a Date into the RFC-822 format used for RSS feeds. {{ site.time | date_to_rfc822 }} Mon, 07 Nov 2008 13:07:54 -0800 Date to String Convert a date to short format. {{ site.time | date_to_string }} 07 Nov 2008 Date to Long String Format a date to long format. {{ site.time | date_to_long_string }} 07 November 2008 Where Select all the objects in an array where the key has the given value. {{ site.members | where:\"graduation_year\",\"2014\" }} Where Expression Select all the objects in an array where the expression is true. Jekyll v3.2.0 & later. {{ site.members | where_exp:\"item\", \"item.graduation_year == 2014\" }} {{ site.members | where_exp:\"item\", \"item.graduation_year < 2014\" }} {{ site.members | where_exp:\"item\", \"item.projects contains 'foo'\" }} Group By Group an array's items by a given property. {{ site.members | group_by:\"graduation_year\" }} [{\"name\"=>\"2013\", \"items\"=>[...]}, {\"name\"=>\"2014\", \"items\"=>[...]}] Group By Expression Group an array's items using a Liquid expression. {{ site.members | group_by_exp:\"item\", \"item.graduation_year | truncate: 3, \\\"\\\"\" }} [{\"name\"=>\"201...\", \"items\"=>[...]}, {\"name\"=>\"200...\", \"items\"=>[...]}] XML Escape Escape some text for use in XML. {{ page.content | xml_escape }} CGI Escape CGI escape a string for use in a URL. Replaces any special characters with appropriate %XX replacements. CGI escape normally replaces a space with a plus + sign. {{ \"foo, bar; baz?\" | cgi_escape }} foo%2C+bar%3B+baz%3F URI Escape Percent encodes any special characters in a URI. URI escape normally replaces a space with %20. Reserved characters will not be escaped. {{ \"http:\/\/foo.com\/?q=foo, \\bar?\" | uri_escape }} http:\/\/foo.com\/?q=foo,%20%5Cbar? Number of Words Count the number of words in some text. {{ page.content | number_of_words }} 1337 Array to Sentence Convert an array into a sentence. Useful for listing tags. Optional argument for connector. {{ page.tags | array_to_sentence_string }} foo, bar, and baz {{ page.tags | array_to_sentence_string: 'or' }} foo, bar, or baz Markdownify Convert a Markdown-formatted string into HTML. {{ page.excerpt | markdownify }} Smartify Convert \"quotes\" into \u201csmart quotes.\u201d {{ page.title | smartify }} Converting Sass\/SCSS Convert a Sass- or SCSS-formatted string into CSS. {{ some_scss | scssify }} {{ some_sass | sassify }} Slugify Convert a string into a lowercase URL \"slug\". See below for options. {{ \"The _config.yml file\" | slugify }} the-config-yml-file {{ \"The _config.yml file\" | slugify: 'pretty' }} the-_config.yml-file Data To JSON Convert Hash or Array to JSON. {{ site.data.projects | jsonify }} Normalize Whitespace Replace any occurrence of whitespace with a single space. {{ \"a \\n b\" | normalize_whitespace }} Sort Sort an array. Optional arguments for hashes: 1.\u00a0property name 2.\u00a0nils order (first or last). {{ page.tags | sort }} {{ site.posts | sort: 'author' }} {{ site.pages | sort: 'title', 'last' }} Sample Pick a random value from an array. Optional: pick multiple values. {{ site.pages | sample }} {{ site.pages | sample:2 }} To Integer Convert a string or boolean to integer. {{ some_var | to_integer }} Array Filters Push, pop, shift, and unshift elements from an Array. These are NON-DESTRUCTIVE, i.e. they do not mutate the array, but rather make a copy and mutate that. {{ page.tags | push: 'Spokane' }} ['Seattle', 'Tacoma', 'Spokane'] {{ page.tags | pop }} ['Seattle'] {{ page.tags | shift }} ['Tacoma'] {{ page.tags | unshift: \"Olympia\" }} ['Olympia', 'Seattle', 'Tacoma'] Inspect Convert an object into its String representation for debugging. {{ some_var | inspect }} Options for the slugify filter The slugify filter accepts an option, each specifying what to filter. The default is default. They are as follows (with what they filter): none: no characters raw: spaces default: spaces and non-alphanumeric characters pretty: spaces and non-alphanumeric characters except for ._~!$&'()+,;=@ Tags Includes If you have small page snippets that you want to include in multiple places on your site, save the snippets as include files and insert them where required, by using the include tag: {% include footer.html %} Jekyll expects all include files to be placed in an _includes directory at the root of your source directory. In the above example, this will embed the contents of _includes\/footer.html into the calling file. For more advanced information on using includes, see Includes. Code snippet highlighting Jekyll has built in support for syntax highlighting of over 60 languages thanks to Rouge. Rouge is the default highlighter in Jekyll 3 and above. To use it in Jekyll 2, set highlighter to rouge and ensure the rouge gem is installed properly. Alternatively, you can use Pygments to highlight your code snippets. To use Pygments, you must have Python installed on your system, have the pygments.rb gem installed and set highlighter to pygments in your site\u2019s configuration file. Pygments supports over 100 languages To render a code block with syntax highlighting, surround your code as follows: {% highlight ruby %} def foo puts 'foo' end {% endhighlight %} The argument to the highlight tag (ruby in the example above) is the language identifier. To find the appropriate identifier to use for the language you want to highlight, look for the \u201cshort name\u201d on the Rouge wiki or the Pygments\u2019 Lexers page. Line numbers There is a second argument to highlight called linenos that is optional. Including the linenos argument will force the highlighted code to include line numbers. For instance, the following code block would include line numbers next to each line: {% highlight ruby linenos %} def foo puts 'foo' end {% endhighlight %} Stylesheets for syntax highlighting In order for the highlighting to show up, you\u2019ll need to include a highlighting stylesheet. For an example stylesheet you can look at syntax.css. These are the same styles as used by GitHub and you are free to use them for your own site. If you use linenos, you might want to include an additional CSS class definition for the .lineno class in syntax.css to distinguish the line numbers from the highlighted code. Gist Use the gist tag to easily embed a GitHub Gist onto your site. This works with public or secret gists: {% gist parkr\/931c1c8d465a04042403 %} You may also optionally specify the filename in the gist to display: {% gist parkr\/931c1c8d465a04042403 jekyll-private-gist.markdown %} To use the gist tag, you\u2019ll need to add the jekyll-gist gem to your project. Links Linking to pages To link to a post, a page, collection item, or file, the link tag will generate the correct permalink URL for the path you specify. For example, if you use the link tag to link to mypage.html, even if you change your permalink style to include the file extension or omit it, the URL formed by the link tag will always be valid. You must include the file\u2019s original extension when using the link tag. Here are some examples: {{ site.baseurl }}{% link _collection\/name-of-document.md %} {{ site.baseurl }}{% link _posts\/2016-07-26-name-of-post.md %} {{ site.baseurl }}{% link news\/index.html %} {{ site.baseurl }}{% link \/assets\/files\/doc.pdf %} You can also use the link tag to create a link in Markdown as follows: [Link to a document]({{ site.baseurl }}{% link _collection\/name-of-document.md %}) [Link to a post]({{ site.baseurl }}{% link _posts\/2016-07-26-name-of-post.md %}) [Link to a page]({{ site.baseurl }}{% link news\/index.html %}) [Link to a file]({{ site.baseurl }}{% link \/assets\/files\/doc.pdf %}) (Including {{ site.baseurl }} is optional \u2014 it depends on whether you want to preface the page URL with the baseurl value.) The path to the post, page, or collection is defined as the path relative to the root directory (where your config file is) to the file, not the path from your existing page to the other page. For example, suppose you\u2019re creating a link in page_a.md (stored in pages\/folder1\/folder2) to page_b.md (stored in pages\/folder1). Your path in the link would not be ..\/page_b.html. Instead, it would be \/pages\/folder1\/page_b.md. If you\u2019re unsure of the path, add {{ page.path }} to the page and it will display the path. One major benefit of using the link tag is link validation. If the link doesn\u2019t exist, Jekyll won\u2019t build your site. This is a good thing, as it will alert you to a broken link so you can fix it (rather than allowing you to build and deploy a site with broken links). Note you cannot add filters to link tags. For example, you cannot append a string using Liquid filters, such as {% link mypage.html | append: \"#section1\" %} . To link to sections on a page, you will need to use regular HTML or Markdown linking techniques. Linking to posts If you want to include a link to a post on your site, the post_url tag will generate the correct permalink URL for the post you specify. {{ site.baseurl }}{% post_url 2010-07-21-name-of-post %} If you organize your posts in subdirectories, you need to include subdirectory path to the post: {{ site.baseurl }}{% post_url \/subdir\/2010-07-21-name-of-post %} There is no need to include the file extension when using the post_url tag. You can also use this tag to create a link to a post in Markdown as follows: [Name of Link]({{ site.baseurl }}{% post_url 2010-07-21-name-of-post %}) Back Next Getting Started Welcome Quick-start guide Installation Jekyll on Windows Basic Usage Directory structure Configuration Your Content Front Matter Writing posts Working with drafts Creating pages Static Files Variables Collections Data Files Assets Blog migrations Customization Templates Includes Permalinks Pagination Plugins Themes Extras Deployment GitHub Pages Deployment methods Continuous Integration Miscellaneous Troubleshooting Sites using Jekyll Resources Upgrading from 0.x to 2.x Upgrading from 2.x to 3.x Meta Contributing Maintaining Jekyll Code of Conduct History The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level Natan Felles Creative Webmaster \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview');","tags":"natanfelles webmaster tutoriais desenvolvedor web linux programador php full stack developer administrador de sistemas Natan Felles brasil","url":"http:\/\/natanfelles.github.io\/"},{"title":"Apt-Cacher-NG: Proxy de Cache de Pacotes","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getScript() Categories: Ajax > Shorthand Methods jQuery.getScript( url [, success ] )Returns: jqXHR Description: Load a JavaScript file from the server using a GET HTTP request, then execute it. version added: 1.0jQuery.getScript( url [, success ] ) url Type: String A string containing the URL to which the request is sent. success Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 $.ajax({ url: url, dataType: \"script\", success: success}); The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page. Success Callback The callback is fired once the script has been loaded but not necessarily executed. Scripts are included and run by referencing the file name: 1 2 3 4 5 6 $.getScript( \"ajax\/test.js\", function( data, textStatus, jqxhr ) { console.log( data ); \/\/ Data returned console.log( textStatus ); \/\/ Success console.log( jqxhr.status ); \/\/ 200 console.log( \"Load was performed.\" );}); Handling Errors As of jQuery 1.5, you may use .fail() to account for errors: 1 2 3 4 5 6 7 $.getScript( \"ajax\/test.js\" ) .done(function( script, textStatus ) { console.log( textStatus ); }) .fail(function( jqxhr, settings, exception ) { $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );}); Prior to jQuery 1.5, the global .ajaxError() callback event had to be used in order to handle $.getScript() errors: 1 2 3 4 5 $( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) { if ( settings.dataType == \"script\" ) { $( this ).text( \"Triggered ajaxError handler.\" ); }}); Caching Responses By default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using $.ajaxSetup(): 1 2 3 $.ajaxSetup({ cache: true}); Alternatively, you could define a new method that uses the more flexible $.ajax() method. Examples: Define a $.cachedScript() method that allows fetching a cached script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 jQuery.cachedScript = function( url, options ) { \/\/ Allow user to set any option except for dataType, cache, and url options = $.extend( options || {}, { dataType: \"script\", cache: true, url: url }); \/\/ Use $.ajax() since it is more flexible than $.getScript \/\/ Return the jqXHR object so we can chain callbacks return jQuery.ajax( options );}; \/\/ Usage$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) { console.log( textStatus );}); Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 jQuery.getScript demo .block { background-color: blue; width: 150px; height: 70px; margin: 10px; } &raquo; Run var url = \"https:\/\/code.jquery.com\/color\/jquery.color.js\";$.getScript( url, function() { $( \"#go\" ).click(function() { $( \".block\" ) .animate({ backgroundColor: \"rgb(255, 180, 180)\" }, 1000 ) .delay( 500 ) .animate({ backgroundColor: \"olive\" }, 1000 ) .delay( 500\u00a0) .animate({ backgroundColor: \"#00f\" }, 1000 ); });}); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); Toggle navigation CodeIgniter Download Documentation Community Contribute CodeIgniter Rocks CodeIgniter is a powerful PHP framework with a very small footprint, built for developers who need a simple and elegant toolkit to create full-featured web applications. Star 14,705 Fork 6,953 @CodeIgniter Download The latest is Version 3.1.5 Read the Manual Clear documentation View the Forums Get Support & Discuss Things On GitHub Fix Bugs or Add Features Recent News 2017.07.11 Project Update - 2017.07.10 2017.06.19 CodeIgniter 3.1.5 Released 2017.03.20 CodeIgniter 3.1.4 released 2017.03.09 BCIT newsletter story about CodeIgniter 2017.01.20 Planned Server Downtime Jan 21, 2017 Active Forum Threads 2017.07.11 form_input don't output html since ci3 upgrade 2017.07.11 Community Auth : Login Error 2017.07.11 Get data from cookie on subdomain with Codeigniter 2017.07.11 local to gmt function doesn't work 2017.07.11 REST API request does not reply until shell script is done Why CodeIgniter? Framework with a small footprint CodeIgniter 3 has a 2MB download, including the user guide. Simple solutions over complexity CodeIgniter encourages MVC, but does not force it on you. Clear documentation The CodeIgniter User Guide comes with the download. It contains an introduction, tutorial, a number of \"how to\" guides, and then reference documentation for the components that make up the framework. Exceptional performance CodeIgniter consistently outperforms most of its competitors. Strong Security We take security seriously, with built-in protection against CSRF and XSS attacks. Nearly zero configuration Much of the CodeIgniter configuration is done by convention, for instance putting models in a \"models\" folder. There are still a number of configuration options available, through scripts in the \"config\" folder. Policies The Fine Print About CodeIgniter was created by EllisLab and is now a project of the British Columbia Institute of Technology !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = \/^http:\/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + ':\/\/platform.twitter.com\/widgets.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'twitter-wjs');\/* -1&&m>28){j=28+s;s='';if(j *\/ Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 CodeIgniter4 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 \u00a0 CodeIgniter4 Docs \u00bb CodeIgniter4 User Guide CodeIgniter4 User Guide\u00b6 License Agreement Change Log Welcome Installation Tutorial CodeIgniter4 Overview General Topics Library Reference Database Reference Helper Reference Contributing to CodeIgniter Welcome\u00b6 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance Installation\u00b6 InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server Tutorial\u00b6 TutorialStatic pages News section Create news items Conclusion CodeIgniter4 Overview\u00b6 CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General Topics\u00b6 General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library Reference\u00b6 Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database Reference\u00b6 Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events Helper Reference\u00b6 HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniter\u00b6 Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 Next \u00a9 Copyright 2014 - 2017, British Columbia Institute of Technology. Last updated on Jul 05, 2017. Built with Sphinx using a theme provided by Read the Docs. var DOCUMENTATION_OPTIONS = { URL_ROOT:'.\/', VERSION:'4.0.0-dev', COLLAPSE_INDEX:false, FILE_SUFFIX:'.html', HAS_SOURCE: false }; jQuery(function () { SphinxRtdTheme.StickyNav.enable(); }); Skip Quicknav About Debian Getting Debian Support Developers' Corner \u00a0 Download Debian 9.0(64-bit PC Network installer) Debian Debian is a free operating system (OS) for your computer. An operating system is the set of basic programs and utilities that make your computer run. Debian provides more than a pure OS: it comes with over 51000 packages, precompiled software bundled up in a nice format for easy installation on your machine. Read more... About Social Contract Code of Conduct Free Software Partners Donations Contact Us Help Debian Getting Debian Network install CD\/USB ISO images CD vendors Pre-installed Pure Blends Debian Packages Developers' Corner News Project News Events Documentation Release Info Installation manual Debian Books Debian Wiki Support Debian International Security Information Bug reports Mailing Lists Mailing List Archives Ports\/Architectures Miscellaneous Site map Search The Debian Blog The latest stable release of Debian is 9.0. The last update to this release was made on June 17th, 2017. Read more about available versions of Debian. Getting Started If you'd like to start using Debian, you can easily obtain a copy, and then follow the installation instructions to install it. If you're upgrading to the latest stable release from a previous version, please read the release notes before proceeding. To get help in using or setting up Debian, see our documentation and support pages. Users that speak languages other than English should check the international section. People who use systems other than Intel x86 should check the ports section. RSS News [18 Jun 2017] Debian Edu \/ Skolelinux Stretch \u2014 a complete Linux solution for your school[17 Jun 2017] Debian 9 Stretch released[06 May 2017] Updated Debian 8: 8.8 released[25 Apr 2017] Shutting down public FTP services[17 Apr 2017] Statement concerning the arrest of Dmitry Bogatov[14 Jan 2017] Updated Debian 8: 8.7 released For older news items see the News Page. If you would like to receive mail whenever new Debian news comes out, subscribe to the debian-announce mailing list. RSS Security Advisories [09 Jul 2017] DSA-3905 xorg-server - security update [08 Jul 2017] DSA-3904 bind9 - security update [05 Jul 2017] DSA-3903 tiff - security update [05 Jul 2017] DSA-3902 jabberd2 - security update [02 Jul 2017] DSA-3901 libgcrypt20 - security update [27 Jun 2017] DSA-3900 openvpn - security update [27 Jun 2017] DSA-3899 vlc - security update [25 Jun 2017] DSA-3898 expat - security update [24 Jun 2017] DSA-3897 drupal7 - security update [22 Jun 2017] DSA-3896 apache2 - security update [22 Jun 2017] DSA-3895 flatpak - security update [22 Jun 2017] DSA-3894 graphite2 - security update [22 Jun 2017] DSA-3893 jython - security update [22 Jun 2017] DSA-3892 tomcat7 - security update [22 Jun 2017] DSA-3891 tomcat8 - security update For older security advisories see the Security Page. If you would like to receive security advisories as soon as they're announced, subscribe to the debian-security-announce mailing list. This page is also available in the following languages: \u0639\u0631\u0628\u064a\u0629\u00a0(Arabiya) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u00a0(B\u0259lgarski) catal\u00e0 \u010desky dansk Deutsch \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\u00a0(Ellinika) espa\u00f1ol Esperanto \u0641\u0627\u0631\u0633\u06cc\u00a0(Farsi) fran\u00e7ais Galego \ud55c\uad6d\uc5b4\u00a0(Hangul) \u0540\u0561\u0575\u0565\u0580\u0565\u0576\u00a0(hayeren) hrvatski Indonesia Italiano \u05e2\u05d1\u05e8\u05d9\u05ea\u00a0(ivrit) Lietuvi\u0173 magyar Nederlands \u65e5\u672c\u8a9e\u00a0(Nihongo) norsk\u00a0(bokm\u00e5l) polski Portugu\u00eas rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439\u00a0(Russkij) slovensky suomi svenska \u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u00a0(Tamil) Ti\u1ebfng Vi\u1ec7t T\u00fcrk\u00e7e \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u00a0(ukrajins'ka) \u4e2d\u6587(\u7b80) \u4e2d\u6587(HK) \u4e2d\u6587(\u7e41) How to set the default document language To report a problem with the web site, e-mail our publicly archived mailing list debian-www@lists.debian.org. For other contact information, see the Debian contact page. Web site source code is available. Last Modified: Thu, Jun 8 15:25:09 UTC 2017 Copyright \u00a9 1997-2017 SPI and others; See license terms Debian is a registered trademark of Software in the Public Interest, Inc. Dev Home minFraud GeoIP FAQ Main Site Site Map English \u7b80\u4f53\u4e2d\u6587 (Chinese (Simplified)) Search\r Search\r Table of ContentsBinary DatabasesMaxMind Supported APIsThird-Party APIsUpdating Downloadable DatabasesCSV DatabasesDownload LimitsLinksSystem Status \/* Skip to content Features Business Explore Marketplace Pricing \/dashboard Sign in or Sign up Built for developers GitHub is a development platform inspired by the way you work. From open source to business, you can host and review code, manage projects, and build software alongside millions of other developers. Username Email Password Use at least one letter, one numeral, and seven characters. Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. Sign up for GitHub teams GitHub for teams A better way to work together GitHub brings teams together to work through problems, move ideas forward, and learn from each other along the way. Sign up your team Write better code Collaboration makes perfect. The conversations and code reviews that happen in Pull Requests help your team share the weight of your work and improve the software you build. Learn about code review on GitHub Manage your chaos Take a deep breath. On GitHub, project management happens in Issues and Projects, right alongside your code. All you have to do is mention a teammate to get them involved. Learn about project management on GitHub security-admin Security and administration Boxes? Check. We worried about your administrative and security needs so you don\u2019t have to. From flexible hosting to authentication options, GitHub can help you meet your team\u2019s requirements. Learn about GitHub for Business Code security Prevent problems before they happen. Protected branches, signed commits, and required status checks protect your work and help you maintain a high standard for your code. Access controlled Encourage teams to work together while limiting access to those who need it with granular permissions and authentication through SAML\/SSO and LDAP. Hosted where you need it Securely and reliably host your work on GitHub.com. Or, deploy GitHub Enterprise on your own servers or in a private cloud using Amazon Web Services, Azure or Google Cloud Platform. integrations Integrations Build on GitHub Customize your process with GitHub apps and an intuitive API. Integrate the tools you already use or discover new favorites to create a happier, more efficient way of working. Learn about integrations Sometimes, there\u2019s more than one tool for the job. Why not try something new? Browse GitHub Marketplace open-source Community Welcome home, developers GitHub is home to the world\u2019s largest community of developers and their\u00a0projects... Ariya Hidayat PhantomJS maintainer Russell Keith-Magee PyBee maintainer MailChimp Marketing customer Kris Nova Kubernetes\/kops maintainer Evan You Vue maintainer Mapbox Software customer Jess Frazelle Kubernetes, previously Docker maintainer ...whether you\u2019re making your first commit or sending a Rover to Mars, there\u2019s room for you here, too. 62M repositories worldwide GitHub\u2019s users create and maintain influential technologies alongside the world's largest open source\u00a0community. 22M developers worldwide Developers use GitHub for personal projects, from experimenting with new programming languages to hosting their life\u2019s work. 117K businesses worldwide Businesses of all sizes use GitHub to support their development process and to securely build software. More than a million teams use GitHub Get started for free \u2014 join the millions of developers already using GitHub to share their code, work together, and build amazing things. Username Email Password Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. \u00a9 2017 Features Code review Project management Community Documentation Code hosting Platform Atom Electron GitHub Desktop Developers Community Personal Open source For Business For Education Sponsorships Company About Blog Customers Careers Press Shop Resources Contact GitHub Help Status Terms Privacy Security Training You can't perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Transform your plain text into static\u00a0websites and\u00a0blogs. Simple No more databases, comment moderation, or pesky updates to install\u2014just your content. How Jekyll works \u2192 Static Markdown (or Textile), Liquid, HTML & CSS go in. Static sites come out ready for deployment. Jekyll template guide \u2192 Blog-aware Permalinks, categories, pages, posts, and custom layouts are all first-class citizens here. Migrate your blog \u2192 Get up and running in\u00a0seconds. Quick-start Instructions ~ $ gem install jekyll bundler ~ $ jekyll new my-awesome-site ~ $ cd my-awesome-site ~\/my-awesome-site $ bundle exec jekyll serve # => Now browse to http:\/\/localhost:4000 Free hosting with GitHub Pages Sick of dealing with hosting companies? GitHub Pages are powered by Jekyll, so you can easily deploy your site using GitHub for free\u2014custom domain name and\u00a0all. Learn more about GitHub Pages \u2192 The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Navigate the docs\u2026WelcomeQuick-start guideInstallationJekyll on WindowsBasic UsageDirectory structureConfigurationFront MatterWriting postsWorking with draftsCreating pagesStatic FilesVariablesCollectionsData FilesAssetsBlog migrationsTemplatesIncludesPermalinksPaginationPluginsThemesExtrasGitHub PagesDeployment methodsContinuous IntegrationTroubleshootingSites using JekyllResourcesUpgrading from 0.x to 2.xUpgrading from 2.x to 3.xContributingMaintaining JekyllCode of ConductHistory \u00a0Improve this page Templates Jekyll uses the Liquid templating language to process templates. All of the standard Liquid tags and filters are supported. Jekyll even adds a few handy filters and tags of its own to make common tasks easier. Filters Description Filter and Output Relative URL Prepend the baseurl value to the input. Useful if your site is hosted at a subpath rather than the root of the domain. {{ \"\/assets\/style.css\" | relative_url }} \/my-baseurl\/assets\/style.css Absolute URL Prepend the url and baseurl value to the input. {{ \"\/assets\/style.css\" | absolute_url }} http:\/\/example.com\/my-baseurl\/assets\/style.css Date to XML Schema Convert a Date into XML Schema (ISO 8601) format. {{ site.time | date_to_xmlschema }} 2008-11-07T13:07:54-08:00 Date to RFC-822 Format Convert a Date into the RFC-822 format used for RSS feeds. {{ site.time | date_to_rfc822 }} Mon, 07 Nov 2008 13:07:54 -0800 Date to String Convert a date to short format. {{ site.time | date_to_string }} 07 Nov 2008 Date to Long String Format a date to long format. {{ site.time | date_to_long_string }} 07 November 2008 Where Select all the objects in an array where the key has the given value. {{ site.members | where:\"graduation_year\",\"2014\" }} Where Expression Select all the objects in an array where the expression is true. Jekyll v3.2.0 & later. {{ site.members | where_exp:\"item\", \"item.graduation_year == 2014\" }} {{ site.members | where_exp:\"item\", \"item.graduation_year < 2014\" }} {{ site.members | where_exp:\"item\", \"item.projects contains 'foo'\" }} Group By Group an array's items by a given property. {{ site.members | group_by:\"graduation_year\" }} [{\"name\"=>\"2013\", \"items\"=>[...]}, {\"name\"=>\"2014\", \"items\"=>[...]}] Group By Expression Group an array's items using a Liquid expression. {{ site.members | group_by_exp:\"item\", \"item.graduation_year | truncate: 3, \\\"\\\"\" }} [{\"name\"=>\"201...\", \"items\"=>[...]}, {\"name\"=>\"200...\", \"items\"=>[...]}] XML Escape Escape some text for use in XML. {{ page.content | xml_escape }} CGI Escape CGI escape a string for use in a URL. Replaces any special characters with appropriate %XX replacements. CGI escape normally replaces a space with a plus + sign. {{ \"foo, bar; baz?\" | cgi_escape }} foo%2C+bar%3B+baz%3F URI Escape Percent encodes any special characters in a URI. URI escape normally replaces a space with %20. Reserved characters will not be escaped. {{ \"http:\/\/foo.com\/?q=foo, \\bar?\" | uri_escape }} http:\/\/foo.com\/?q=foo,%20%5Cbar? Number of Words Count the number of words in some text. {{ page.content | number_of_words }} 1337 Array to Sentence Convert an array into a sentence. Useful for listing tags. Optional argument for connector. {{ page.tags | array_to_sentence_string }} foo, bar, and baz {{ page.tags | array_to_sentence_string: 'or' }} foo, bar, or baz Markdownify Convert a Markdown-formatted string into HTML. {{ page.excerpt | markdownify }} Smartify Convert \"quotes\" into \u201csmart quotes.\u201d {{ page.title | smartify }} Converting Sass\/SCSS Convert a Sass- or SCSS-formatted string into CSS. {{ some_scss | scssify }} {{ some_sass | sassify }} Slugify Convert a string into a lowercase URL \"slug\". See below for options. {{ \"The _config.yml file\" | slugify }} the-config-yml-file {{ \"The _config.yml file\" | slugify: 'pretty' }} the-_config.yml-file Data To JSON Convert Hash or Array to JSON. {{ site.data.projects | jsonify }} Normalize Whitespace Replace any occurrence of whitespace with a single space. {{ \"a \\n b\" | normalize_whitespace }} Sort Sort an array. Optional arguments for hashes: 1.\u00a0property name 2.\u00a0nils order (first or last). {{ page.tags | sort }} {{ site.posts | sort: 'author' }} {{ site.pages | sort: 'title', 'last' }} Sample Pick a random value from an array. Optional: pick multiple values. {{ site.pages | sample }} {{ site.pages | sample:2 }} To Integer Convert a string or boolean to integer. {{ some_var | to_integer }} Array Filters Push, pop, shift, and unshift elements from an Array. These are NON-DESTRUCTIVE, i.e. they do not mutate the array, but rather make a copy and mutate that. {{ page.tags | push: 'Spokane' }} ['Seattle', 'Tacoma', 'Spokane'] {{ page.tags | pop }} ['Seattle'] {{ page.tags | shift }} ['Tacoma'] {{ page.tags | unshift: \"Olympia\" }} ['Olympia', 'Seattle', 'Tacoma'] Inspect Convert an object into its String representation for debugging. {{ some_var | inspect }} Options for the slugify filter The slugify filter accepts an option, each specifying what to filter. The default is default. They are as follows (with what they filter): none: no characters raw: spaces default: spaces and non-alphanumeric characters pretty: spaces and non-alphanumeric characters except for ._~!$&'()+,;=@ Tags Includes If you have small page snippets that you want to include in multiple places on your site, save the snippets as include files and insert them where required, by using the include tag: {% include footer.html %} Jekyll expects all include files to be placed in an _includes directory at the root of your source directory. In the above example, this will embed the contents of _includes\/footer.html into the calling file. For more advanced information on using includes, see Includes. Code snippet highlighting Jekyll has built in support for syntax highlighting of over 60 languages thanks to Rouge. Rouge is the default highlighter in Jekyll 3 and above. To use it in Jekyll 2, set highlighter to rouge and ensure the rouge gem is installed properly. Alternatively, you can use Pygments to highlight your code snippets. To use Pygments, you must have Python installed on your system, have the pygments.rb gem installed and set highlighter to pygments in your site\u2019s configuration file. Pygments supports over 100 languages To render a code block with syntax highlighting, surround your code as follows: {% highlight ruby %} def foo puts 'foo' end {% endhighlight %} The argument to the highlight tag (ruby in the example above) is the language identifier. To find the appropriate identifier to use for the language you want to highlight, look for the \u201cshort name\u201d on the Rouge wiki or the Pygments\u2019 Lexers page. Line numbers There is a second argument to highlight called linenos that is optional. Including the linenos argument will force the highlighted code to include line numbers. For instance, the following code block would include line numbers next to each line: {% highlight ruby linenos %} def foo puts 'foo' end {% endhighlight %} Stylesheets for syntax highlighting In order for the highlighting to show up, you\u2019ll need to include a highlighting stylesheet. For an example stylesheet you can look at syntax.css. These are the same styles as used by GitHub and you are free to use them for your own site. If you use linenos, you might want to include an additional CSS class definition for the .lineno class in syntax.css to distinguish the line numbers from the highlighted code. Gist Use the gist tag to easily embed a GitHub Gist onto your site. This works with public or secret gists: {% gist parkr\/931c1c8d465a04042403 %} You may also optionally specify the filename in the gist to display: {% gist parkr\/931c1c8d465a04042403 jekyll-private-gist.markdown %} To use the gist tag, you\u2019ll need to add the jekyll-gist gem to your project. Links Linking to pages To link to a post, a page, collection item, or file, the link tag will generate the correct permalink URL for the path you specify. For example, if you use the link tag to link to mypage.html, even if you change your permalink style to include the file extension or omit it, the URL formed by the link tag will always be valid. You must include the file\u2019s original extension when using the link tag. Here are some examples: {{ site.baseurl }}{% link _collection\/name-of-document.md %} {{ site.baseurl }}{% link _posts\/2016-07-26-name-of-post.md %} {{ site.baseurl }}{% link news\/index.html %} {{ site.baseurl }}{% link \/assets\/files\/doc.pdf %} You can also use the link tag to create a link in Markdown as follows: [Link to a document]({{ site.baseurl }}{% link _collection\/name-of-document.md %}) [Link to a post]({{ site.baseurl }}{% link _posts\/2016-07-26-name-of-post.md %}) [Link to a page]({{ site.baseurl }}{% link news\/index.html %}) [Link to a file]({{ site.baseurl }}{% link \/assets\/files\/doc.pdf %}) (Including {{ site.baseurl }} is optional \u2014 it depends on whether you want to preface the page URL with the baseurl value.) The path to the post, page, or collection is defined as the path relative to the root directory (where your config file is) to the file, not the path from your existing page to the other page. For example, suppose you\u2019re creating a link in page_a.md (stored in pages\/folder1\/folder2) to page_b.md (stored in pages\/folder1). Your path in the link would not be ..\/page_b.html. Instead, it would be \/pages\/folder1\/page_b.md. If you\u2019re unsure of the path, add {{ page.path }} to the page and it will display the path. One major benefit of using the link tag is link validation. If the link doesn\u2019t exist, Jekyll won\u2019t build your site. This is a good thing, as it will alert you to a broken link so you can fix it (rather than allowing you to build and deploy a site with broken links). Note you cannot add filters to link tags. For example, you cannot append a string using Liquid filters, such as {% link mypage.html | append: \"#section1\" %} . To link to sections on a page, you will need to use regular HTML or Markdown linking techniques. Linking to posts If you want to include a link to a post on your site, the post_url tag will generate the correct permalink URL for the post you specify. {{ site.baseurl }}{% post_url 2010-07-21-name-of-post %} If you organize your posts in subdirectories, you need to include subdirectory path to the post: {{ site.baseurl }}{% post_url \/subdir\/2010-07-21-name-of-post %} There is no need to include the file extension when using the post_url tag. You can also use this tag to create a link to a post in Markdown as follows: [Name of Link]({{ site.baseurl }}{% post_url 2010-07-21-name-of-post %}) Back Next Getting Started Welcome Quick-start guide Installation Jekyll on Windows Basic Usage Directory structure Configuration Your Content Front Matter Writing posts Working with drafts Creating pages Static Files Variables Collections Data Files Assets Blog migrations Customization Templates Includes Permalinks Pagination Plugins Themes Extras Deployment GitHub Pages Deployment methods Continuous Integration Miscellaneous Troubleshooting Sites using Jekyll Resources Upgrading from 0.x to 2.x Upgrading from 2.x to 3.x Meta Contributing Maintaining Jekyll Code of Conduct History The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level Natan Felles Creative Webmaster \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview'); Toggle navigation Natan Felles Blog Servi\u00c3\u00a7os Mapa do Site Natan Felles Creative Webmaster In\u00c3\u00adcio Blog Apt-Cacher-NG: Proxy de Cache de Pacotes Apt-Cacher-NG: Proxy de Cache de Pacotes Blog \u00c2\u00b7 desenvolvimento 23.09.2016 Apresenta\u00c3\u00a7\u00c3\u00a3o Apt-Cacher NG \u00c3\u00a9 um proxy de cache para pacotes de software baixados por mecanismos de distribui\u00c3\u00a7\u00c3\u00a3o em sistemas Unix\/Linux de servidores espelhos acess\u00c3\u00adveis via HTTP. Entenda melhor Sabe-se que \u00c3\u00a9 altamente recomend\u00c3\u00a1vel manter um sistema operacional sempre atualizado por devidos fatores. Em locais onde h\u00c3\u00a1 v\u00c3\u00a1rios computadores pode haver um enorme gasto do tr\u00c3\u00a1fego de banda ou congestionamento da conex\u00c3\u00a3o com a internet para manter todos atualizados. Algumas vezes, utilizando distribui\u00c3\u00a7\u00c3\u00b5es rolling release, que buscam sempre possuir as \u00c3\u00baltimas vers\u00c3\u00b5es de softwares, j\u00c3\u00a1 cheguei a precisar baixar mais de 200 MB em um \u00c3\u00banico update. Agora, imagine isso em uma empresa com 20 m\u00c3\u00a1quinas. Daria cerca de 4 GB de download para atualizar todas. A solu\u00c3\u00a7\u00c3\u00a3o mais simples \u00c3\u00a9 criar um servidor proxy de cache, ou seja, todos os pacotes baixados ficar\u00c3\u00a3o armazenados nele. E ent\u00c3\u00a3o todas as outras m\u00c3\u00a1quinas ser\u00c3\u00a3o atualizadas atrav\u00c3\u00a9s deste servidor proxy, intermedi\u00c3\u00a1rio, \u00c3\u00banico respons\u00c3\u00a1vel por baixar atualiza\u00c3\u00a7\u00c3\u00b5es externas e repass\u00c3\u00a1-las para todas as m\u00c3\u00a1quinas da rede local. Toda vez que uma m\u00c3\u00a1quina for atualizada ocorrer\u00c3\u00a1 o seguinte processo: A m\u00c3\u00a1quina conecta com o proxy e questiona se h\u00c3\u00a1 atualiza\u00c3\u00a7\u00c3\u00b5es para ela. O proxy conecta no reposit\u00c3\u00b3rio oficial e questiona por essas atualiza\u00c3\u00a7\u00c3\u00b5es, fazendo uma compara\u00c3\u00a7\u00c3\u00a3o entre as vers\u00c3\u00b5es de seus pacotes com os pacotes externos. Se houver novos pacotes, o proxy baixa os pacotes e, se houver vers\u00c3\u00a3o maior do que os da m\u00c3\u00a1quina, os retransmite para ela. Se n\u00c3\u00a3o houver novos pacotes, mas eles tiverem vers\u00c3\u00a3o maior do que os da m\u00c3\u00a1quina, o proxy apenas retransmite os pacotes para a m\u00c3\u00a1quina. Por fim, o proxy se atualizar\u00c3\u00a1 com os reposit\u00c3\u00b3rios externos e a m\u00c3\u00a1quina se atualizar\u00c3\u00a1 com o proxy. Certo. Chega de teoria e vamos ver como podemos fazer isso acontecer. Instala\u00c3\u00a7\u00c3\u00a3o do Servidor Proxy de Cache Voc\u00c3\u00aa precisar\u00c3\u00a1 de uma m\u00c3\u00a1quina para ser o servidor proxy de cache. Recomendo que utilize um sistema sem desktop, mas \u00c3\u00a9 indiferente. No servidor, vamos instalar o Apt-Cacher-NG: sudo apt install apt-cacher-ng O Apt-Cacher-NG, por padr\u00c3\u00a3o, roda na porta 3142 e \u00c3\u00a9 acess\u00c3\u00advel via web, onde possui uma p\u00c3\u00a1gina explicando como configurar outras m\u00c3\u00a1quinas para us\u00c3\u00a1-lo, manual e estat\u00c3\u00adsticas. Voc\u00c3\u00aa pode entrar diretamente pelo IP do servidor ou hostname, como no exemplo: http:\/\/192.168.1.100:3142 Configura\u00c3\u00a7\u00c3\u00a3o dos Clientes Estando com o servidor proxy de cache instalado, vamos ver como configurar as m\u00c3\u00a1quinas clientes: Em cada cliente, crie um arquivo em \/etc\/apt\/apt.conf e adicione a linha abaixo, substituindo o IP pelo do seu servidor: Acquire::http::Proxy \"http:\/\/192.168.1.100:3142\"; Feito! Salve e feche o arquivo e atualize a m\u00c3\u00a1quina cliente: sudo apt update Ao atualizar a m\u00c3\u00a1quina, automaticamente o proxy ser\u00c3\u00a1 atualizado. Fa\u00c3\u00a7a isso em todas as m\u00c3\u00a1quinas clientes e desta forma voc\u00c3\u00aa s\u00c3\u00b3 precisar\u00c3\u00a1 baixar pacotes em um \u00c3\u00banico local. Seguran\u00c3\u00a7a Caso seja necess\u00c3\u00a1rio, voc\u00c3\u00aa pode proteger o sistema web com a requisi\u00c3\u00a7\u00c3\u00a3o de usu\u00c3\u00a1rio e senha. Para isso, edite o arquivo \/etc\/apt-cacher-ng\/security.conf: #AdminAuth: mooma:moopa AdminAuth: usuario:Senh4 Depois reinicie o apt-cacher-ng: sudo systemctl restart apt-cacher-ng.service \u00c3\u0080 partir de agora, quando for navegar na porta 3142 do seu servidor proxy, lhe ser\u00c3\u00a1 solicitado os dados de acesso. Informa\u00c3\u00a7\u00c3\u00a3o Para configura\u00c3\u00a7\u00c3\u00b5es avan\u00c3\u00a7adas, leia o manual em http:\/\/192.168.1.100:3142\/acng-doc\/html\/index.html. Conclus\u00c3\u00a3o Configurar o Apt-Cacher-NG \u00c3\u00a9 simples e de extrema utilidade. Voc\u00c3\u00aa pode ter v\u00c3\u00a1rias m\u00c3\u00a1quinas na rede local, mas vai baixar pacotes externos apenas por uma, uma \u00c3\u00banica vez. cache proxy debian linux Edite essa p\u00c3\u00a1gina no GitHub Pr\u00c3\u00b3ximo Anterior var disqus_config = function () { this.page.url = 'https:\/\/natanfelles.github.io\/blog\/apt-cacher-ng'; this.page.identifier = '\/blog\/apt-cacher-ng'; }; (function() { var d = document, s = d.createElement('script'); s.src = '\/\/natanfelles.disqus.com\/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Habilite o JavaScript para ver os coment\u00c3\u00a1rios fornecidos por Disqus. \u00a9 2017 Natan Felles. Direitos reservados. Website renderizado em 28.06.2017 18:15:52 -0300 \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview');","tags":"natanfelles webmaster tutoriais desenvolvedor web linux programador php full stack developer administrador de sistemas Natan Felles brasil","url":"https:\/\/natanfelles.github.io\/blog\/apt-cacher-ng"},{"title":"Resetando a Senha do Root no MySQL","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getScript() Categories: Ajax > Shorthand Methods jQuery.getScript( url [, success ] )Returns: jqXHR Description: Load a JavaScript file from the server using a GET HTTP request, then execute it. version added: 1.0jQuery.getScript( url [, success ] ) url Type: String A string containing the URL to which the request is sent. success Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 $.ajax({ url: url, dataType: \"script\", success: success}); The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page. Success Callback The callback is fired once the script has been loaded but not necessarily executed. Scripts are included and run by referencing the file name: 1 2 3 4 5 6 $.getScript( \"ajax\/test.js\", function( data, textStatus, jqxhr ) { console.log( data ); \/\/ Data returned console.log( textStatus ); \/\/ Success console.log( jqxhr.status ); \/\/ 200 console.log( \"Load was performed.\" );}); Handling Errors As of jQuery 1.5, you may use .fail() to account for errors: 1 2 3 4 5 6 7 $.getScript( \"ajax\/test.js\" ) .done(function( script, textStatus ) { console.log( textStatus ); }) .fail(function( jqxhr, settings, exception ) { $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );}); Prior to jQuery 1.5, the global .ajaxError() callback event had to be used in order to handle $.getScript() errors: 1 2 3 4 5 $( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) { if ( settings.dataType == \"script\" ) { $( this ).text( \"Triggered ajaxError handler.\" ); }}); Caching Responses By default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using $.ajaxSetup(): 1 2 3 $.ajaxSetup({ cache: true}); Alternatively, you could define a new method that uses the more flexible $.ajax() method. Examples: Define a $.cachedScript() method that allows fetching a cached script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 jQuery.cachedScript = function( url, options ) { \/\/ Allow user to set any option except for dataType, cache, and url options = $.extend( options || {}, { dataType: \"script\", cache: true, url: url }); \/\/ Use $.ajax() since it is more flexible than $.getScript \/\/ Return the jqXHR object so we can chain callbacks return jQuery.ajax( options );}; \/\/ Usage$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) { console.log( textStatus );}); Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 jQuery.getScript demo .block { background-color: blue; width: 150px; height: 70px; margin: 10px; } &raquo; Run var url = \"https:\/\/code.jquery.com\/color\/jquery.color.js\";$.getScript( url, function() { $( \"#go\" ).click(function() { $( \".block\" ) .animate({ backgroundColor: \"rgb(255, 180, 180)\" }, 1000 ) .delay( 500 ) .animate({ backgroundColor: \"olive\" }, 1000 ) .delay( 500\u00a0) .animate({ backgroundColor: \"#00f\" }, 1000 ); });}); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); Toggle navigation CodeIgniter Download Documentation Community Contribute CodeIgniter Rocks CodeIgniter is a powerful PHP framework with a very small footprint, built for developers who need a simple and elegant toolkit to create full-featured web applications. Star 14,705 Fork 6,953 @CodeIgniter Download The latest is Version 3.1.5 Read the Manual Clear documentation View the Forums Get Support & Discuss Things On GitHub Fix Bugs or Add Features Recent News 2017.07.11 Project Update - 2017.07.10 2017.06.19 CodeIgniter 3.1.5 Released 2017.03.20 CodeIgniter 3.1.4 released 2017.03.09 BCIT newsletter story about CodeIgniter 2017.01.20 Planned Server Downtime Jan 21, 2017 Active Forum Threads 2017.07.11 form_input don't output html since ci3 upgrade 2017.07.11 Community Auth : Login Error 2017.07.11 Get data from cookie on subdomain with Codeigniter 2017.07.11 local to gmt function doesn't work 2017.07.11 REST API request does not reply until shell script is done Why CodeIgniter? Framework with a small footprint CodeIgniter 3 has a 2MB download, including the user guide. Simple solutions over complexity CodeIgniter encourages MVC, but does not force it on you. Clear documentation The CodeIgniter User Guide comes with the download. It contains an introduction, tutorial, a number of \"how to\" guides, and then reference documentation for the components that make up the framework. Exceptional performance CodeIgniter consistently outperforms most of its competitors. Strong Security We take security seriously, with built-in protection against CSRF and XSS attacks. Nearly zero configuration Much of the CodeIgniter configuration is done by convention, for instance putting models in a \"models\" folder. There are still a number of configuration options available, through scripts in the \"config\" folder. Policies The Fine Print About CodeIgniter was created by EllisLab and is now a project of the British Columbia Institute of Technology !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = \/^http:\/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + ':\/\/platform.twitter.com\/widgets.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'twitter-wjs');\/* -1&&m>28){j=28+s;s='';if(j *\/ Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 CodeIgniter4 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 \u00a0 CodeIgniter4 Docs \u00bb CodeIgniter4 User Guide CodeIgniter4 User Guide\u00b6 License Agreement Change Log Welcome Installation Tutorial CodeIgniter4 Overview General Topics Library Reference Database Reference Helper Reference Contributing to CodeIgniter Welcome\u00b6 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance Installation\u00b6 InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server Tutorial\u00b6 TutorialStatic pages News section Create news items Conclusion CodeIgniter4 Overview\u00b6 CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General Topics\u00b6 General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library Reference\u00b6 Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database Reference\u00b6 Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events Helper Reference\u00b6 HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniter\u00b6 Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 Next \u00a9 Copyright 2014 - 2017, British Columbia Institute of Technology. Last updated on Jul 05, 2017. Built with Sphinx using a theme provided by Read the Docs. var DOCUMENTATION_OPTIONS = { URL_ROOT:'.\/', VERSION:'4.0.0-dev', COLLAPSE_INDEX:false, FILE_SUFFIX:'.html', HAS_SOURCE: false }; jQuery(function () { SphinxRtdTheme.StickyNav.enable(); }); Skip Quicknav About Debian Getting Debian Support Developers' Corner \u00a0 Download Debian 9.0(64-bit PC Network installer) Debian Debian is a free operating system (OS) for your computer. An operating system is the set of basic programs and utilities that make your computer run. Debian provides more than a pure OS: it comes with over 51000 packages, precompiled software bundled up in a nice format for easy installation on your machine. Read more... About Social Contract Code of Conduct Free Software Partners Donations Contact Us Help Debian Getting Debian Network install CD\/USB ISO images CD vendors Pre-installed Pure Blends Debian Packages Developers' Corner News Project News Events Documentation Release Info Installation manual Debian Books Debian Wiki Support Debian International Security Information Bug reports Mailing Lists Mailing List Archives Ports\/Architectures Miscellaneous Site map Search The Debian Blog The latest stable release of Debian is 9.0. The last update to this release was made on June 17th, 2017. Read more about available versions of Debian. Getting Started If you'd like to start using Debian, you can easily obtain a copy, and then follow the installation instructions to install it. If you're upgrading to the latest stable release from a previous version, please read the release notes before proceeding. To get help in using or setting up Debian, see our documentation and support pages. Users that speak languages other than English should check the international section. People who use systems other than Intel x86 should check the ports section. RSS News [18 Jun 2017] Debian Edu \/ Skolelinux Stretch \u2014 a complete Linux solution for your school[17 Jun 2017] Debian 9 Stretch released[06 May 2017] Updated Debian 8: 8.8 released[25 Apr 2017] Shutting down public FTP services[17 Apr 2017] Statement concerning the arrest of Dmitry Bogatov[14 Jan 2017] Updated Debian 8: 8.7 released For older news items see the News Page. If you would like to receive mail whenever new Debian news comes out, subscribe to the debian-announce mailing list. RSS Security Advisories [09 Jul 2017] DSA-3905 xorg-server - security update [08 Jul 2017] DSA-3904 bind9 - security update [05 Jul 2017] DSA-3903 tiff - security update [05 Jul 2017] DSA-3902 jabberd2 - security update [02 Jul 2017] DSA-3901 libgcrypt20 - security update [27 Jun 2017] DSA-3900 openvpn - security update [27 Jun 2017] DSA-3899 vlc - security update [25 Jun 2017] DSA-3898 expat - security update [24 Jun 2017] DSA-3897 drupal7 - security update [22 Jun 2017] DSA-3896 apache2 - security update [22 Jun 2017] DSA-3895 flatpak - security update [22 Jun 2017] DSA-3894 graphite2 - security update [22 Jun 2017] DSA-3893 jython - security update [22 Jun 2017] DSA-3892 tomcat7 - security update [22 Jun 2017] DSA-3891 tomcat8 - security update For older security advisories see the Security Page. If you would like to receive security advisories as soon as they're announced, subscribe to the debian-security-announce mailing list. This page is also available in the following languages: \u0639\u0631\u0628\u064a\u0629\u00a0(Arabiya) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u00a0(B\u0259lgarski) catal\u00e0 \u010desky dansk Deutsch \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\u00a0(Ellinika) espa\u00f1ol Esperanto \u0641\u0627\u0631\u0633\u06cc\u00a0(Farsi) fran\u00e7ais Galego \ud55c\uad6d\uc5b4\u00a0(Hangul) \u0540\u0561\u0575\u0565\u0580\u0565\u0576\u00a0(hayeren) hrvatski Indonesia Italiano \u05e2\u05d1\u05e8\u05d9\u05ea\u00a0(ivrit) Lietuvi\u0173 magyar Nederlands \u65e5\u672c\u8a9e\u00a0(Nihongo) norsk\u00a0(bokm\u00e5l) polski Portugu\u00eas rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439\u00a0(Russkij) slovensky suomi svenska \u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u00a0(Tamil) Ti\u1ebfng Vi\u1ec7t T\u00fcrk\u00e7e \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u00a0(ukrajins'ka) \u4e2d\u6587(\u7b80) \u4e2d\u6587(HK) \u4e2d\u6587(\u7e41) How to set the default document language To report a problem with the web site, e-mail our publicly archived mailing list debian-www@lists.debian.org. For other contact information, see the Debian contact page. Web site source code is available. Last Modified: Thu, Jun 8 15:25:09 UTC 2017 Copyright \u00a9 1997-2017 SPI and others; See license terms Debian is a registered trademark of Software in the Public Interest, Inc. Dev Home minFraud GeoIP FAQ Main Site Site Map English \u7b80\u4f53\u4e2d\u6587 (Chinese (Simplified)) Search\r Search\r Table of ContentsBinary DatabasesMaxMind Supported APIsThird-Party APIsUpdating Downloadable DatabasesCSV DatabasesDownload LimitsLinksSystem Status \/* Skip to content Features Business Explore Marketplace Pricing \/dashboard Sign in or Sign up Built for developers GitHub is a development platform inspired by the way you work. From open source to business, you can host and review code, manage projects, and build software alongside millions of other developers. Username Email Password Use at least one letter, one numeral, and seven characters. Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. Sign up for GitHub teams GitHub for teams A better way to work together GitHub brings teams together to work through problems, move ideas forward, and learn from each other along the way. Sign up your team Write better code Collaboration makes perfect. The conversations and code reviews that happen in Pull Requests help your team share the weight of your work and improve the software you build. Learn about code review on GitHub Manage your chaos Take a deep breath. On GitHub, project management happens in Issues and Projects, right alongside your code. All you have to do is mention a teammate to get them involved. Learn about project management on GitHub security-admin Security and administration Boxes? Check. We worried about your administrative and security needs so you don\u2019t have to. From flexible hosting to authentication options, GitHub can help you meet your team\u2019s requirements. Learn about GitHub for Business Code security Prevent problems before they happen. Protected branches, signed commits, and required status checks protect your work and help you maintain a high standard for your code. Access controlled Encourage teams to work together while limiting access to those who need it with granular permissions and authentication through SAML\/SSO and LDAP. Hosted where you need it Securely and reliably host your work on GitHub.com. Or, deploy GitHub Enterprise on your own servers or in a private cloud using Amazon Web Services, Azure or Google Cloud Platform. integrations Integrations Build on GitHub Customize your process with GitHub apps and an intuitive API. Integrate the tools you already use or discover new favorites to create a happier, more efficient way of working. Learn about integrations Sometimes, there\u2019s more than one tool for the job. Why not try something new? Browse GitHub Marketplace open-source Community Welcome home, developers GitHub is home to the world\u2019s largest community of developers and their\u00a0projects... Ariya Hidayat PhantomJS maintainer Russell Keith-Magee PyBee maintainer MailChimp Marketing customer Kris Nova Kubernetes\/kops maintainer Evan You Vue maintainer Mapbox Software customer Jess Frazelle Kubernetes, previously Docker maintainer ...whether you\u2019re making your first commit or sending a Rover to Mars, there\u2019s room for you here, too. 62M repositories worldwide GitHub\u2019s users create and maintain influential technologies alongside the world's largest open source\u00a0community. 22M developers worldwide Developers use GitHub for personal projects, from experimenting with new programming languages to hosting their life\u2019s work. 117K businesses worldwide Businesses of all sizes use GitHub to support their development process and to securely build software. More than a million teams use GitHub Get started for free \u2014 join the millions of developers already using GitHub to share their code, work together, and build amazing things. Username Email Password Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. \u00a9 2017 Features Code review Project management Community Documentation Code hosting Platform Atom Electron GitHub Desktop Developers Community Personal Open source For Business For Education Sponsorships Company About Blog Customers Careers Press Shop Resources Contact GitHub Help Status Terms Privacy Security Training You can't perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Transform your plain text into static\u00a0websites and\u00a0blogs. Simple No more databases, comment moderation, or pesky updates to install\u2014just your content. How Jekyll works \u2192 Static Markdown (or Textile), Liquid, HTML & CSS go in. Static sites come out ready for deployment. Jekyll template guide \u2192 Blog-aware Permalinks, categories, pages, posts, and custom layouts are all first-class citizens here. Migrate your blog \u2192 Get up and running in\u00a0seconds. Quick-start Instructions ~ $ gem install jekyll bundler ~ $ jekyll new my-awesome-site ~ $ cd my-awesome-site ~\/my-awesome-site $ bundle exec jekyll serve # => Now browse to http:\/\/localhost:4000 Free hosting with GitHub Pages Sick of dealing with hosting companies? GitHub Pages are powered by Jekyll, so you can easily deploy your site using GitHub for free\u2014custom domain name and\u00a0all. Learn more about GitHub Pages \u2192 The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Navigate the docs\u2026WelcomeQuick-start guideInstallationJekyll on WindowsBasic UsageDirectory structureConfigurationFront MatterWriting postsWorking with draftsCreating pagesStatic FilesVariablesCollectionsData FilesAssetsBlog migrationsTemplatesIncludesPermalinksPaginationPluginsThemesExtrasGitHub PagesDeployment methodsContinuous IntegrationTroubleshootingSites using JekyllResourcesUpgrading from 0.x to 2.xUpgrading from 2.x to 3.xContributingMaintaining JekyllCode of ConductHistory \u00a0Improve this page Templates Jekyll uses the Liquid templating language to process templates. All of the standard Liquid tags and filters are supported. Jekyll even adds a few handy filters and tags of its own to make common tasks easier. Filters Description Filter and Output Relative URL Prepend the baseurl value to the input. Useful if your site is hosted at a subpath rather than the root of the domain. {{ \"\/assets\/style.css\" | relative_url }} \/my-baseurl\/assets\/style.css Absolute URL Prepend the url and baseurl value to the input. {{ \"\/assets\/style.css\" | absolute_url }} http:\/\/example.com\/my-baseurl\/assets\/style.css Date to XML Schema Convert a Date into XML Schema (ISO 8601) format. {{ site.time | date_to_xmlschema }} 2008-11-07T13:07:54-08:00 Date to RFC-822 Format Convert a Date into the RFC-822 format used for RSS feeds. {{ site.time | date_to_rfc822 }} Mon, 07 Nov 2008 13:07:54 -0800 Date to String Convert a date to short format. {{ site.time | date_to_string }} 07 Nov 2008 Date to Long String Format a date to long format. {{ site.time | date_to_long_string }} 07 November 2008 Where Select all the objects in an array where the key has the given value. {{ site.members | where:\"graduation_year\",\"2014\" }} Where Expression Select all the objects in an array where the expression is true. Jekyll v3.2.0 & later. {{ site.members | where_exp:\"item\", \"item.graduation_year == 2014\" }} {{ site.members | where_exp:\"item\", \"item.graduation_year < 2014\" }} {{ site.members | where_exp:\"item\", \"item.projects contains 'foo'\" }} Group By Group an array's items by a given property. {{ site.members | group_by:\"graduation_year\" }} [{\"name\"=>\"2013\", \"items\"=>[...]}, {\"name\"=>\"2014\", \"items\"=>[...]}] Group By Expression Group an array's items using a Liquid expression. {{ site.members | group_by_exp:\"item\", \"item.graduation_year | truncate: 3, \\\"\\\"\" }} [{\"name\"=>\"201...\", \"items\"=>[...]}, {\"name\"=>\"200...\", \"items\"=>[...]}] XML Escape Escape some text for use in XML. {{ page.content | xml_escape }} CGI Escape CGI escape a string for use in a URL. Replaces any special characters with appropriate %XX replacements. CGI escape normally replaces a space with a plus + sign. {{ \"foo, bar; baz?\" | cgi_escape }} foo%2C+bar%3B+baz%3F URI Escape Percent encodes any special characters in a URI. URI escape normally replaces a space with %20. Reserved characters will not be escaped. {{ \"http:\/\/foo.com\/?q=foo, \\bar?\" | uri_escape }} http:\/\/foo.com\/?q=foo,%20%5Cbar? Number of Words Count the number of words in some text. {{ page.content | number_of_words }} 1337 Array to Sentence Convert an array into a sentence. Useful for listing tags. Optional argument for connector. {{ page.tags | array_to_sentence_string }} foo, bar, and baz {{ page.tags | array_to_sentence_string: 'or' }} foo, bar, or baz Markdownify Convert a Markdown-formatted string into HTML. {{ page.excerpt | markdownify }} Smartify Convert \"quotes\" into \u201csmart quotes.\u201d {{ page.title | smartify }} Converting Sass\/SCSS Convert a Sass- or SCSS-formatted string into CSS. {{ some_scss | scssify }} {{ some_sass | sassify }} Slugify Convert a string into a lowercase URL \"slug\". See below for options. {{ \"The _config.yml file\" | slugify }} the-config-yml-file {{ \"The _config.yml file\" | slugify: 'pretty' }} the-_config.yml-file Data To JSON Convert Hash or Array to JSON. {{ site.data.projects | jsonify }} Normalize Whitespace Replace any occurrence of whitespace with a single space. {{ \"a \\n b\" | normalize_whitespace }} Sort Sort an array. Optional arguments for hashes: 1.\u00a0property name 2.\u00a0nils order (first or last). {{ page.tags | sort }} {{ site.posts | sort: 'author' }} {{ site.pages | sort: 'title', 'last' }} Sample Pick a random value from an array. Optional: pick multiple values. {{ site.pages | sample }} {{ site.pages | sample:2 }} To Integer Convert a string or boolean to integer. {{ some_var | to_integer }} Array Filters Push, pop, shift, and unshift elements from an Array. These are NON-DESTRUCTIVE, i.e. they do not mutate the array, but rather make a copy and mutate that. {{ page.tags | push: 'Spokane' }} ['Seattle', 'Tacoma', 'Spokane'] {{ page.tags | pop }} ['Seattle'] {{ page.tags | shift }} ['Tacoma'] {{ page.tags | unshift: \"Olympia\" }} ['Olympia', 'Seattle', 'Tacoma'] Inspect Convert an object into its String representation for debugging. {{ some_var | inspect }} Options for the slugify filter The slugify filter accepts an option, each specifying what to filter. The default is default. They are as follows (with what they filter): none: no characters raw: spaces default: spaces and non-alphanumeric characters pretty: spaces and non-alphanumeric characters except for ._~!$&'()+,;=@ Tags Includes If you have small page snippets that you want to include in multiple places on your site, save the snippets as include files and insert them where required, by using the include tag: {% include footer.html %} Jekyll expects all include files to be placed in an _includes directory at the root of your source directory. In the above example, this will embed the contents of _includes\/footer.html into the calling file. For more advanced information on using includes, see Includes. Code snippet highlighting Jekyll has built in support for syntax highlighting of over 60 languages thanks to Rouge. Rouge is the default highlighter in Jekyll 3 and above. To use it in Jekyll 2, set highlighter to rouge and ensure the rouge gem is installed properly. Alternatively, you can use Pygments to highlight your code snippets. To use Pygments, you must have Python installed on your system, have the pygments.rb gem installed and set highlighter to pygments in your site\u2019s configuration file. Pygments supports over 100 languages To render a code block with syntax highlighting, surround your code as follows: {% highlight ruby %} def foo puts 'foo' end {% endhighlight %} The argument to the highlight tag (ruby in the example above) is the language identifier. To find the appropriate identifier to use for the language you want to highlight, look for the \u201cshort name\u201d on the Rouge wiki or the Pygments\u2019 Lexers page. Line numbers There is a second argument to highlight called linenos that is optional. Including the linenos argument will force the highlighted code to include line numbers. For instance, the following code block would include line numbers next to each line: {% highlight ruby linenos %} def foo puts 'foo' end {% endhighlight %} Stylesheets for syntax highlighting In order for the highlighting to show up, you\u2019ll need to include a highlighting stylesheet. For an example stylesheet you can look at syntax.css. These are the same styles as used by GitHub and you are free to use them for your own site. If you use linenos, you might want to include an additional CSS class definition for the .lineno class in syntax.css to distinguish the line numbers from the highlighted code. Gist Use the gist tag to easily embed a GitHub Gist onto your site. This works with public or secret gists: {% gist parkr\/931c1c8d465a04042403 %} You may also optionally specify the filename in the gist to display: {% gist parkr\/931c1c8d465a04042403 jekyll-private-gist.markdown %} To use the gist tag, you\u2019ll need to add the jekyll-gist gem to your project. Links Linking to pages To link to a post, a page, collection item, or file, the link tag will generate the correct permalink URL for the path you specify. For example, if you use the link tag to link to mypage.html, even if you change your permalink style to include the file extension or omit it, the URL formed by the link tag will always be valid. You must include the file\u2019s original extension when using the link tag. Here are some examples: {{ site.baseurl }}{% link _collection\/name-of-document.md %} {{ site.baseurl }}{% link _posts\/2016-07-26-name-of-post.md %} {{ site.baseurl }}{% link news\/index.html %} {{ site.baseurl }}{% link \/assets\/files\/doc.pdf %} You can also use the link tag to create a link in Markdown as follows: [Link to a document]({{ site.baseurl }}{% link _collection\/name-of-document.md %}) [Link to a post]({{ site.baseurl }}{% link _posts\/2016-07-26-name-of-post.md %}) [Link to a page]({{ site.baseurl }}{% link news\/index.html %}) [Link to a file]({{ site.baseurl }}{% link \/assets\/files\/doc.pdf %}) (Including {{ site.baseurl }} is optional \u2014 it depends on whether you want to preface the page URL with the baseurl value.) The path to the post, page, or collection is defined as the path relative to the root directory (where your config file is) to the file, not the path from your existing page to the other page. For example, suppose you\u2019re creating a link in page_a.md (stored in pages\/folder1\/folder2) to page_b.md (stored in pages\/folder1). Your path in the link would not be ..\/page_b.html. Instead, it would be \/pages\/folder1\/page_b.md. If you\u2019re unsure of the path, add {{ page.path }} to the page and it will display the path. One major benefit of using the link tag is link validation. If the link doesn\u2019t exist, Jekyll won\u2019t build your site. This is a good thing, as it will alert you to a broken link so you can fix it (rather than allowing you to build and deploy a site with broken links). Note you cannot add filters to link tags. For example, you cannot append a string using Liquid filters, such as {% link mypage.html | append: \"#section1\" %} . To link to sections on a page, you will need to use regular HTML or Markdown linking techniques. Linking to posts If you want to include a link to a post on your site, the post_url tag will generate the correct permalink URL for the post you specify. {{ site.baseurl }}{% post_url 2010-07-21-name-of-post %} If you organize your posts in subdirectories, you need to include subdirectory path to the post: {{ site.baseurl }}{% post_url \/subdir\/2010-07-21-name-of-post %} There is no need to include the file extension when using the post_url tag. You can also use this tag to create a link to a post in Markdown as follows: [Name of Link]({{ site.baseurl }}{% post_url 2010-07-21-name-of-post %}) Back Next Getting Started Welcome Quick-start guide Installation Jekyll on Windows Basic Usage Directory structure Configuration Your Content Front Matter Writing posts Working with drafts Creating pages Static Files Variables Collections Data Files Assets Blog migrations Customization Templates Includes Permalinks Pagination Plugins Themes Extras Deployment GitHub Pages Deployment methods Continuous Integration Miscellaneous Troubleshooting Sites using Jekyll Resources Upgrading from 0.x to 2.x Upgrading from 2.x to 3.x Meta Contributing Maintaining Jekyll Code of Conduct History The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level Natan Felles Creative Webmaster \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview'); Toggle navigation Natan Felles Blog Servi\u00c3\u00a7os Mapa do Site Natan Felles Creative Webmaster In\u00c3\u00adcio Blog Apt-Cacher-NG: Proxy de Cache de Pacotes Apt-Cacher-NG: Proxy de Cache de Pacotes Blog \u00c2\u00b7 desenvolvimento 23.09.2016 Apresenta\u00c3\u00a7\u00c3\u00a3o Apt-Cacher NG \u00c3\u00a9 um proxy de cache para pacotes de software baixados por mecanismos de distribui\u00c3\u00a7\u00c3\u00a3o em sistemas Unix\/Linux de servidores espelhos acess\u00c3\u00adveis via HTTP. Entenda melhor Sabe-se que \u00c3\u00a9 altamente recomend\u00c3\u00a1vel manter um sistema operacional sempre atualizado por devidos fatores. Em locais onde h\u00c3\u00a1 v\u00c3\u00a1rios computadores pode haver um enorme gasto do tr\u00c3\u00a1fego de banda ou congestionamento da conex\u00c3\u00a3o com a internet para manter todos atualizados. Algumas vezes, utilizando distribui\u00c3\u00a7\u00c3\u00b5es rolling release, que buscam sempre possuir as \u00c3\u00baltimas vers\u00c3\u00b5es de softwares, j\u00c3\u00a1 cheguei a precisar baixar mais de 200 MB em um \u00c3\u00banico update. Agora, imagine isso em uma empresa com 20 m\u00c3\u00a1quinas. Daria cerca de 4 GB de download para atualizar todas. A solu\u00c3\u00a7\u00c3\u00a3o mais simples \u00c3\u00a9 criar um servidor proxy de cache, ou seja, todos os pacotes baixados ficar\u00c3\u00a3o armazenados nele. E ent\u00c3\u00a3o todas as outras m\u00c3\u00a1quinas ser\u00c3\u00a3o atualizadas atrav\u00c3\u00a9s deste servidor proxy, intermedi\u00c3\u00a1rio, \u00c3\u00banico respons\u00c3\u00a1vel por baixar atualiza\u00c3\u00a7\u00c3\u00b5es externas e repass\u00c3\u00a1-las para todas as m\u00c3\u00a1quinas da rede local. Toda vez que uma m\u00c3\u00a1quina for atualizada ocorrer\u00c3\u00a1 o seguinte processo: A m\u00c3\u00a1quina conecta com o proxy e questiona se h\u00c3\u00a1 atualiza\u00c3\u00a7\u00c3\u00b5es para ela. O proxy conecta no reposit\u00c3\u00b3rio oficial e questiona por essas atualiza\u00c3\u00a7\u00c3\u00b5es, fazendo uma compara\u00c3\u00a7\u00c3\u00a3o entre as vers\u00c3\u00b5es de seus pacotes com os pacotes externos. Se houver novos pacotes, o proxy baixa os pacotes e, se houver vers\u00c3\u00a3o maior do que os da m\u00c3\u00a1quina, os retransmite para ela. Se n\u00c3\u00a3o houver novos pacotes, mas eles tiverem vers\u00c3\u00a3o maior do que os da m\u00c3\u00a1quina, o proxy apenas retransmite os pacotes para a m\u00c3\u00a1quina. Por fim, o proxy se atualizar\u00c3\u00a1 com os reposit\u00c3\u00b3rios externos e a m\u00c3\u00a1quina se atualizar\u00c3\u00a1 com o proxy. Certo. Chega de teoria e vamos ver como podemos fazer isso acontecer. Instala\u00c3\u00a7\u00c3\u00a3o do Servidor Proxy de Cache Voc\u00c3\u00aa precisar\u00c3\u00a1 de uma m\u00c3\u00a1quina para ser o servidor proxy de cache. Recomendo que utilize um sistema sem desktop, mas \u00c3\u00a9 indiferente. No servidor, vamos instalar o Apt-Cacher-NG: sudo apt install apt-cacher-ng O Apt-Cacher-NG, por padr\u00c3\u00a3o, roda na porta 3142 e \u00c3\u00a9 acess\u00c3\u00advel via web, onde possui uma p\u00c3\u00a1gina explicando como configurar outras m\u00c3\u00a1quinas para us\u00c3\u00a1-lo, manual e estat\u00c3\u00adsticas. Voc\u00c3\u00aa pode entrar diretamente pelo IP do servidor ou hostname, como no exemplo: http:\/\/192.168.1.100:3142 Configura\u00c3\u00a7\u00c3\u00a3o dos Clientes Estando com o servidor proxy de cache instalado, vamos ver como configurar as m\u00c3\u00a1quinas clientes: Em cada cliente, crie um arquivo em \/etc\/apt\/apt.conf e adicione a linha abaixo, substituindo o IP pelo do seu servidor: Acquire::http::Proxy \"http:\/\/192.168.1.100:3142\"; Feito! Salve e feche o arquivo e atualize a m\u00c3\u00a1quina cliente: sudo apt update Ao atualizar a m\u00c3\u00a1quina, automaticamente o proxy ser\u00c3\u00a1 atualizado. Fa\u00c3\u00a7a isso em todas as m\u00c3\u00a1quinas clientes e desta forma voc\u00c3\u00aa s\u00c3\u00b3 precisar\u00c3\u00a1 baixar pacotes em um \u00c3\u00banico local. Seguran\u00c3\u00a7a Caso seja necess\u00c3\u00a1rio, voc\u00c3\u00aa pode proteger o sistema web com a requisi\u00c3\u00a7\u00c3\u00a3o de usu\u00c3\u00a1rio e senha. Para isso, edite o arquivo \/etc\/apt-cacher-ng\/security.conf: #AdminAuth: mooma:moopa AdminAuth: usuario:Senh4 Depois reinicie o apt-cacher-ng: sudo systemctl restart apt-cacher-ng.service \u00c3\u0080 partir de agora, quando for navegar na porta 3142 do seu servidor proxy, lhe ser\u00c3\u00a1 solicitado os dados de acesso. Informa\u00c3\u00a7\u00c3\u00a3o Para configura\u00c3\u00a7\u00c3\u00b5es avan\u00c3\u00a7adas, leia o manual em http:\/\/192.168.1.100:3142\/acng-doc\/html\/index.html. Conclus\u00c3\u00a3o Configurar o Apt-Cacher-NG \u00c3\u00a9 simples e de extrema utilidade. Voc\u00c3\u00aa pode ter v\u00c3\u00a1rias m\u00c3\u00a1quinas na rede local, mas vai baixar pacotes externos apenas por uma, uma \u00c3\u00banica vez. cache proxy debian linux Edite essa p\u00c3\u00a1gina no GitHub Pr\u00c3\u00b3ximo Anterior var disqus_config = function () { this.page.url = 'https:\/\/natanfelles.github.io\/blog\/apt-cacher-ng'; this.page.identifier = '\/blog\/apt-cacher-ng'; }; (function() { var d = document, s = d.createElement('script'); s.src = '\/\/natanfelles.disqus.com\/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Habilite o JavaScript para ver os coment\u00c3\u00a1rios fornecidos por Disqus. \u00a9 2017 Natan Felles. Direitos reservados. Website renderizado em 28.06.2017 18:15:52 -0300 \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview'); Toggle navigation Natan Felles Blog Servi\u00c3\u00a7os Mapa do Site Natan Felles Creative Webmaster In\u00c3\u00adcio Blog Resetando a Senha do Root no MySQL Resetando a Senha do Root no MySQL Blog \u00c2\u00b7 desenvolvimento 13.06.2017 Hoje precisei acessar um servidor MySQL rec\u00c3\u00a9m instalado no qual eu n\u00c3\u00a3o sabia a senha do usu\u00c3\u00a1rio root. Mas eu tinha acesso de super-usu\u00c3\u00a1rio no Linux. Ent\u00c3\u00a3o, decidi criar uma nova senha. A maneira mais pr\u00c3\u00a1tica de realizar tal processo \u00c3\u00a9 utilizando o script mysqld_safe. Ele possui o par\u00c3\u00a2metro --skip-grant-tables, que possibilita logar sem inserir nenhuma senha. Para rodar esse script \u00c3\u00a9 necess\u00c3\u00a1rio que exista o diret\u00c3\u00b3rio \/var\/run\/mysqld com propriedade do usu\u00c3\u00a1rio do MySQL. Antes de rodar o mysqld_safe, voc\u00c3\u00aa pode conferir se o diret\u00c3\u00b3rio necess\u00c3\u00a1rio existe: \/var\/run\/mysqld Caso n\u00c3\u00a3o exista, crie-o e defina a propriedade: sudo mkdir -p \/var\/run\/mysqld sudo chown mysql:mysql \/var\/run\/mysqld Feito isso, abra outro terminal, certifique-se que o MySQL est\u00c3\u00a1 desligado e execute o mysqld_safe para rodar em segundo plano: sudo systemctl stop mysql.service sudo mysqld_safe --skip-grant-tables & Agora j\u00c3\u00a1 ser\u00c3\u00a1 poss\u00c3\u00advel entrar apenas com mysql -uroot. Sem necessidade da senha. Estando no prompt do MySQL, use a tabela mysql e defina sua nova senha: USE mysql; -- O nome da coluna \u00c3\u00a9 \"Password\" se a vers\u00c3\u00a3o do seu MySQL \u00c3\u00a9 menor que 5.7 UPDATE user SET authentication_string=PASSWORD('nova-senha') WHERE user='root'; FLUSH PRIVILEGES; EXIT Com a nova senha definida, mate o processo do mysqld_safe com um Ctrl + C e inicie o MySQL: sudo systemctl start mysql.service \u00c3\u0080 partir de ent\u00c3\u00a3o voc\u00c3\u00aa poder\u00c3\u00a1 acessar o MySQL normalmente, com mysql -uroot -p. Feito. Fontes MySQL :: MySQL 5.7 Reference Manual :: B.5.3.2 How to Reset the Root Password MysqlPasswordReset - Community Help Wiki Reset Forgotten MySQL Root Password mysql linux servidor Edite essa p\u00c3\u00a1gina no GitHub Pr\u00c3\u00b3ximo Anterior var disqus_config = function () { this.page.url = 'https:\/\/natanfelles.github.io\/blog\/mysql-reset-password'; this.page.identifier = '\/blog\/mysql-reset-password'; }; (function() { var d = document, s = d.createElement('script'); s.src = '\/\/natanfelles.disqus.com\/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Habilite o JavaScript para ver os coment\u00c3\u00a1rios fornecidos por Disqus. \u00a9 2017 Natan Felles. Direitos reservados. Website renderizado em 28.06.2017 18:15:52 -0300 \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview');","tags":"natanfelles webmaster tutoriais desenvolvedor web linux programador php full stack developer administrador de sistemas Natan Felles brasil","url":"https:\/\/natanfelles.github.io\/blog\/mysql-reset-password"},{"title":"PHP: DOMDocument - Manual ","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getScript() Categories: Ajax > Shorthand Methods jQuery.getScript( url [, success ] )Returns: jqXHR Description: Load a JavaScript file from the server using a GET HTTP request, then execute it. version added: 1.0jQuery.getScript( url [, success ] ) url Type: String A string containing the URL to which the request is sent. success Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 $.ajax({ url: url, dataType: \"script\", success: success}); The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page. Success Callback The callback is fired once the script has been loaded but not necessarily executed. Scripts are included and run by referencing the file name: 1 2 3 4 5 6 $.getScript( \"ajax\/test.js\", function( data, textStatus, jqxhr ) { console.log( data ); \/\/ Data returned console.log( textStatus ); \/\/ Success console.log( jqxhr.status ); \/\/ 200 console.log( \"Load was performed.\" );}); Handling Errors As of jQuery 1.5, you may use .fail() to account for errors: 1 2 3 4 5 6 7 $.getScript( \"ajax\/test.js\" ) .done(function( script, textStatus ) { console.log( textStatus ); }) .fail(function( jqxhr, settings, exception ) { $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );}); Prior to jQuery 1.5, the global .ajaxError() callback event had to be used in order to handle $.getScript() errors: 1 2 3 4 5 $( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) { if ( settings.dataType == \"script\" ) { $( this ).text( \"Triggered ajaxError handler.\" ); }}); Caching Responses By default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using $.ajaxSetup(): 1 2 3 $.ajaxSetup({ cache: true}); Alternatively, you could define a new method that uses the more flexible $.ajax() method. Examples: Define a $.cachedScript() method that allows fetching a cached script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 jQuery.cachedScript = function( url, options ) { \/\/ Allow user to set any option except for dataType, cache, and url options = $.extend( options || {}, { dataType: \"script\", cache: true, url: url }); \/\/ Use $.ajax() since it is more flexible than $.getScript \/\/ Return the jqXHR object so we can chain callbacks return jQuery.ajax( options );}; \/\/ Usage$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) { console.log( textStatus );}); Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 jQuery.getScript demo .block { background-color: blue; width: 150px; height: 70px; margin: 10px; } &raquo; Run var url = \"https:\/\/code.jquery.com\/color\/jquery.color.js\";$.getScript( url, function() { $( \"#go\" ).click(function() { $( \".block\" ) .animate({ backgroundColor: \"rgb(255, 180, 180)\" }, 1000 ) .delay( 500 ) .animate({ backgroundColor: \"olive\" }, 1000 ) .delay( 500\u00a0) .animate({ backgroundColor: \"#00f\" }, 1000 ); });}); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); Toggle navigation CodeIgniter Download Documentation Community Contribute CodeIgniter Rocks CodeIgniter is a powerful PHP framework with a very small footprint, built for developers who need a simple and elegant toolkit to create full-featured web applications. Star 14,705 Fork 6,953 @CodeIgniter Download The latest is Version 3.1.5 Read the Manual Clear documentation View the Forums Get Support & Discuss Things On GitHub Fix Bugs or Add Features Recent News 2017.07.11 Project Update - 2017.07.10 2017.06.19 CodeIgniter 3.1.5 Released 2017.03.20 CodeIgniter 3.1.4 released 2017.03.09 BCIT newsletter story about CodeIgniter 2017.01.20 Planned Server Downtime Jan 21, 2017 Active Forum Threads 2017.07.11 form_input don't output html since ci3 upgrade 2017.07.11 Community Auth : Login Error 2017.07.11 Get data from cookie on subdomain with Codeigniter 2017.07.11 local to gmt function doesn't work 2017.07.11 REST API request does not reply until shell script is done Why CodeIgniter? Framework with a small footprint CodeIgniter 3 has a 2MB download, including the user guide. Simple solutions over complexity CodeIgniter encourages MVC, but does not force it on you. Clear documentation The CodeIgniter User Guide comes with the download. It contains an introduction, tutorial, a number of \"how to\" guides, and then reference documentation for the components that make up the framework. Exceptional performance CodeIgniter consistently outperforms most of its competitors. Strong Security We take security seriously, with built-in protection against CSRF and XSS attacks. Nearly zero configuration Much of the CodeIgniter configuration is done by convention, for instance putting models in a \"models\" folder. There are still a number of configuration options available, through scripts in the \"config\" folder. Policies The Fine Print About CodeIgniter was created by EllisLab and is now a project of the British Columbia Institute of Technology !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = \/^http:\/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + ':\/\/platform.twitter.com\/widgets.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'twitter-wjs');\/* -1&&m>28){j=28+s;s='';if(j *\/ Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 CodeIgniter4 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 \u00a0 CodeIgniter4 Docs \u00bb CodeIgniter4 User Guide CodeIgniter4 User Guide\u00b6 License Agreement Change Log Welcome Installation Tutorial CodeIgniter4 Overview General Topics Library Reference Database Reference Helper Reference Contributing to CodeIgniter Welcome\u00b6 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance Installation\u00b6 InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server Tutorial\u00b6 TutorialStatic pages News section Create news items Conclusion CodeIgniter4 Overview\u00b6 CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General Topics\u00b6 General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library Reference\u00b6 Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database Reference\u00b6 Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events Helper Reference\u00b6 HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniter\u00b6 Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 Next \u00a9 Copyright 2014 - 2017, British Columbia Institute of Technology. Last updated on Jul 05, 2017. Built with Sphinx using a theme provided by Read the Docs. var DOCUMENTATION_OPTIONS = { URL_ROOT:'.\/', VERSION:'4.0.0-dev', COLLAPSE_INDEX:false, FILE_SUFFIX:'.html', HAS_SOURCE: false }; jQuery(function () { SphinxRtdTheme.StickyNav.enable(); }); Skip Quicknav About Debian Getting Debian Support Developers' Corner \u00a0 Download Debian 9.0(64-bit PC Network installer) Debian Debian is a free operating system (OS) for your computer. An operating system is the set of basic programs and utilities that make your computer run. Debian provides more than a pure OS: it comes with over 51000 packages, precompiled software bundled up in a nice format for easy installation on your machine. Read more... About Social Contract Code of Conduct Free Software Partners Donations Contact Us Help Debian Getting Debian Network install CD\/USB ISO images CD vendors Pre-installed Pure Blends Debian Packages Developers' Corner News Project News Events Documentation Release Info Installation manual Debian Books Debian Wiki Support Debian International Security Information Bug reports Mailing Lists Mailing List Archives Ports\/Architectures Miscellaneous Site map Search The Debian Blog The latest stable release of Debian is 9.0. The last update to this release was made on June 17th, 2017. Read more about available versions of Debian. Getting Started If you'd like to start using Debian, you can easily obtain a copy, and then follow the installation instructions to install it. If you're upgrading to the latest stable release from a previous version, please read the release notes before proceeding. To get help in using or setting up Debian, see our documentation and support pages. Users that speak languages other than English should check the international section. People who use systems other than Intel x86 should check the ports section. RSS News [18 Jun 2017] Debian Edu \/ Skolelinux Stretch \u2014 a complete Linux solution for your school[17 Jun 2017] Debian 9 Stretch released[06 May 2017] Updated Debian 8: 8.8 released[25 Apr 2017] Shutting down public FTP services[17 Apr 2017] Statement concerning the arrest of Dmitry Bogatov[14 Jan 2017] Updated Debian 8: 8.7 released For older news items see the News Page. If you would like to receive mail whenever new Debian news comes out, subscribe to the debian-announce mailing list. RSS Security Advisories [09 Jul 2017] DSA-3905 xorg-server - security update [08 Jul 2017] DSA-3904 bind9 - security update [05 Jul 2017] DSA-3903 tiff - security update [05 Jul 2017] DSA-3902 jabberd2 - security update [02 Jul 2017] DSA-3901 libgcrypt20 - security update [27 Jun 2017] DSA-3900 openvpn - security update [27 Jun 2017] DSA-3899 vlc - security update [25 Jun 2017] DSA-3898 expat - security update [24 Jun 2017] DSA-3897 drupal7 - security update [22 Jun 2017] DSA-3896 apache2 - security update [22 Jun 2017] DSA-3895 flatpak - security update [22 Jun 2017] DSA-3894 graphite2 - security update [22 Jun 2017] DSA-3893 jython - security update [22 Jun 2017] DSA-3892 tomcat7 - security update [22 Jun 2017] DSA-3891 tomcat8 - security update For older security advisories see the Security Page. If you would like to receive security advisories as soon as they're announced, subscribe to the debian-security-announce mailing list. This page is also available in the following languages: \u0639\u0631\u0628\u064a\u0629\u00a0(Arabiya) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u00a0(B\u0259lgarski) catal\u00e0 \u010desky dansk Deutsch \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\u00a0(Ellinika) espa\u00f1ol Esperanto \u0641\u0627\u0631\u0633\u06cc\u00a0(Farsi) fran\u00e7ais Galego \ud55c\uad6d\uc5b4\u00a0(Hangul) \u0540\u0561\u0575\u0565\u0580\u0565\u0576\u00a0(hayeren) hrvatski Indonesia Italiano \u05e2\u05d1\u05e8\u05d9\u05ea\u00a0(ivrit) Lietuvi\u0173 magyar Nederlands \u65e5\u672c\u8a9e\u00a0(Nihongo) norsk\u00a0(bokm\u00e5l) polski Portugu\u00eas rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439\u00a0(Russkij) slovensky suomi svenska \u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u00a0(Tamil) Ti\u1ebfng Vi\u1ec7t T\u00fcrk\u00e7e \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u00a0(ukrajins'ka) \u4e2d\u6587(\u7b80) \u4e2d\u6587(HK) \u4e2d\u6587(\u7e41) How to set the default document language To report a problem with the web site, e-mail our publicly archived mailing list debian-www@lists.debian.org. For other contact information, see the Debian contact page. Web site source code is available. Last Modified: Thu, Jun 8 15:25:09 UTC 2017 Copyright \u00a9 1997-2017 SPI and others; See license terms Debian is a registered trademark of Software in the Public Interest, Inc. Dev Home minFraud GeoIP FAQ Main Site Site Map English \u7b80\u4f53\u4e2d\u6587 (Chinese (Simplified)) Search\r Search\r Table of ContentsBinary DatabasesMaxMind Supported APIsThird-Party APIsUpdating Downloadable DatabasesCSV DatabasesDownload LimitsLinksSystem Status \/* Skip to content Features Business Explore Marketplace Pricing \/dashboard Sign in or Sign up Built for developers GitHub is a development platform inspired by the way you work. From open source to business, you can host and review code, manage projects, and build software alongside millions of other developers. Username Email Password Use at least one letter, one numeral, and seven characters. Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. Sign up for GitHub teams GitHub for teams A better way to work together GitHub brings teams together to work through problems, move ideas forward, and learn from each other along the way. Sign up your team Write better code Collaboration makes perfect. The conversations and code reviews that happen in Pull Requests help your team share the weight of your work and improve the software you build. Learn about code review on GitHub Manage your chaos Take a deep breath. On GitHub, project management happens in Issues and Projects, right alongside your code. All you have to do is mention a teammate to get them involved. Learn about project management on GitHub security-admin Security and administration Boxes? Check. We worried about your administrative and security needs so you don\u2019t have to. From flexible hosting to authentication options, GitHub can help you meet your team\u2019s requirements. Learn about GitHub for Business Code security Prevent problems before they happen. Protected branches, signed commits, and required status checks protect your work and help you maintain a high standard for your code. Access controlled Encourage teams to work together while limiting access to those who need it with granular permissions and authentication through SAML\/SSO and LDAP. Hosted where you need it Securely and reliably host your work on GitHub.com. Or, deploy GitHub Enterprise on your own servers or in a private cloud using Amazon Web Services, Azure or Google Cloud Platform. integrations Integrations Build on GitHub Customize your process with GitHub apps and an intuitive API. Integrate the tools you already use or discover new favorites to create a happier, more efficient way of working. Learn about integrations Sometimes, there\u2019s more than one tool for the job. Why not try something new? Browse GitHub Marketplace open-source Community Welcome home, developers GitHub is home to the world\u2019s largest community of developers and their\u00a0projects... Ariya Hidayat PhantomJS maintainer Russell Keith-Magee PyBee maintainer MailChimp Marketing customer Kris Nova Kubernetes\/kops maintainer Evan You Vue maintainer Mapbox Software customer Jess Frazelle Kubernetes, previously Docker maintainer ...whether you\u2019re making your first commit or sending a Rover to Mars, there\u2019s room for you here, too. 62M repositories worldwide GitHub\u2019s users create and maintain influential technologies alongside the world's largest open source\u00a0community. 22M developers worldwide Developers use GitHub for personal projects, from experimenting with new programming languages to hosting their life\u2019s work. 117K businesses worldwide Businesses of all sizes use GitHub to support their development process and to securely build software. More than a million teams use GitHub Get started for free \u2014 join the millions of developers already using GitHub to share their code, work together, and build amazing things. Username Email Password Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. \u00a9 2017 Features Code review Project management Community Documentation Code hosting Platform Atom Electron GitHub Desktop Developers Community Personal Open source For Business For Education Sponsorships Company About Blog Customers Careers Press Shop Resources Contact GitHub Help Status Terms Privacy Security Training You can't perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Transform your plain text into static\u00a0websites and\u00a0blogs. Simple No more databases, comment moderation, or pesky updates to install\u2014just your content. How Jekyll works \u2192 Static Markdown (or Textile), Liquid, HTML & CSS go in. Static sites come out ready for deployment. Jekyll template guide \u2192 Blog-aware Permalinks, categories, pages, posts, and custom layouts are all first-class citizens here. Migrate your blog \u2192 Get up and running in\u00a0seconds. Quick-start Instructions ~ $ gem install jekyll bundler ~ $ jekyll new my-awesome-site ~ $ cd my-awesome-site ~\/my-awesome-site $ bundle exec jekyll serve # => Now browse to http:\/\/localhost:4000 Free hosting with GitHub Pages Sick of dealing with hosting companies? GitHub Pages are powered by Jekyll, so you can easily deploy your site using GitHub for free\u2014custom domain name and\u00a0all. Learn more about GitHub Pages \u2192 The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Navigate the docs\u2026WelcomeQuick-start guideInstallationJekyll on WindowsBasic UsageDirectory structureConfigurationFront MatterWriting postsWorking with draftsCreating pagesStatic FilesVariablesCollectionsData FilesAssetsBlog migrationsTemplatesIncludesPermalinksPaginationPluginsThemesExtrasGitHub PagesDeployment methodsContinuous IntegrationTroubleshootingSites using JekyllResourcesUpgrading from 0.x to 2.xUpgrading from 2.x to 3.xContributingMaintaining JekyllCode of ConductHistory \u00a0Improve this page Templates Jekyll uses the Liquid templating language to process templates. All of the standard Liquid tags and filters are supported. Jekyll even adds a few handy filters and tags of its own to make common tasks easier. Filters Description Filter and Output Relative URL Prepend the baseurl value to the input. Useful if your site is hosted at a subpath rather than the root of the domain. {{ \"\/assets\/style.css\" | relative_url }} \/my-baseurl\/assets\/style.css Absolute URL Prepend the url and baseurl value to the input. {{ \"\/assets\/style.css\" | absolute_url }} http:\/\/example.com\/my-baseurl\/assets\/style.css Date to XML Schema Convert a Date into XML Schema (ISO 8601) format. {{ site.time | date_to_xmlschema }} 2008-11-07T13:07:54-08:00 Date to RFC-822 Format Convert a Date into the RFC-822 format used for RSS feeds. {{ site.time | date_to_rfc822 }} Mon, 07 Nov 2008 13:07:54 -0800 Date to String Convert a date to short format. {{ site.time | date_to_string }} 07 Nov 2008 Date to Long String Format a date to long format. {{ site.time | date_to_long_string }} 07 November 2008 Where Select all the objects in an array where the key has the given value. {{ site.members | where:\"graduation_year\",\"2014\" }} Where Expression Select all the objects in an array where the expression is true. Jekyll v3.2.0 & later. {{ site.members | where_exp:\"item\", \"item.graduation_year == 2014\" }} {{ site.members | where_exp:\"item\", \"item.graduation_year < 2014\" }} {{ site.members | where_exp:\"item\", \"item.projects contains 'foo'\" }} Group By Group an array's items by a given property. {{ site.members | group_by:\"graduation_year\" }} [{\"name\"=>\"2013\", \"items\"=>[...]}, {\"name\"=>\"2014\", \"items\"=>[...]}] Group By Expression Group an array's items using a Liquid expression. {{ site.members | group_by_exp:\"item\", \"item.graduation_year | truncate: 3, \\\"\\\"\" }} [{\"name\"=>\"201...\", \"items\"=>[...]}, {\"name\"=>\"200...\", \"items\"=>[...]}] XML Escape Escape some text for use in XML. {{ page.content | xml_escape }} CGI Escape CGI escape a string for use in a URL. Replaces any special characters with appropriate %XX replacements. CGI escape normally replaces a space with a plus + sign. {{ \"foo, bar; baz?\" | cgi_escape }} foo%2C+bar%3B+baz%3F URI Escape Percent encodes any special characters in a URI. URI escape normally replaces a space with %20. Reserved characters will not be escaped. {{ \"http:\/\/foo.com\/?q=foo, \\bar?\" | uri_escape }} http:\/\/foo.com\/?q=foo,%20%5Cbar? Number of Words Count the number of words in some text. {{ page.content | number_of_words }} 1337 Array to Sentence Convert an array into a sentence. Useful for listing tags. Optional argument for connector. {{ page.tags | array_to_sentence_string }} foo, bar, and baz {{ page.tags | array_to_sentence_string: 'or' }} foo, bar, or baz Markdownify Convert a Markdown-formatted string into HTML. {{ page.excerpt | markdownify }} Smartify Convert \"quotes\" into \u201csmart quotes.\u201d {{ page.title | smartify }} Converting Sass\/SCSS Convert a Sass- or SCSS-formatted string into CSS. {{ some_scss | scssify }} {{ some_sass | sassify }} Slugify Convert a string into a lowercase URL \"slug\". See below for options. {{ \"The _config.yml file\" | slugify }} the-config-yml-file {{ \"The _config.yml file\" | slugify: 'pretty' }} the-_config.yml-file Data To JSON Convert Hash or Array to JSON. {{ site.data.projects | jsonify }} Normalize Whitespace Replace any occurrence of whitespace with a single space. {{ \"a \\n b\" | normalize_whitespace }} Sort Sort an array. Optional arguments for hashes: 1.\u00a0property name 2.\u00a0nils order (first or last). {{ page.tags | sort }} {{ site.posts | sort: 'author' }} {{ site.pages | sort: 'title', 'last' }} Sample Pick a random value from an array. Optional: pick multiple values. {{ site.pages | sample }} {{ site.pages | sample:2 }} To Integer Convert a string or boolean to integer. {{ some_var | to_integer }} Array Filters Push, pop, shift, and unshift elements from an Array. These are NON-DESTRUCTIVE, i.e. they do not mutate the array, but rather make a copy and mutate that. {{ page.tags | push: 'Spokane' }} ['Seattle', 'Tacoma', 'Spokane'] {{ page.tags | pop }} ['Seattle'] {{ page.tags | shift }} ['Tacoma'] {{ page.tags | unshift: \"Olympia\" }} ['Olympia', 'Seattle', 'Tacoma'] Inspect Convert an object into its String representation for debugging. {{ some_var | inspect }} Options for the slugify filter The slugify filter accepts an option, each specifying what to filter. The default is default. They are as follows (with what they filter): none: no characters raw: spaces default: spaces and non-alphanumeric characters pretty: spaces and non-alphanumeric characters except for ._~!$&'()+,;=@ Tags Includes If you have small page snippets that you want to include in multiple places on your site, save the snippets as include files and insert them where required, by using the include tag: {% include footer.html %} Jekyll expects all include files to be placed in an _includes directory at the root of your source directory. In the above example, this will embed the contents of _includes\/footer.html into the calling file. For more advanced information on using includes, see Includes. Code snippet highlighting Jekyll has built in support for syntax highlighting of over 60 languages thanks to Rouge. Rouge is the default highlighter in Jekyll 3 and above. To use it in Jekyll 2, set highlighter to rouge and ensure the rouge gem is installed properly. Alternatively, you can use Pygments to highlight your code snippets. To use Pygments, you must have Python installed on your system, have the pygments.rb gem installed and set highlighter to pygments in your site\u2019s configuration file. Pygments supports over 100 languages To render a code block with syntax highlighting, surround your code as follows: {% highlight ruby %} def foo puts 'foo' end {% endhighlight %} The argument to the highlight tag (ruby in the example above) is the language identifier. To find the appropriate identifier to use for the language you want to highlight, look for the \u201cshort name\u201d on the Rouge wiki or the Pygments\u2019 Lexers page. Line numbers There is a second argument to highlight called linenos that is optional. Including the linenos argument will force the highlighted code to include line numbers. For instance, the following code block would include line numbers next to each line: {% highlight ruby linenos %} def foo puts 'foo' end {% endhighlight %} Stylesheets for syntax highlighting In order for the highlighting to show up, you\u2019ll need to include a highlighting stylesheet. For an example stylesheet you can look at syntax.css. These are the same styles as used by GitHub and you are free to use them for your own site. If you use linenos, you might want to include an additional CSS class definition for the .lineno class in syntax.css to distinguish the line numbers from the highlighted code. Gist Use the gist tag to easily embed a GitHub Gist onto your site. This works with public or secret gists: {% gist parkr\/931c1c8d465a04042403 %} You may also optionally specify the filename in the gist to display: {% gist parkr\/931c1c8d465a04042403 jekyll-private-gist.markdown %} To use the gist tag, you\u2019ll need to add the jekyll-gist gem to your project. Links Linking to pages To link to a post, a page, collection item, or file, the link tag will generate the correct permalink URL for the path you specify. For example, if you use the link tag to link to mypage.html, even if you change your permalink style to include the file extension or omit it, the URL formed by the link tag will always be valid. You must include the file\u2019s original extension when using the link tag. Here are some examples: {{ site.baseurl }}{% link _collection\/name-of-document.md %} {{ site.baseurl }}{% link _posts\/2016-07-26-name-of-post.md %} {{ site.baseurl }}{% link news\/index.html %} {{ site.baseurl }}{% link \/assets\/files\/doc.pdf %} You can also use the link tag to create a link in Markdown as follows: [Link to a document]({{ site.baseurl }}{% link _collection\/name-of-document.md %}) [Link to a post]({{ site.baseurl }}{% link _posts\/2016-07-26-name-of-post.md %}) [Link to a page]({{ site.baseurl }}{% link news\/index.html %}) [Link to a file]({{ site.baseurl }}{% link \/assets\/files\/doc.pdf %}) (Including {{ site.baseurl }} is optional \u2014 it depends on whether you want to preface the page URL with the baseurl value.) The path to the post, page, or collection is defined as the path relative to the root directory (where your config file is) to the file, not the path from your existing page to the other page. For example, suppose you\u2019re creating a link in page_a.md (stored in pages\/folder1\/folder2) to page_b.md (stored in pages\/folder1). Your path in the link would not be ..\/page_b.html. Instead, it would be \/pages\/folder1\/page_b.md. If you\u2019re unsure of the path, add {{ page.path }} to the page and it will display the path. One major benefit of using the link tag is link validation. If the link doesn\u2019t exist, Jekyll won\u2019t build your site. This is a good thing, as it will alert you to a broken link so you can fix it (rather than allowing you to build and deploy a site with broken links). Note you cannot add filters to link tags. For example, you cannot append a string using Liquid filters, such as {% link mypage.html | append: \"#section1\" %} . To link to sections on a page, you will need to use regular HTML or Markdown linking techniques. Linking to posts If you want to include a link to a post on your site, the post_url tag will generate the correct permalink URL for the post you specify. {{ site.baseurl }}{% post_url 2010-07-21-name-of-post %} If you organize your posts in subdirectories, you need to include subdirectory path to the post: {{ site.baseurl }}{% post_url \/subdir\/2010-07-21-name-of-post %} There is no need to include the file extension when using the post_url tag. You can also use this tag to create a link to a post in Markdown as follows: [Name of Link]({{ site.baseurl }}{% post_url 2010-07-21-name-of-post %}) Back Next Getting Started Welcome Quick-start guide Installation Jekyll on Windows Basic Usage Directory structure Configuration Your Content Front Matter Writing posts Working with drafts Creating pages Static Files Variables Collections Data Files Assets Blog migrations Customization Templates Includes Permalinks Pagination Plugins Themes Extras Deployment GitHub Pages Deployment methods Continuous Integration Miscellaneous Troubleshooting Sites using Jekyll Resources Upgrading from 0.x to 2.x Upgrading from 2.x to 3.x Meta Contributing Maintaining Jekyll Code of Conduct History The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level Natan Felles Creative Webmaster \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview'); Toggle navigation Natan Felles Blog Servi\u00c3\u00a7os Mapa do Site Natan Felles Creative Webmaster In\u00c3\u00adcio Blog Apt-Cacher-NG: Proxy de Cache de Pacotes Apt-Cacher-NG: Proxy de Cache de Pacotes Blog \u00c2\u00b7 desenvolvimento 23.09.2016 Apresenta\u00c3\u00a7\u00c3\u00a3o Apt-Cacher NG \u00c3\u00a9 um proxy de cache para pacotes de software baixados por mecanismos de distribui\u00c3\u00a7\u00c3\u00a3o em sistemas Unix\/Linux de servidores espelhos acess\u00c3\u00adveis via HTTP. Entenda melhor Sabe-se que \u00c3\u00a9 altamente recomend\u00c3\u00a1vel manter um sistema operacional sempre atualizado por devidos fatores. Em locais onde h\u00c3\u00a1 v\u00c3\u00a1rios computadores pode haver um enorme gasto do tr\u00c3\u00a1fego de banda ou congestionamento da conex\u00c3\u00a3o com a internet para manter todos atualizados. Algumas vezes, utilizando distribui\u00c3\u00a7\u00c3\u00b5es rolling release, que buscam sempre possuir as \u00c3\u00baltimas vers\u00c3\u00b5es de softwares, j\u00c3\u00a1 cheguei a precisar baixar mais de 200 MB em um \u00c3\u00banico update. Agora, imagine isso em uma empresa com 20 m\u00c3\u00a1quinas. Daria cerca de 4 GB de download para atualizar todas. A solu\u00c3\u00a7\u00c3\u00a3o mais simples \u00c3\u00a9 criar um servidor proxy de cache, ou seja, todos os pacotes baixados ficar\u00c3\u00a3o armazenados nele. E ent\u00c3\u00a3o todas as outras m\u00c3\u00a1quinas ser\u00c3\u00a3o atualizadas atrav\u00c3\u00a9s deste servidor proxy, intermedi\u00c3\u00a1rio, \u00c3\u00banico respons\u00c3\u00a1vel por baixar atualiza\u00c3\u00a7\u00c3\u00b5es externas e repass\u00c3\u00a1-las para todas as m\u00c3\u00a1quinas da rede local. Toda vez que uma m\u00c3\u00a1quina for atualizada ocorrer\u00c3\u00a1 o seguinte processo: A m\u00c3\u00a1quina conecta com o proxy e questiona se h\u00c3\u00a1 atualiza\u00c3\u00a7\u00c3\u00b5es para ela. O proxy conecta no reposit\u00c3\u00b3rio oficial e questiona por essas atualiza\u00c3\u00a7\u00c3\u00b5es, fazendo uma compara\u00c3\u00a7\u00c3\u00a3o entre as vers\u00c3\u00b5es de seus pacotes com os pacotes externos. Se houver novos pacotes, o proxy baixa os pacotes e, se houver vers\u00c3\u00a3o maior do que os da m\u00c3\u00a1quina, os retransmite para ela. Se n\u00c3\u00a3o houver novos pacotes, mas eles tiverem vers\u00c3\u00a3o maior do que os da m\u00c3\u00a1quina, o proxy apenas retransmite os pacotes para a m\u00c3\u00a1quina. Por fim, o proxy se atualizar\u00c3\u00a1 com os reposit\u00c3\u00b3rios externos e a m\u00c3\u00a1quina se atualizar\u00c3\u00a1 com o proxy. Certo. Chega de teoria e vamos ver como podemos fazer isso acontecer. Instala\u00c3\u00a7\u00c3\u00a3o do Servidor Proxy de Cache Voc\u00c3\u00aa precisar\u00c3\u00a1 de uma m\u00c3\u00a1quina para ser o servidor proxy de cache. Recomendo que utilize um sistema sem desktop, mas \u00c3\u00a9 indiferente. No servidor, vamos instalar o Apt-Cacher-NG: sudo apt install apt-cacher-ng O Apt-Cacher-NG, por padr\u00c3\u00a3o, roda na porta 3142 e \u00c3\u00a9 acess\u00c3\u00advel via web, onde possui uma p\u00c3\u00a1gina explicando como configurar outras m\u00c3\u00a1quinas para us\u00c3\u00a1-lo, manual e estat\u00c3\u00adsticas. Voc\u00c3\u00aa pode entrar diretamente pelo IP do servidor ou hostname, como no exemplo: http:\/\/192.168.1.100:3142 Configura\u00c3\u00a7\u00c3\u00a3o dos Clientes Estando com o servidor proxy de cache instalado, vamos ver como configurar as m\u00c3\u00a1quinas clientes: Em cada cliente, crie um arquivo em \/etc\/apt\/apt.conf e adicione a linha abaixo, substituindo o IP pelo do seu servidor: Acquire::http::Proxy \"http:\/\/192.168.1.100:3142\"; Feito! Salve e feche o arquivo e atualize a m\u00c3\u00a1quina cliente: sudo apt update Ao atualizar a m\u00c3\u00a1quina, automaticamente o proxy ser\u00c3\u00a1 atualizado. Fa\u00c3\u00a7a isso em todas as m\u00c3\u00a1quinas clientes e desta forma voc\u00c3\u00aa s\u00c3\u00b3 precisar\u00c3\u00a1 baixar pacotes em um \u00c3\u00banico local. Seguran\u00c3\u00a7a Caso seja necess\u00c3\u00a1rio, voc\u00c3\u00aa pode proteger o sistema web com a requisi\u00c3\u00a7\u00c3\u00a3o de usu\u00c3\u00a1rio e senha. Para isso, edite o arquivo \/etc\/apt-cacher-ng\/security.conf: #AdminAuth: mooma:moopa AdminAuth: usuario:Senh4 Depois reinicie o apt-cacher-ng: sudo systemctl restart apt-cacher-ng.service \u00c3\u0080 partir de agora, quando for navegar na porta 3142 do seu servidor proxy, lhe ser\u00c3\u00a1 solicitado os dados de acesso. Informa\u00c3\u00a7\u00c3\u00a3o Para configura\u00c3\u00a7\u00c3\u00b5es avan\u00c3\u00a7adas, leia o manual em http:\/\/192.168.1.100:3142\/acng-doc\/html\/index.html. Conclus\u00c3\u00a3o Configurar o Apt-Cacher-NG \u00c3\u00a9 simples e de extrema utilidade. Voc\u00c3\u00aa pode ter v\u00c3\u00a1rias m\u00c3\u00a1quinas na rede local, mas vai baixar pacotes externos apenas por uma, uma \u00c3\u00banica vez. cache proxy debian linux Edite essa p\u00c3\u00a1gina no GitHub Pr\u00c3\u00b3ximo Anterior var disqus_config = function () { this.page.url = 'https:\/\/natanfelles.github.io\/blog\/apt-cacher-ng'; this.page.identifier = '\/blog\/apt-cacher-ng'; }; (function() { var d = document, s = d.createElement('script'); s.src = '\/\/natanfelles.disqus.com\/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Habilite o JavaScript para ver os coment\u00c3\u00a1rios fornecidos por Disqus. \u00a9 2017 Natan Felles. Direitos reservados. Website renderizado em 28.06.2017 18:15:52 -0300 \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview'); Toggle navigation Natan Felles Blog Servi\u00c3\u00a7os Mapa do Site Natan Felles Creative Webmaster In\u00c3\u00adcio Blog Resetando a Senha do Root no MySQL Resetando a Senha do Root no MySQL Blog \u00c2\u00b7 desenvolvimento 13.06.2017 Hoje precisei acessar um servidor MySQL rec\u00c3\u00a9m instalado no qual eu n\u00c3\u00a3o sabia a senha do usu\u00c3\u00a1rio root. Mas eu tinha acesso de super-usu\u00c3\u00a1rio no Linux. Ent\u00c3\u00a3o, decidi criar uma nova senha. A maneira mais pr\u00c3\u00a1tica de realizar tal processo \u00c3\u00a9 utilizando o script mysqld_safe. Ele possui o par\u00c3\u00a2metro --skip-grant-tables, que possibilita logar sem inserir nenhuma senha. Para rodar esse script \u00c3\u00a9 necess\u00c3\u00a1rio que exista o diret\u00c3\u00b3rio \/var\/run\/mysqld com propriedade do usu\u00c3\u00a1rio do MySQL. Antes de rodar o mysqld_safe, voc\u00c3\u00aa pode conferir se o diret\u00c3\u00b3rio necess\u00c3\u00a1rio existe: \/var\/run\/mysqld Caso n\u00c3\u00a3o exista, crie-o e defina a propriedade: sudo mkdir -p \/var\/run\/mysqld sudo chown mysql:mysql \/var\/run\/mysqld Feito isso, abra outro terminal, certifique-se que o MySQL est\u00c3\u00a1 desligado e execute o mysqld_safe para rodar em segundo plano: sudo systemctl stop mysql.service sudo mysqld_safe --skip-grant-tables & Agora j\u00c3\u00a1 ser\u00c3\u00a1 poss\u00c3\u00advel entrar apenas com mysql -uroot. Sem necessidade da senha. Estando no prompt do MySQL, use a tabela mysql e defina sua nova senha: USE mysql; -- O nome da coluna \u00c3\u00a9 \"Password\" se a vers\u00c3\u00a3o do seu MySQL \u00c3\u00a9 menor que 5.7 UPDATE user SET authentication_string=PASSWORD('nova-senha') WHERE user='root'; FLUSH PRIVILEGES; EXIT Com a nova senha definida, mate o processo do mysqld_safe com um Ctrl + C e inicie o MySQL: sudo systemctl start mysql.service \u00c3\u0080 partir de ent\u00c3\u00a3o voc\u00c3\u00aa poder\u00c3\u00a1 acessar o MySQL normalmente, com mysql -uroot -p. Feito. Fontes MySQL :: MySQL 5.7 Reference Manual :: B.5.3.2 How to Reset the Root Password MysqlPasswordReset - Community Help Wiki Reset Forgotten MySQL Root Password mysql linux servidor Edite essa p\u00c3\u00a1gina no GitHub Pr\u00c3\u00b3ximo Anterior var disqus_config = function () { this.page.url = 'https:\/\/natanfelles.github.io\/blog\/mysql-reset-password'; this.page.identifier = '\/blog\/mysql-reset-password'; }; (function() { var d = document, s = d.createElement('script'); s.src = '\/\/natanfelles.disqus.com\/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Habilite o JavaScript para ver os coment\u00c3\u00a1rios fornecidos por Disqus. \u00a9 2017 Natan Felles. Direitos reservados. Website renderizado em 28.06.2017 18:15:52 -0300 \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview'); Downloads Documentation Get Involved Help php[world] 2017 Getting Started Introduction A simple tutorial Language Reference Basic syntax Types Variables Constants Expressions Operators Control Structures Functions Classes and Objects Namespaces Errors Exceptions Generators References Explained Predefined Variables Predefined Exceptions Predefined Interfaces and Classes Context options and parameters Supported Protocols and Wrappers Security Introduction General considerations Installed as CGI binary Installed as an Apache module Session Security Filesystem Security Database Security Error Reporting Using Register Globals User Submitted Data Magic Quotes Hiding PHP Keeping Current Features HTTP authentication with PHP Cookies Sessions Dealing with XForms Handling file uploads Using remote files Connection handling Persistent Database Connections Safe Mode Command line usage Garbage Collection DTrace Dynamic Tracing Function Reference Affecting PHP's Behaviour Audio Formats Manipulation Authentication Services Command Line Specific Extensions Compression and Archive Extensions Credit Card Processing Cryptography Extensions Database Extensions Date and Time Related Extensions File System Related Extensions Human Language and Character Encoding Support Image Processing and Generation Mail Related Extensions Mathematical Extensions Non-Text MIME Output Process Control Extensions Other Basic Extensions Other Services Search Engine Extensions Server Specific Extensions Session Extensions Text Processing Variable and Type Related Extensions Web Services Windows Only Extensions XML Manipulation GUI Extensions Keyboard Shortcuts? This help j Next menu item k Previous menu item g p Previous man page g n Next man page G Scroll to bottom g g Scroll to top g h Goto homepage g s Goto search(current page) \/ Focus search box DOMDocument::__construct \u00bb \u00ab DOMComment::__construct Manual do PHP Refer\u00eancia das Fun\u00e7\u00f5es Manipula\u00e7\u00e3o de XML DOM Change language: EnglishBrazilian PortugueseChinese (Simplified)FrenchGermanJapaneseRomanianRussianSpanishTurkishOther Edit Report a Bug The DOMDocument class (PHP 5, PHP 7) Introdu\u00e7\u00e3o Represents an entire HTML or XML document; serves as the root of the document tree. Sinopse da classe DOMDocument extends DOMNode { \/* Propriedades *\/ readonly public string $actualEncoding ; readonly public DOMConfiguration $config ; readonly public DOMDocumentType $doctype ; readonly public DOMElement $documentElement ; public string $documentURI ; public string $encoding ; public bool $formatOutput ; readonly public DOMImplementation $implementation ; public bool $preserveWhiteSpace = true ; public bool $recover ; public bool $resolveExternals ; public bool $standalone ; public bool $strictErrorChecking = true ; public bool $substituteEntities ; public bool $validateOnParse = false ; public string $version ; readonly public string $xmlEncoding ; public bool $xmlStandalone ; public string $xmlVersion ; \/* M\u00e9todos *\/ public __construct ([ string $version [, string $encoding ]] ) public DOMAttr createAttribute ( string $name ) public DOMAttr createAttributeNS ( string $namespaceURI , string $qualifiedName ) public DOMCDATASection createCDATASection ( string $data ) public DOMComment createComment ( string $data ) public DOMDocumentFragment createDocumentFragment ( void ) public DOMElement createElement ( string $name [, string $value ] ) public DOMElement createElementNS ( string $namespaceURI , string $qualifiedName [, string $value ] ) public DOMEntityReference createEntityReference ( string $name ) public DOMProcessingInstruction createProcessingInstruction ( string $target [, string $data ] ) public DOMText createTextNode ( string $content ) public DOMElement getElementById ( string $elementId ) public DOMNodeList getElementsByTagName ( string $name ) public DOMNodeList getElementsByTagNameNS ( string $namespaceURI , string $localName ) public DOMNode importNode ( DOMNode $importedNode [, bool $deep ] ) public mixed load ( string $filename [, int $options = 0 ] ) public bool loadHTML ( string $source [, int $options = 0 ] ) public bool loadHTMLFile ( string $filename [, int $options = 0 ] ) public mixed loadXML ( string $source [, int $options = 0 ] ) public void normalizeDocument ( void ) public bool registerNodeClass ( string $baseclass , string $extendedclass ) public bool relaxNGValidate ( string $filename ) public bool relaxNGValidateSource ( string $source ) public int save ( string $filename [, int $options ] ) public string saveHTML ([ DOMNode $node = NULL ] ) public int saveHTMLFile ( string $filename ) public string saveXML ([ DOMNode $node [, int $options ]] ) public bool schemaValidate ( string $filename [, int $flags ] ) public bool schemaValidateSource ( string $source [, int $flags ] ) public bool validate ( void ) public int xinclude ([ int $options ] ) \/* M\u00e9todos herdados *\/ public DOMNode DOMNode::appendChild ( DOMNode $newnode ) public string DOMNode::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) public int DOMNode::C14NFile ( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) public DOMNode DOMNode::cloneNode ([ bool $deep ] ) public int DOMNode::getLineNo ( void ) public string DOMNode::getNodePath ( void ) public bool DOMNode::hasAttributes ( void ) public bool DOMNode::hasChildNodes ( void ) public DOMNode DOMNode::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) public bool DOMNode::isDefaultNamespace ( string $namespaceURI ) public bool DOMNode::isSameNode ( DOMNode $node ) public bool DOMNode::isSupported ( string $feature , string $version ) public string DOMNode::lookupNamespaceURI ( string $prefix ) public string DOMNode::lookupPrefix ( string $namespaceURI ) public void DOMNode::normalize ( void ) public DOMNode DOMNode::removeChild ( DOMNode $oldnode ) public DOMNode DOMNode::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) } Propriedades actualEncoding Deprecated. Actual encoding of the document, is a readonly equivalent to encoding. config Deprecated. Configuration used when DOMDocument::normalizeDocument() is invoked. doctype The Document Type Declaration associated with this document. documentElement This is a convenience attribute that allows direct access to the child node that is the document element of the document. documentURI The location of the document or NULL if undefined. encoding Encoding of the document, as specified by the XML declaration. This attribute is not present in the final DOM Level 3 specification, but is the only way of manipulating XML document encoding in this implementation. formatOutput Nicely formats output with indentation and extra space. implementation The DOMImplementation object that handles this document. preserveWhiteSpace Do not remove redundant white space. Default to TRUE. recover Proprietary. Enables recovery mode, i.e. trying to parse non-well formed documents. This attribute is not part of the DOM specification and is specific to libxml. resolveExternals Set it to TRUE to load external entities from a doctype declaration. This is useful for including character entities in your XML document. standalone Deprecated. Whether or not the document is standalone, as specified by the XML declaration, corresponds to xmlStandalone. strictErrorChecking Throws DOMException on errors. Default to TRUE. substituteEntities Proprietary. Whether or not to substitute entities. This attribute is not part of the DOM specification and is specific to libxml. validateOnParse Loads and validates against the DTD. Default to FALSE. version Deprecated. Version of XML, corresponds to xmlVersion. xmlEncoding An attribute specifying, as part of the XML declaration, the encoding of this document. This is NULL when unspecified or when it is not known, such as when the Document was created in memory. xmlStandalone An attribute specifying, as part of the XML declaration, whether this document is standalone. This is FALSE when unspecified. xmlVersion An attribute specifying, as part of the XML declaration, the version number of this document. If there is no declaration and if this document supports the \"XML\" feature, the value is \"1.0\". Notas Nota: The DOM extension uses UTF-8 encoding. Use utf8_encode() and utf8_decode() to work with texts in ISO-8859-1 encoding or Iconv for other encodings. Veja Tamb\u00e9m \u00bb\u00a0W3C specification for Document \u00cdndiceDOMDocument::__construct \u2014 Creates a new DOMDocument objectDOMDocument::createAttribute \u2014 Create new attributeDOMDocument::createAttributeNS \u2014 Create new attribute node with an associated namespaceDOMDocument::createCDATASection \u2014 Create new cdata nodeDOMDocument::createComment \u2014 Create new comment nodeDOMDocument::createDocumentFragment \u2014 Create new document fragmentDOMDocument::createElement \u2014 Create new element nodeDOMDocument::createElementNS \u2014 Create new element node with an associated namespaceDOMDocument::createEntityReference \u2014 Create new entity reference nodeDOMDocument::createProcessingInstruction \u2014 Creates new PI nodeDOMDocument::createTextNode \u2014 Create new text nodeDOMDocument::getElementById \u2014 Searches for an element with a certain idDOMDocument::getElementsByTagName \u2014 Searches for all elements with given local tag nameDOMDocument::getElementsByTagNameNS \u2014 Searches for all elements with given tag name in specified namespaceDOMDocument::importNode \u2014 Import node into current documentDOMDocument::load \u2014 Load XML from a fileDOMDocument::loadHTML \u2014 Load HTML from a stringDOMDocument::loadHTMLFile \u2014 Load HTML from a fileDOMDocument::loadXML \u2014 Load XML from a stringDOMDocument::normalizeDocument \u2014 Normalizes the documentDOMDocument::registerNodeClass \u2014 Register extended class used to create base node typeDOMDocument::relaxNGValidate \u2014 Performs relaxNG validation on the documentDOMDocument::relaxNGValidateSource \u2014 Performs relaxNG validation on the documentDOMDocument::save \u2014 Dumps the internal XML tree back into a fileDOMDocument::saveHTML \u2014 Dumps the internal document into a string using HTML formattingDOMDocument::saveHTMLFile \u2014 Dumps the internal document into a file using HTML formattingDOMDocument::saveXML \u2014 Dumps the internal XML tree back into a stringDOMDocument::schemaValidate \u2014 Validates a document based on a schemaDOMDocument::schemaValidateSource \u2014 Validates a document based on a schemaDOMDocument::validate \u2014 Validates the document based on its DTDDOMDocument::xinclude \u2014 Substitutes XIncludes in a DOMDocument Object add a note User Contributed Notes 15 notes up down 63 Fernando H \u00b69 years ago Showing a quick example of how to use this class, just so that new users can get a quick start without having to figure it all out by themself. ( At the day of posting, this documentation just got added and is lacking examples. )Output:\u00a0 \u00a0 \u00a0 The ninth symphony\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The last symphony composed by Ludwig van Beethoven.\u00a0 \u00a0 \u00a0 \u00a0 Highway BluesIf you want your PHP->DOM code to run under the .xml extension, you should set your webserver up to run the .xml extension with PHP ( Refer to the installation\/configuration configuration for PHP on how to do this ).Note that this:is NOT the same as this:although this will work: up down 14 jay at jaygilford dot com \u00b67 years ago Here's a small function I wrote to get all page links using the DOMDocument which will hopefully be of use to others\r","tags":"","url":"http:\/\/php.net\/manual\/pt_BR\/class.domdocument.php"},{"title":"","text":"","tags":"","url":"http:\/\/phpmasters.net\/"},{"title":"Tipue Search, a jQuery site search engine","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getScript() Categories: Ajax > Shorthand Methods jQuery.getScript( url [, success ] )Returns: jqXHR Description: Load a JavaScript file from the server using a GET HTTP request, then execute it. version added: 1.0jQuery.getScript( url [, success ] ) url Type: String A string containing the URL to which the request is sent. success Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 $.ajax({ url: url, dataType: \"script\", success: success}); The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page. Success Callback The callback is fired once the script has been loaded but not necessarily executed. Scripts are included and run by referencing the file name: 1 2 3 4 5 6 $.getScript( \"ajax\/test.js\", function( data, textStatus, jqxhr ) { console.log( data ); \/\/ Data returned console.log( textStatus ); \/\/ Success console.log( jqxhr.status ); \/\/ 200 console.log( \"Load was performed.\" );}); Handling Errors As of jQuery 1.5, you may use .fail() to account for errors: 1 2 3 4 5 6 7 $.getScript( \"ajax\/test.js\" ) .done(function( script, textStatus ) { console.log( textStatus ); }) .fail(function( jqxhr, settings, exception ) { $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );}); Prior to jQuery 1.5, the global .ajaxError() callback event had to be used in order to handle $.getScript() errors: 1 2 3 4 5 $( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) { if ( settings.dataType == \"script\" ) { $( this ).text( \"Triggered ajaxError handler.\" ); }}); Caching Responses By default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using $.ajaxSetup(): 1 2 3 $.ajaxSetup({ cache: true}); Alternatively, you could define a new method that uses the more flexible $.ajax() method. Examples: Define a $.cachedScript() method that allows fetching a cached script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 jQuery.cachedScript = function( url, options ) { \/\/ Allow user to set any option except for dataType, cache, and url options = $.extend( options || {}, { dataType: \"script\", cache: true, url: url }); \/\/ Use $.ajax() since it is more flexible than $.getScript \/\/ Return the jqXHR object so we can chain callbacks return jQuery.ajax( options );}; \/\/ Usage$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) { console.log( textStatus );}); Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 jQuery.getScript demo .block { background-color: blue; width: 150px; height: 70px; margin: 10px; } &raquo; Run var url = \"https:\/\/code.jquery.com\/color\/jquery.color.js\";$.getScript( url, function() { $( \"#go\" ).click(function() { $( \".block\" ) .animate({ backgroundColor: \"rgb(255, 180, 180)\" }, 1000 ) .delay( 500 ) .animate({ backgroundColor: \"olive\" }, 1000 ) .delay( 500\u00a0) .animate({ backgroundColor: \"#00f\" }, 1000 ); });}); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); Toggle navigation CodeIgniter Download Documentation Community Contribute CodeIgniter Rocks CodeIgniter is a powerful PHP framework with a very small footprint, built for developers who need a simple and elegant toolkit to create full-featured web applications. Star 14,705 Fork 6,953 @CodeIgniter Download The latest is Version 3.1.5 Read the Manual Clear documentation View the Forums Get Support & Discuss Things On GitHub Fix Bugs or Add Features Recent News 2017.07.11 Project Update - 2017.07.10 2017.06.19 CodeIgniter 3.1.5 Released 2017.03.20 CodeIgniter 3.1.4 released 2017.03.09 BCIT newsletter story about CodeIgniter 2017.01.20 Planned Server Downtime Jan 21, 2017 Active Forum Threads 2017.07.11 form_input don't output html since ci3 upgrade 2017.07.11 Community Auth : Login Error 2017.07.11 Get data from cookie on subdomain with Codeigniter 2017.07.11 local to gmt function doesn't work 2017.07.11 REST API request does not reply until shell script is done Why CodeIgniter? Framework with a small footprint CodeIgniter 3 has a 2MB download, including the user guide. Simple solutions over complexity CodeIgniter encourages MVC, but does not force it on you. Clear documentation The CodeIgniter User Guide comes with the download. It contains an introduction, tutorial, a number of \"how to\" guides, and then reference documentation for the components that make up the framework. Exceptional performance CodeIgniter consistently outperforms most of its competitors. Strong Security We take security seriously, with built-in protection against CSRF and XSS attacks. Nearly zero configuration Much of the CodeIgniter configuration is done by convention, for instance putting models in a \"models\" folder. There are still a number of configuration options available, through scripts in the \"config\" folder. Policies The Fine Print About CodeIgniter was created by EllisLab and is now a project of the British Columbia Institute of Technology !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = \/^http:\/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + ':\/\/platform.twitter.com\/widgets.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'twitter-wjs');\/* -1&&m>28){j=28+s;s='';if(j *\/ Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 CodeIgniter4 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 \u00a0 CodeIgniter4 Docs \u00bb CodeIgniter4 User Guide CodeIgniter4 User Guide\u00b6 License Agreement Change Log Welcome Installation Tutorial CodeIgniter4 Overview General Topics Library Reference Database Reference Helper Reference Contributing to CodeIgniter Welcome\u00b6 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance Installation\u00b6 InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server Tutorial\u00b6 TutorialStatic pages News section Create news items Conclusion CodeIgniter4 Overview\u00b6 CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General Topics\u00b6 General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library Reference\u00b6 Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database Reference\u00b6 Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events Helper Reference\u00b6 HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniter\u00b6 Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 Next \u00a9 Copyright 2014 - 2017, British Columbia Institute of Technology. Last updated on Jul 05, 2017. Built with Sphinx using a theme provided by Read the Docs. var DOCUMENTATION_OPTIONS = { URL_ROOT:'.\/', VERSION:'4.0.0-dev', COLLAPSE_INDEX:false, FILE_SUFFIX:'.html', HAS_SOURCE: false }; jQuery(function () { SphinxRtdTheme.StickyNav.enable(); }); Skip Quicknav About Debian Getting Debian Support Developers' Corner \u00a0 Download Debian 9.0(64-bit PC Network installer) Debian Debian is a free operating system (OS) for your computer. An operating system is the set of basic programs and utilities that make your computer run. Debian provides more than a pure OS: it comes with over 51000 packages, precompiled software bundled up in a nice format for easy installation on your machine. Read more... About Social Contract Code of Conduct Free Software Partners Donations Contact Us Help Debian Getting Debian Network install CD\/USB ISO images CD vendors Pre-installed Pure Blends Debian Packages Developers' Corner News Project News Events Documentation Release Info Installation manual Debian Books Debian Wiki Support Debian International Security Information Bug reports Mailing Lists Mailing List Archives Ports\/Architectures Miscellaneous Site map Search The Debian Blog The latest stable release of Debian is 9.0. The last update to this release was made on June 17th, 2017. Read more about available versions of Debian. Getting Started If you'd like to start using Debian, you can easily obtain a copy, and then follow the installation instructions to install it. If you're upgrading to the latest stable release from a previous version, please read the release notes before proceeding. To get help in using or setting up Debian, see our documentation and support pages. Users that speak languages other than English should check the international section. People who use systems other than Intel x86 should check the ports section. RSS News [18 Jun 2017] Debian Edu \/ Skolelinux Stretch \u2014 a complete Linux solution for your school[17 Jun 2017] Debian 9 Stretch released[06 May 2017] Updated Debian 8: 8.8 released[25 Apr 2017] Shutting down public FTP services[17 Apr 2017] Statement concerning the arrest of Dmitry Bogatov[14 Jan 2017] Updated Debian 8: 8.7 released For older news items see the News Page. If you would like to receive mail whenever new Debian news comes out, subscribe to the debian-announce mailing list. RSS Security Advisories [09 Jul 2017] DSA-3905 xorg-server - security update [08 Jul 2017] DSA-3904 bind9 - security update [05 Jul 2017] DSA-3903 tiff - security update [05 Jul 2017] DSA-3902 jabberd2 - security update [02 Jul 2017] DSA-3901 libgcrypt20 - security update [27 Jun 2017] DSA-3900 openvpn - security update [27 Jun 2017] DSA-3899 vlc - security update [25 Jun 2017] DSA-3898 expat - security update [24 Jun 2017] DSA-3897 drupal7 - security update [22 Jun 2017] DSA-3896 apache2 - security update [22 Jun 2017] DSA-3895 flatpak - security update [22 Jun 2017] DSA-3894 graphite2 - security update [22 Jun 2017] DSA-3893 jython - security update [22 Jun 2017] DSA-3892 tomcat7 - security update [22 Jun 2017] DSA-3891 tomcat8 - security update For older security advisories see the Security Page. If you would like to receive security advisories as soon as they're announced, subscribe to the debian-security-announce mailing list. This page is also available in the following languages: \u0639\u0631\u0628\u064a\u0629\u00a0(Arabiya) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u00a0(B\u0259lgarski) catal\u00e0 \u010desky dansk Deutsch \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\u00a0(Ellinika) espa\u00f1ol Esperanto \u0641\u0627\u0631\u0633\u06cc\u00a0(Farsi) fran\u00e7ais Galego \ud55c\uad6d\uc5b4\u00a0(Hangul) \u0540\u0561\u0575\u0565\u0580\u0565\u0576\u00a0(hayeren) hrvatski Indonesia Italiano \u05e2\u05d1\u05e8\u05d9\u05ea\u00a0(ivrit) Lietuvi\u0173 magyar Nederlands \u65e5\u672c\u8a9e\u00a0(Nihongo) norsk\u00a0(bokm\u00e5l) polski Portugu\u00eas rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439\u00a0(Russkij) slovensky suomi svenska \u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u00a0(Tamil) Ti\u1ebfng Vi\u1ec7t T\u00fcrk\u00e7e \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u00a0(ukrajins'ka) \u4e2d\u6587(\u7b80) \u4e2d\u6587(HK) \u4e2d\u6587(\u7e41) How to set the default document language To report a problem with the web site, e-mail our publicly archived mailing list debian-www@lists.debian.org. For other contact information, see the Debian contact page. Web site source code is available. Last Modified: Thu, Jun 8 15:25:09 UTC 2017 Copyright \u00a9 1997-2017 SPI and others; See license terms Debian is a registered trademark of Software in the Public Interest, Inc. Dev Home minFraud GeoIP FAQ Main Site Site Map English \u7b80\u4f53\u4e2d\u6587 (Chinese (Simplified)) Search\r Search\r Table of ContentsBinary DatabasesMaxMind Supported APIsThird-Party APIsUpdating Downloadable DatabasesCSV DatabasesDownload LimitsLinksSystem Status \/* Skip to content Features Business Explore Marketplace Pricing \/dashboard Sign in or Sign up Built for developers GitHub is a development platform inspired by the way you work. From open source to business, you can host and review code, manage projects, and build software alongside millions of other developers. Username Email Password Use at least one letter, one numeral, and seven characters. Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. Sign up for GitHub teams GitHub for teams A better way to work together GitHub brings teams together to work through problems, move ideas forward, and learn from each other along the way. Sign up your team Write better code Collaboration makes perfect. The conversations and code reviews that happen in Pull Requests help your team share the weight of your work and improve the software you build. Learn about code review on GitHub Manage your chaos Take a deep breath. On GitHub, project management happens in Issues and Projects, right alongside your code. All you have to do is mention a teammate to get them involved. Learn about project management on GitHub security-admin Security and administration Boxes? Check. We worried about your administrative and security needs so you don\u2019t have to. From flexible hosting to authentication options, GitHub can help you meet your team\u2019s requirements. Learn about GitHub for Business Code security Prevent problems before they happen. Protected branches, signed commits, and required status checks protect your work and help you maintain a high standard for your code. Access controlled Encourage teams to work together while limiting access to those who need it with granular permissions and authentication through SAML\/SSO and LDAP. Hosted where you need it Securely and reliably host your work on GitHub.com. Or, deploy GitHub Enterprise on your own servers or in a private cloud using Amazon Web Services, Azure or Google Cloud Platform. integrations Integrations Build on GitHub Customize your process with GitHub apps and an intuitive API. Integrate the tools you already use or discover new favorites to create a happier, more efficient way of working. Learn about integrations Sometimes, there\u2019s more than one tool for the job. Why not try something new? Browse GitHub Marketplace open-source Community Welcome home, developers GitHub is home to the world\u2019s largest community of developers and their\u00a0projects... Ariya Hidayat PhantomJS maintainer Russell Keith-Magee PyBee maintainer MailChimp Marketing customer Kris Nova Kubernetes\/kops maintainer Evan You Vue maintainer Mapbox Software customer Jess Frazelle Kubernetes, previously Docker maintainer ...whether you\u2019re making your first commit or sending a Rover to Mars, there\u2019s room for you here, too. 62M repositories worldwide GitHub\u2019s users create and maintain influential technologies alongside the world's largest open source\u00a0community. 22M developers worldwide Developers use GitHub for personal projects, from experimenting with new programming languages to hosting their life\u2019s work. 117K businesses worldwide Businesses of all sizes use GitHub to support their development process and to securely build software. More than a million teams use GitHub Get started for free \u2014 join the millions of developers already using GitHub to share their code, work together, and build amazing things. Username Email Password Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. \u00a9 2017 Features Code review Project management Community Documentation Code hosting Platform Atom Electron GitHub Desktop Developers Community Personal Open source For Business For Education Sponsorships Company About Blog Customers Careers Press Shop Resources Contact GitHub Help Status Terms Privacy Security Training You can't perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Transform your plain text into static\u00a0websites and\u00a0blogs. Simple No more databases, comment moderation, or pesky updates to install\u2014just your content. How Jekyll works \u2192 Static Markdown (or Textile), Liquid, HTML & CSS go in. Static sites come out ready for deployment. Jekyll template guide \u2192 Blog-aware Permalinks, categories, pages, posts, and custom layouts are all first-class citizens here. Migrate your blog \u2192 Get up and running in\u00a0seconds. Quick-start Instructions ~ $ gem install jekyll bundler ~ $ jekyll new my-awesome-site ~ $ cd my-awesome-site ~\/my-awesome-site $ bundle exec jekyll serve # => Now browse to http:\/\/localhost:4000 Free hosting with GitHub Pages Sick of dealing with hosting companies? GitHub Pages are powered by Jekyll, so you can easily deploy your site using GitHub for free\u2014custom domain name and\u00a0all. Learn more about GitHub Pages \u2192 The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Navigate the docs\u2026WelcomeQuick-start guideInstallationJekyll on WindowsBasic UsageDirectory structureConfigurationFront MatterWriting postsWorking with draftsCreating pagesStatic FilesVariablesCollectionsData FilesAssetsBlog migrationsTemplatesIncludesPermalinksPaginationPluginsThemesExtrasGitHub PagesDeployment methodsContinuous IntegrationTroubleshootingSites using JekyllResourcesUpgrading from 0.x to 2.xUpgrading from 2.x to 3.xContributingMaintaining JekyllCode of ConductHistory \u00a0Improve this page Templates Jekyll uses the Liquid templating language to process templates. All of the standard Liquid tags and filters are supported. Jekyll even adds a few handy filters and tags of its own to make common tasks easier. Filters Description Filter and Output Relative URL Prepend the baseurl value to the input. Useful if your site is hosted at a subpath rather than the root of the domain. {{ \"\/assets\/style.css\" | relative_url }} \/my-baseurl\/assets\/style.css Absolute URL Prepend the url and baseurl value to the input. {{ \"\/assets\/style.css\" | absolute_url }} http:\/\/example.com\/my-baseurl\/assets\/style.css Date to XML Schema Convert a Date into XML Schema (ISO 8601) format. {{ site.time | date_to_xmlschema }} 2008-11-07T13:07:54-08:00 Date to RFC-822 Format Convert a Date into the RFC-822 format used for RSS feeds. {{ site.time | date_to_rfc822 }} Mon, 07 Nov 2008 13:07:54 -0800 Date to String Convert a date to short format. {{ site.time | date_to_string }} 07 Nov 2008 Date to Long String Format a date to long format. {{ site.time | date_to_long_string }} 07 November 2008 Where Select all the objects in an array where the key has the given value. {{ site.members | where:\"graduation_year\",\"2014\" }} Where Expression Select all the objects in an array where the expression is true. Jekyll v3.2.0 & later. {{ site.members | where_exp:\"item\", \"item.graduation_year == 2014\" }} {{ site.members | where_exp:\"item\", \"item.graduation_year < 2014\" }} {{ site.members | where_exp:\"item\", \"item.projects contains 'foo'\" }} Group By Group an array's items by a given property. {{ site.members | group_by:\"graduation_year\" }} [{\"name\"=>\"2013\", \"items\"=>[...]}, {\"name\"=>\"2014\", \"items\"=>[...]}] Group By Expression Group an array's items using a Liquid expression. {{ site.members | group_by_exp:\"item\", \"item.graduation_year | truncate: 3, \\\"\\\"\" }} [{\"name\"=>\"201...\", \"items\"=>[...]}, {\"name\"=>\"200...\", \"items\"=>[...]}] XML Escape Escape some text for use in XML. {{ page.content | xml_escape }} CGI Escape CGI escape a string for use in a URL. Replaces any special characters with appropriate %XX replacements. CGI escape normally replaces a space with a plus + sign. {{ \"foo, bar; baz?\" | cgi_escape }} foo%2C+bar%3B+baz%3F URI Escape Percent encodes any special characters in a URI. URI escape normally replaces a space with %20. Reserved characters will not be escaped. {{ \"http:\/\/foo.com\/?q=foo, \\bar?\" | uri_escape }} http:\/\/foo.com\/?q=foo,%20%5Cbar? Number of Words Count the number of words in some text. {{ page.content | number_of_words }} 1337 Array to Sentence Convert an array into a sentence. Useful for listing tags. Optional argument for connector. {{ page.tags | array_to_sentence_string }} foo, bar, and baz {{ page.tags | array_to_sentence_string: 'or' }} foo, bar, or baz Markdownify Convert a Markdown-formatted string into HTML. {{ page.excerpt | markdownify }} Smartify Convert \"quotes\" into \u201csmart quotes.\u201d {{ page.title | smartify }} Converting Sass\/SCSS Convert a Sass- or SCSS-formatted string into CSS. {{ some_scss | scssify }} {{ some_sass | sassify }} Slugify Convert a string into a lowercase URL \"slug\". See below for options. {{ \"The _config.yml file\" | slugify }} the-config-yml-file {{ \"The _config.yml file\" | slugify: 'pretty' }} the-_config.yml-file Data To JSON Convert Hash or Array to JSON. {{ site.data.projects | jsonify }} Normalize Whitespace Replace any occurrence of whitespace with a single space. {{ \"a \\n b\" | normalize_whitespace }} Sort Sort an array. Optional arguments for hashes: 1.\u00a0property name 2.\u00a0nils order (first or last). {{ page.tags | sort }} {{ site.posts | sort: 'author' }} {{ site.pages | sort: 'title', 'last' }} Sample Pick a random value from an array. Optional: pick multiple values. {{ site.pages | sample }} {{ site.pages | sample:2 }} To Integer Convert a string or boolean to integer. {{ some_var | to_integer }} Array Filters Push, pop, shift, and unshift elements from an Array. These are NON-DESTRUCTIVE, i.e. they do not mutate the array, but rather make a copy and mutate that. {{ page.tags | push: 'Spokane' }} ['Seattle', 'Tacoma', 'Spokane'] {{ page.tags | pop }} ['Seattle'] {{ page.tags | shift }} ['Tacoma'] {{ page.tags | unshift: \"Olympia\" }} ['Olympia', 'Seattle', 'Tacoma'] Inspect Convert an object into its String representation for debugging. {{ some_var | inspect }} Options for the slugify filter The slugify filter accepts an option, each specifying what to filter. The default is default. They are as follows (with what they filter): none: no characters raw: spaces default: spaces and non-alphanumeric characters pretty: spaces and non-alphanumeric characters except for ._~!$&'()+,;=@ Tags Includes If you have small page snippets that you want to include in multiple places on your site, save the snippets as include files and insert them where required, by using the include tag: {% include footer.html %} Jekyll expects all include files to be placed in an _includes directory at the root of your source directory. In the above example, this will embed the contents of _includes\/footer.html into the calling file. For more advanced information on using includes, see Includes. Code snippet highlighting Jekyll has built in support for syntax highlighting of over 60 languages thanks to Rouge. Rouge is the default highlighter in Jekyll 3 and above. To use it in Jekyll 2, set highlighter to rouge and ensure the rouge gem is installed properly. Alternatively, you can use Pygments to highlight your code snippets. To use Pygments, you must have Python installed on your system, have the pygments.rb gem installed and set highlighter to pygments in your site\u2019s configuration file. Pygments supports over 100 languages To render a code block with syntax highlighting, surround your code as follows: {% highlight ruby %} def foo puts 'foo' end {% endhighlight %} The argument to the highlight tag (ruby in the example above) is the language identifier. To find the appropriate identifier to use for the language you want to highlight, look for the \u201cshort name\u201d on the Rouge wiki or the Pygments\u2019 Lexers page. Line numbers There is a second argument to highlight called linenos that is optional. Including the linenos argument will force the highlighted code to include line numbers. For instance, the following code block would include line numbers next to each line: {% highlight ruby linenos %} def foo puts 'foo' end {% endhighlight %} Stylesheets for syntax highlighting In order for the highlighting to show up, you\u2019ll need to include a highlighting stylesheet. For an example stylesheet you can look at syntax.css. These are the same styles as used by GitHub and you are free to use them for your own site. If you use linenos, you might want to include an additional CSS class definition for the .lineno class in syntax.css to distinguish the line numbers from the highlighted code. Gist Use the gist tag to easily embed a GitHub Gist onto your site. This works with public or secret gists: {% gist parkr\/931c1c8d465a04042403 %} You may also optionally specify the filename in the gist to display: {% gist parkr\/931c1c8d465a04042403 jekyll-private-gist.markdown %} To use the gist tag, you\u2019ll need to add the jekyll-gist gem to your project. Links Linking to pages To link to a post, a page, collection item, or file, the link tag will generate the correct permalink URL for the path you specify. For example, if you use the link tag to link to mypage.html, even if you change your permalink style to include the file extension or omit it, the URL formed by the link tag will always be valid. You must include the file\u2019s original extension when using the link tag. Here are some examples: {{ site.baseurl }}{% link _collection\/name-of-document.md %} {{ site.baseurl }}{% link _posts\/2016-07-26-name-of-post.md %} {{ site.baseurl }}{% link news\/index.html %} {{ site.baseurl }}{% link \/assets\/files\/doc.pdf %} You can also use the link tag to create a link in Markdown as follows: [Link to a document]({{ site.baseurl }}{% link _collection\/name-of-document.md %}) [Link to a post]({{ site.baseurl }}{% link _posts\/2016-07-26-name-of-post.md %}) [Link to a page]({{ site.baseurl }}{% link news\/index.html %}) [Link to a file]({{ site.baseurl }}{% link \/assets\/files\/doc.pdf %}) (Including {{ site.baseurl }} is optional \u2014 it depends on whether you want to preface the page URL with the baseurl value.) The path to the post, page, or collection is defined as the path relative to the root directory (where your config file is) to the file, not the path from your existing page to the other page. For example, suppose you\u2019re creating a link in page_a.md (stored in pages\/folder1\/folder2) to page_b.md (stored in pages\/folder1). Your path in the link would not be ..\/page_b.html. Instead, it would be \/pages\/folder1\/page_b.md. If you\u2019re unsure of the path, add {{ page.path }} to the page and it will display the path. One major benefit of using the link tag is link validation. If the link doesn\u2019t exist, Jekyll won\u2019t build your site. This is a good thing, as it will alert you to a broken link so you can fix it (rather than allowing you to build and deploy a site with broken links). Note you cannot add filters to link tags. For example, you cannot append a string using Liquid filters, such as {% link mypage.html | append: \"#section1\" %} . To link to sections on a page, you will need to use regular HTML or Markdown linking techniques. Linking to posts If you want to include a link to a post on your site, the post_url tag will generate the correct permalink URL for the post you specify. {{ site.baseurl }}{% post_url 2010-07-21-name-of-post %} If you organize your posts in subdirectories, you need to include subdirectory path to the post: {{ site.baseurl }}{% post_url \/subdir\/2010-07-21-name-of-post %} There is no need to include the file extension when using the post_url tag. You can also use this tag to create a link to a post in Markdown as follows: [Name of Link]({{ site.baseurl }}{% post_url 2010-07-21-name-of-post %}) Back Next Getting Started Welcome Quick-start guide Installation Jekyll on Windows Basic Usage Directory structure Configuration Your Content Front Matter Writing posts Working with drafts Creating pages Static Files Variables Collections Data Files Assets Blog migrations Customization Templates Includes Permalinks Pagination Plugins Themes Extras Deployment GitHub Pages Deployment methods Continuous Integration Miscellaneous Troubleshooting Sites using Jekyll Resources Upgrading from 0.x to 2.x Upgrading from 2.x to 3.x Meta Contributing Maintaining Jekyll Code of Conduct History The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level Natan Felles Creative Webmaster \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview'); Toggle navigation Natan Felles Blog Servi\u00c3\u00a7os Mapa do Site Natan Felles Creative Webmaster In\u00c3\u00adcio Blog Apt-Cacher-NG: Proxy de Cache de Pacotes Apt-Cacher-NG: Proxy de Cache de Pacotes Blog \u00c2\u00b7 desenvolvimento 23.09.2016 Apresenta\u00c3\u00a7\u00c3\u00a3o Apt-Cacher NG \u00c3\u00a9 um proxy de cache para pacotes de software baixados por mecanismos de distribui\u00c3\u00a7\u00c3\u00a3o em sistemas Unix\/Linux de servidores espelhos acess\u00c3\u00adveis via HTTP. Entenda melhor Sabe-se que \u00c3\u00a9 altamente recomend\u00c3\u00a1vel manter um sistema operacional sempre atualizado por devidos fatores. Em locais onde h\u00c3\u00a1 v\u00c3\u00a1rios computadores pode haver um enorme gasto do tr\u00c3\u00a1fego de banda ou congestionamento da conex\u00c3\u00a3o com a internet para manter todos atualizados. Algumas vezes, utilizando distribui\u00c3\u00a7\u00c3\u00b5es rolling release, que buscam sempre possuir as \u00c3\u00baltimas vers\u00c3\u00b5es de softwares, j\u00c3\u00a1 cheguei a precisar baixar mais de 200 MB em um \u00c3\u00banico update. Agora, imagine isso em uma empresa com 20 m\u00c3\u00a1quinas. Daria cerca de 4 GB de download para atualizar todas. A solu\u00c3\u00a7\u00c3\u00a3o mais simples \u00c3\u00a9 criar um servidor proxy de cache, ou seja, todos os pacotes baixados ficar\u00c3\u00a3o armazenados nele. E ent\u00c3\u00a3o todas as outras m\u00c3\u00a1quinas ser\u00c3\u00a3o atualizadas atrav\u00c3\u00a9s deste servidor proxy, intermedi\u00c3\u00a1rio, \u00c3\u00banico respons\u00c3\u00a1vel por baixar atualiza\u00c3\u00a7\u00c3\u00b5es externas e repass\u00c3\u00a1-las para todas as m\u00c3\u00a1quinas da rede local. Toda vez que uma m\u00c3\u00a1quina for atualizada ocorrer\u00c3\u00a1 o seguinte processo: A m\u00c3\u00a1quina conecta com o proxy e questiona se h\u00c3\u00a1 atualiza\u00c3\u00a7\u00c3\u00b5es para ela. O proxy conecta no reposit\u00c3\u00b3rio oficial e questiona por essas atualiza\u00c3\u00a7\u00c3\u00b5es, fazendo uma compara\u00c3\u00a7\u00c3\u00a3o entre as vers\u00c3\u00b5es de seus pacotes com os pacotes externos. Se houver novos pacotes, o proxy baixa os pacotes e, se houver vers\u00c3\u00a3o maior do que os da m\u00c3\u00a1quina, os retransmite para ela. Se n\u00c3\u00a3o houver novos pacotes, mas eles tiverem vers\u00c3\u00a3o maior do que os da m\u00c3\u00a1quina, o proxy apenas retransmite os pacotes para a m\u00c3\u00a1quina. Por fim, o proxy se atualizar\u00c3\u00a1 com os reposit\u00c3\u00b3rios externos e a m\u00c3\u00a1quina se atualizar\u00c3\u00a1 com o proxy. Certo. Chega de teoria e vamos ver como podemos fazer isso acontecer. Instala\u00c3\u00a7\u00c3\u00a3o do Servidor Proxy de Cache Voc\u00c3\u00aa precisar\u00c3\u00a1 de uma m\u00c3\u00a1quina para ser o servidor proxy de cache. Recomendo que utilize um sistema sem desktop, mas \u00c3\u00a9 indiferente. No servidor, vamos instalar o Apt-Cacher-NG: sudo apt install apt-cacher-ng O Apt-Cacher-NG, por padr\u00c3\u00a3o, roda na porta 3142 e \u00c3\u00a9 acess\u00c3\u00advel via web, onde possui uma p\u00c3\u00a1gina explicando como configurar outras m\u00c3\u00a1quinas para us\u00c3\u00a1-lo, manual e estat\u00c3\u00adsticas. Voc\u00c3\u00aa pode entrar diretamente pelo IP do servidor ou hostname, como no exemplo: http:\/\/192.168.1.100:3142 Configura\u00c3\u00a7\u00c3\u00a3o dos Clientes Estando com o servidor proxy de cache instalado, vamos ver como configurar as m\u00c3\u00a1quinas clientes: Em cada cliente, crie um arquivo em \/etc\/apt\/apt.conf e adicione a linha abaixo, substituindo o IP pelo do seu servidor: Acquire::http::Proxy \"http:\/\/192.168.1.100:3142\"; Feito! Salve e feche o arquivo e atualize a m\u00c3\u00a1quina cliente: sudo apt update Ao atualizar a m\u00c3\u00a1quina, automaticamente o proxy ser\u00c3\u00a1 atualizado. Fa\u00c3\u00a7a isso em todas as m\u00c3\u00a1quinas clientes e desta forma voc\u00c3\u00aa s\u00c3\u00b3 precisar\u00c3\u00a1 baixar pacotes em um \u00c3\u00banico local. Seguran\u00c3\u00a7a Caso seja necess\u00c3\u00a1rio, voc\u00c3\u00aa pode proteger o sistema web com a requisi\u00c3\u00a7\u00c3\u00a3o de usu\u00c3\u00a1rio e senha. Para isso, edite o arquivo \/etc\/apt-cacher-ng\/security.conf: #AdminAuth: mooma:moopa AdminAuth: usuario:Senh4 Depois reinicie o apt-cacher-ng: sudo systemctl restart apt-cacher-ng.service \u00c3\u0080 partir de agora, quando for navegar na porta 3142 do seu servidor proxy, lhe ser\u00c3\u00a1 solicitado os dados de acesso. Informa\u00c3\u00a7\u00c3\u00a3o Para configura\u00c3\u00a7\u00c3\u00b5es avan\u00c3\u00a7adas, leia o manual em http:\/\/192.168.1.100:3142\/acng-doc\/html\/index.html. Conclus\u00c3\u00a3o Configurar o Apt-Cacher-NG \u00c3\u00a9 simples e de extrema utilidade. Voc\u00c3\u00aa pode ter v\u00c3\u00a1rias m\u00c3\u00a1quinas na rede local, mas vai baixar pacotes externos apenas por uma, uma \u00c3\u00banica vez. cache proxy debian linux Edite essa p\u00c3\u00a1gina no GitHub Pr\u00c3\u00b3ximo Anterior var disqus_config = function () { this.page.url = 'https:\/\/natanfelles.github.io\/blog\/apt-cacher-ng'; this.page.identifier = '\/blog\/apt-cacher-ng'; }; (function() { var d = document, s = d.createElement('script'); s.src = '\/\/natanfelles.disqus.com\/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Habilite o JavaScript para ver os coment\u00c3\u00a1rios fornecidos por Disqus. \u00a9 2017 Natan Felles. Direitos reservados. Website renderizado em 28.06.2017 18:15:52 -0300 \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview'); Toggle navigation Natan Felles Blog Servi\u00c3\u00a7os Mapa do Site Natan Felles Creative Webmaster In\u00c3\u00adcio Blog Resetando a Senha do Root no MySQL Resetando a Senha do Root no MySQL Blog \u00c2\u00b7 desenvolvimento 13.06.2017 Hoje precisei acessar um servidor MySQL rec\u00c3\u00a9m instalado no qual eu n\u00c3\u00a3o sabia a senha do usu\u00c3\u00a1rio root. Mas eu tinha acesso de super-usu\u00c3\u00a1rio no Linux. Ent\u00c3\u00a3o, decidi criar uma nova senha. A maneira mais pr\u00c3\u00a1tica de realizar tal processo \u00c3\u00a9 utilizando o script mysqld_safe. Ele possui o par\u00c3\u00a2metro --skip-grant-tables, que possibilita logar sem inserir nenhuma senha. Para rodar esse script \u00c3\u00a9 necess\u00c3\u00a1rio que exista o diret\u00c3\u00b3rio \/var\/run\/mysqld com propriedade do usu\u00c3\u00a1rio do MySQL. Antes de rodar o mysqld_safe, voc\u00c3\u00aa pode conferir se o diret\u00c3\u00b3rio necess\u00c3\u00a1rio existe: \/var\/run\/mysqld Caso n\u00c3\u00a3o exista, crie-o e defina a propriedade: sudo mkdir -p \/var\/run\/mysqld sudo chown mysql:mysql \/var\/run\/mysqld Feito isso, abra outro terminal, certifique-se que o MySQL est\u00c3\u00a1 desligado e execute o mysqld_safe para rodar em segundo plano: sudo systemctl stop mysql.service sudo mysqld_safe --skip-grant-tables & Agora j\u00c3\u00a1 ser\u00c3\u00a1 poss\u00c3\u00advel entrar apenas com mysql -uroot. Sem necessidade da senha. Estando no prompt do MySQL, use a tabela mysql e defina sua nova senha: USE mysql; -- O nome da coluna \u00c3\u00a9 \"Password\" se a vers\u00c3\u00a3o do seu MySQL \u00c3\u00a9 menor que 5.7 UPDATE user SET authentication_string=PASSWORD('nova-senha') WHERE user='root'; FLUSH PRIVILEGES; EXIT Com a nova senha definida, mate o processo do mysqld_safe com um Ctrl + C e inicie o MySQL: sudo systemctl start mysql.service \u00c3\u0080 partir de ent\u00c3\u00a3o voc\u00c3\u00aa poder\u00c3\u00a1 acessar o MySQL normalmente, com mysql -uroot -p. Feito. Fontes MySQL :: MySQL 5.7 Reference Manual :: B.5.3.2 How to Reset the Root Password MysqlPasswordReset - Community Help Wiki Reset Forgotten MySQL Root Password mysql linux servidor Edite essa p\u00c3\u00a1gina no GitHub Pr\u00c3\u00b3ximo Anterior var disqus_config = function () { this.page.url = 'https:\/\/natanfelles.github.io\/blog\/mysql-reset-password'; this.page.identifier = '\/blog\/mysql-reset-password'; }; (function() { var d = document, s = d.createElement('script'); s.src = '\/\/natanfelles.disqus.com\/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Habilite o JavaScript para ver os coment\u00c3\u00a1rios fornecidos por Disqus. \u00a9 2017 Natan Felles. Direitos reservados. Website renderizado em 28.06.2017 18:15:52 -0300 \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview'); Downloads Documentation Get Involved Help php[world] 2017 Getting Started Introduction A simple tutorial Language Reference Basic syntax Types Variables Constants Expressions Operators Control Structures Functions Classes and Objects Namespaces Errors Exceptions Generators References Explained Predefined Variables Predefined Exceptions Predefined Interfaces and Classes Context options and parameters Supported Protocols and Wrappers Security Introduction General considerations Installed as CGI binary Installed as an Apache module Session Security Filesystem Security Database Security Error Reporting Using Register Globals User Submitted Data Magic Quotes Hiding PHP Keeping Current Features HTTP authentication with PHP Cookies Sessions Dealing with XForms Handling file uploads Using remote files Connection handling Persistent Database Connections Safe Mode Command line usage Garbage Collection DTrace Dynamic Tracing Function Reference Affecting PHP's Behaviour Audio Formats Manipulation Authentication Services Command Line Specific Extensions Compression and Archive Extensions Credit Card Processing Cryptography Extensions Database Extensions Date and Time Related Extensions File System Related Extensions Human Language and Character Encoding Support Image Processing and Generation Mail Related Extensions Mathematical Extensions Non-Text MIME Output Process Control Extensions Other Basic Extensions Other Services Search Engine Extensions Server Specific Extensions Session Extensions Text Processing Variable and Type Related Extensions Web Services Windows Only Extensions XML Manipulation GUI Extensions Keyboard Shortcuts? This help j Next menu item k Previous menu item g p Previous man page g n Next man page G Scroll to bottom g g Scroll to top g h Goto homepage g s Goto search(current page) \/ Focus search box DOMDocument::__construct \u00bb \u00ab DOMComment::__construct Manual do PHP Refer\u00eancia das Fun\u00e7\u00f5es Manipula\u00e7\u00e3o de XML DOM Change language: EnglishBrazilian PortugueseChinese (Simplified)FrenchGermanJapaneseRomanianRussianSpanishTurkishOther Edit Report a Bug The DOMDocument class (PHP 5, PHP 7) Introdu\u00e7\u00e3o Represents an entire HTML or XML document; serves as the root of the document tree. Sinopse da classe DOMDocument extends DOMNode { \/* Propriedades *\/ readonly public string $actualEncoding ; readonly public DOMConfiguration $config ; readonly public DOMDocumentType $doctype ; readonly public DOMElement $documentElement ; public string $documentURI ; public string $encoding ; public bool $formatOutput ; readonly public DOMImplementation $implementation ; public bool $preserveWhiteSpace = true ; public bool $recover ; public bool $resolveExternals ; public bool $standalone ; public bool $strictErrorChecking = true ; public bool $substituteEntities ; public bool $validateOnParse = false ; public string $version ; readonly public string $xmlEncoding ; public bool $xmlStandalone ; public string $xmlVersion ; \/* M\u00e9todos *\/ public __construct ([ string $version [, string $encoding ]] ) public DOMAttr createAttribute ( string $name ) public DOMAttr createAttributeNS ( string $namespaceURI , string $qualifiedName ) public DOMCDATASection createCDATASection ( string $data ) public DOMComment createComment ( string $data ) public DOMDocumentFragment createDocumentFragment ( void ) public DOMElement createElement ( string $name [, string $value ] ) public DOMElement createElementNS ( string $namespaceURI , string $qualifiedName [, string $value ] ) public DOMEntityReference createEntityReference ( string $name ) public DOMProcessingInstruction createProcessingInstruction ( string $target [, string $data ] ) public DOMText createTextNode ( string $content ) public DOMElement getElementById ( string $elementId ) public DOMNodeList getElementsByTagName ( string $name ) public DOMNodeList getElementsByTagNameNS ( string $namespaceURI , string $localName ) public DOMNode importNode ( DOMNode $importedNode [, bool $deep ] ) public mixed load ( string $filename [, int $options = 0 ] ) public bool loadHTML ( string $source [, int $options = 0 ] ) public bool loadHTMLFile ( string $filename [, int $options = 0 ] ) public mixed loadXML ( string $source [, int $options = 0 ] ) public void normalizeDocument ( void ) public bool registerNodeClass ( string $baseclass , string $extendedclass ) public bool relaxNGValidate ( string $filename ) public bool relaxNGValidateSource ( string $source ) public int save ( string $filename [, int $options ] ) public string saveHTML ([ DOMNode $node = NULL ] ) public int saveHTMLFile ( string $filename ) public string saveXML ([ DOMNode $node [, int $options ]] ) public bool schemaValidate ( string $filename [, int $flags ] ) public bool schemaValidateSource ( string $source [, int $flags ] ) public bool validate ( void ) public int xinclude ([ int $options ] ) \/* M\u00e9todos herdados *\/ public DOMNode DOMNode::appendChild ( DOMNode $newnode ) public string DOMNode::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) public int DOMNode::C14NFile ( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) public DOMNode DOMNode::cloneNode ([ bool $deep ] ) public int DOMNode::getLineNo ( void ) public string DOMNode::getNodePath ( void ) public bool DOMNode::hasAttributes ( void ) public bool DOMNode::hasChildNodes ( void ) public DOMNode DOMNode::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) public bool DOMNode::isDefaultNamespace ( string $namespaceURI ) public bool DOMNode::isSameNode ( DOMNode $node ) public bool DOMNode::isSupported ( string $feature , string $version ) public string DOMNode::lookupNamespaceURI ( string $prefix ) public string DOMNode::lookupPrefix ( string $namespaceURI ) public void DOMNode::normalize ( void ) public DOMNode DOMNode::removeChild ( DOMNode $oldnode ) public DOMNode DOMNode::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) } Propriedades actualEncoding Deprecated. Actual encoding of the document, is a readonly equivalent to encoding. config Deprecated. Configuration used when DOMDocument::normalizeDocument() is invoked. doctype The Document Type Declaration associated with this document. documentElement This is a convenience attribute that allows direct access to the child node that is the document element of the document. documentURI The location of the document or NULL if undefined. encoding Encoding of the document, as specified by the XML declaration. This attribute is not present in the final DOM Level 3 specification, but is the only way of manipulating XML document encoding in this implementation. formatOutput Nicely formats output with indentation and extra space. implementation The DOMImplementation object that handles this document. preserveWhiteSpace Do not remove redundant white space. Default to TRUE. recover Proprietary. Enables recovery mode, i.e. trying to parse non-well formed documents. This attribute is not part of the DOM specification and is specific to libxml. resolveExternals Set it to TRUE to load external entities from a doctype declaration. This is useful for including character entities in your XML document. standalone Deprecated. Whether or not the document is standalone, as specified by the XML declaration, corresponds to xmlStandalone. strictErrorChecking Throws DOMException on errors. Default to TRUE. substituteEntities Proprietary. Whether or not to substitute entities. This attribute is not part of the DOM specification and is specific to libxml. validateOnParse Loads and validates against the DTD. Default to FALSE. version Deprecated. Version of XML, corresponds to xmlVersion. xmlEncoding An attribute specifying, as part of the XML declaration, the encoding of this document. This is NULL when unspecified or when it is not known, such as when the Document was created in memory. xmlStandalone An attribute specifying, as part of the XML declaration, whether this document is standalone. This is FALSE when unspecified. xmlVersion An attribute specifying, as part of the XML declaration, the version number of this document. If there is no declaration and if this document supports the \"XML\" feature, the value is \"1.0\". Notas Nota: The DOM extension uses UTF-8 encoding. Use utf8_encode() and utf8_decode() to work with texts in ISO-8859-1 encoding or Iconv for other encodings. Veja Tamb\u00e9m \u00bb\u00a0W3C specification for Document \u00cdndiceDOMDocument::__construct \u2014 Creates a new DOMDocument objectDOMDocument::createAttribute \u2014 Create new attributeDOMDocument::createAttributeNS \u2014 Create new attribute node with an associated namespaceDOMDocument::createCDATASection \u2014 Create new cdata nodeDOMDocument::createComment \u2014 Create new comment nodeDOMDocument::createDocumentFragment \u2014 Create new document fragmentDOMDocument::createElement \u2014 Create new element nodeDOMDocument::createElementNS \u2014 Create new element node with an associated namespaceDOMDocument::createEntityReference \u2014 Create new entity reference nodeDOMDocument::createProcessingInstruction \u2014 Creates new PI nodeDOMDocument::createTextNode \u2014 Create new text nodeDOMDocument::getElementById \u2014 Searches for an element with a certain idDOMDocument::getElementsByTagName \u2014 Searches for all elements with given local tag nameDOMDocument::getElementsByTagNameNS \u2014 Searches for all elements with given tag name in specified namespaceDOMDocument::importNode \u2014 Import node into current documentDOMDocument::load \u2014 Load XML from a fileDOMDocument::loadHTML \u2014 Load HTML from a stringDOMDocument::loadHTMLFile \u2014 Load HTML from a fileDOMDocument::loadXML \u2014 Load XML from a stringDOMDocument::normalizeDocument \u2014 Normalizes the documentDOMDocument::registerNodeClass \u2014 Register extended class used to create base node typeDOMDocument::relaxNGValidate \u2014 Performs relaxNG validation on the documentDOMDocument::relaxNGValidateSource \u2014 Performs relaxNG validation on the documentDOMDocument::save \u2014 Dumps the internal XML tree back into a fileDOMDocument::saveHTML \u2014 Dumps the internal document into a string using HTML formattingDOMDocument::saveHTMLFile \u2014 Dumps the internal document into a file using HTML formattingDOMDocument::saveXML \u2014 Dumps the internal XML tree back into a stringDOMDocument::schemaValidate \u2014 Validates a document based on a schemaDOMDocument::schemaValidateSource \u2014 Validates a document based on a schemaDOMDocument::validate \u2014 Validates the document based on its DTDDOMDocument::xinclude \u2014 Substitutes XIncludes in a DOMDocument Object add a note User Contributed Notes 15 notes up down 63 Fernando H \u00b69 years ago Showing a quick example of how to use this class, just so that new users can get a quick start without having to figure it all out by themself. ( At the day of posting, this documentation just got added and is lacking examples. )Output:\u00a0 \u00a0 \u00a0 The ninth symphony\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The last symphony composed by Ludwig van Beethoven.\u00a0 \u00a0 \u00a0 \u00a0 Highway BluesIf you want your PHP->DOM code to run under the .xml extension, you should set your webserver up to run the .xml extension with PHP ( Refer to the installation\/configuration configuration for PHP on how to do this ).Note that this:is NOT the same as this:although this will work: up down 14 jay at jaygilford dot com \u00b67 years ago Here's a small function I wrote to get all page links using the DOMDocument which will hopefully be of use to others\r Tipue LondonHomeProductsBlogSupportAboutCloseHomeproductsblog Tipue Search Tipue Search is an open source site search engine jQuery plugin Download Tipue Search Tipue Search is a site search engine jQuery plugin. It's free, open source, responsive and fast. Download \u00a0 Demo Version 6.1 Only jQuery Tipue Search only needs a browser that supports jQuery. It doesn't need MySQL or similar. In Static mode it doesn't even need a web server. Tipue Search is released under the MIT License. It's free for both commercial and non-commercial use. It doesn't show advertising or any branding. Content is king Tipue Search uses various modes for loading content. Static mode uses a JavaScript object, while Live mode grabs content from a list of pages dynamically. There's also JSON support. See a demo of Static mode. Fully documented There's an easy Getting Started section along with full and comprehensive documentation. (adsbygoogle = window.adsbygoogle || []).push({}); New in 6 Version 6 includes contextual results, whole word search, timed results, related searches, ARIA attributes and more. Support We offer a range of flexible support plans, including free. (adsbygoogle = window.adsbygoogle || []).push({}); Browser Compatibility Tipue Search has wide browser support. It works with Chrome 32+, Microsoft Edge, IE10+, Firefox 43+, Safari 9.1+, Opera 35+, Android 4.0+, Safari iOS 7+ and almost any recent browser. Tweet (function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = \"\/\/connect.facebook.net\/en_GB\/all.js#xfbml=1\"; fjs.parentNode.insertBefore(js, fjs); }(document, 'script', 'facebook-jssdk')); \u00a9 2017, Tipue. Made in London.Privacy \u00a0T&Cs","tags":"","url":"http:\/\/www.tipue.com\/search\/"},{"title":"JavaScript Date Reference","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getScript() Categories: Ajax > Shorthand Methods jQuery.getScript( url [, success ] )Returns: jqXHR Description: Load a JavaScript file from the server using a GET HTTP request, then execute it. version added: 1.0jQuery.getScript( url [, success ] ) url Type: String A string containing the URL to which the request is sent. success Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 $.ajax({ url: url, dataType: \"script\", success: success}); The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page. Success Callback The callback is fired once the script has been loaded but not necessarily executed. Scripts are included and run by referencing the file name: 1 2 3 4 5 6 $.getScript( \"ajax\/test.js\", function( data, textStatus, jqxhr ) { console.log( data ); \/\/ Data returned console.log( textStatus ); \/\/ Success console.log( jqxhr.status ); \/\/ 200 console.log( \"Load was performed.\" );}); Handling Errors As of jQuery 1.5, you may use .fail() to account for errors: 1 2 3 4 5 6 7 $.getScript( \"ajax\/test.js\" ) .done(function( script, textStatus ) { console.log( textStatus ); }) .fail(function( jqxhr, settings, exception ) { $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );}); Prior to jQuery 1.5, the global .ajaxError() callback event had to be used in order to handle $.getScript() errors: 1 2 3 4 5 $( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) { if ( settings.dataType == \"script\" ) { $( this ).text( \"Triggered ajaxError handler.\" ); }}); Caching Responses By default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using $.ajaxSetup(): 1 2 3 $.ajaxSetup({ cache: true}); Alternatively, you could define a new method that uses the more flexible $.ajax() method. Examples: Define a $.cachedScript() method that allows fetching a cached script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 jQuery.cachedScript = function( url, options ) { \/\/ Allow user to set any option except for dataType, cache, and url options = $.extend( options || {}, { dataType: \"script\", cache: true, url: url }); \/\/ Use $.ajax() since it is more flexible than $.getScript \/\/ Return the jqXHR object so we can chain callbacks return jQuery.ajax( options );}; \/\/ Usage$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) { console.log( textStatus );}); Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 jQuery.getScript demo .block { background-color: blue; width: 150px; height: 70px; margin: 10px; } &raquo; Run var url = \"https:\/\/code.jquery.com\/color\/jquery.color.js\";$.getScript( url, function() { $( \"#go\" ).click(function() { $( \".block\" ) .animate({ backgroundColor: \"rgb(255, 180, 180)\" }, 1000 ) .delay( 500 ) .animate({ backgroundColor: \"olive\" }, 1000 ) .delay( 500\u00a0) .animate({ backgroundColor: \"#00f\" }, 1000 ); });}); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); Toggle navigation CodeIgniter Download Documentation Community Contribute CodeIgniter Rocks CodeIgniter is a powerful PHP framework with a very small footprint, built for developers who need a simple and elegant toolkit to create full-featured web applications. Star 14,705 Fork 6,953 @CodeIgniter Download The latest is Version 3.1.5 Read the Manual Clear documentation View the Forums Get Support & Discuss Things On GitHub Fix Bugs or Add Features Recent News 2017.07.11 Project Update - 2017.07.10 2017.06.19 CodeIgniter 3.1.5 Released 2017.03.20 CodeIgniter 3.1.4 released 2017.03.09 BCIT newsletter story about CodeIgniter 2017.01.20 Planned Server Downtime Jan 21, 2017 Active Forum Threads 2017.07.11 form_input don't output html since ci3 upgrade 2017.07.11 Community Auth : Login Error 2017.07.11 Get data from cookie on subdomain with Codeigniter 2017.07.11 local to gmt function doesn't work 2017.07.11 REST API request does not reply until shell script is done Why CodeIgniter? Framework with a small footprint CodeIgniter 3 has a 2MB download, including the user guide. Simple solutions over complexity CodeIgniter encourages MVC, but does not force it on you. Clear documentation The CodeIgniter User Guide comes with the download. It contains an introduction, tutorial, a number of \"how to\" guides, and then reference documentation for the components that make up the framework. Exceptional performance CodeIgniter consistently outperforms most of its competitors. Strong Security We take security seriously, with built-in protection against CSRF and XSS attacks. Nearly zero configuration Much of the CodeIgniter configuration is done by convention, for instance putting models in a \"models\" folder. There are still a number of configuration options available, through scripts in the \"config\" folder. Policies The Fine Print About CodeIgniter was created by EllisLab and is now a project of the British Columbia Institute of Technology !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = \/^http:\/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + ':\/\/platform.twitter.com\/widgets.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'twitter-wjs');\/* -1&&m>28){j=28+s;s='';if(j *\/ Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 CodeIgniter4 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 \u00a0 CodeIgniter4 Docs \u00bb CodeIgniter4 User Guide CodeIgniter4 User Guide\u00b6 License Agreement Change Log Welcome Installation Tutorial CodeIgniter4 Overview General Topics Library Reference Database Reference Helper Reference Contributing to CodeIgniter Welcome\u00b6 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance Installation\u00b6 InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server Tutorial\u00b6 TutorialStatic pages News section Create news items Conclusion CodeIgniter4 Overview\u00b6 CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General Topics\u00b6 General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library Reference\u00b6 Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database Reference\u00b6 Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events Helper Reference\u00b6 HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniter\u00b6 Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 Next \u00a9 Copyright 2014 - 2017, British Columbia Institute of Technology. Last updated on Jul 05, 2017. Built with Sphinx using a theme provided by Read the Docs. var DOCUMENTATION_OPTIONS = { URL_ROOT:'.\/', VERSION:'4.0.0-dev', COLLAPSE_INDEX:false, FILE_SUFFIX:'.html', HAS_SOURCE: false }; jQuery(function () { SphinxRtdTheme.StickyNav.enable(); }); Skip Quicknav About Debian Getting Debian Support Developers' Corner \u00a0 Download Debian 9.0(64-bit PC Network installer) Debian Debian is a free operating system (OS) for your computer. An operating system is the set of basic programs and utilities that make your computer run. Debian provides more than a pure OS: it comes with over 51000 packages, precompiled software bundled up in a nice format for easy installation on your machine. Read more... About Social Contract Code of Conduct Free Software Partners Donations Contact Us Help Debian Getting Debian Network install CD\/USB ISO images CD vendors Pre-installed Pure Blends Debian Packages Developers' Corner News Project News Events Documentation Release Info Installation manual Debian Books Debian Wiki Support Debian International Security Information Bug reports Mailing Lists Mailing List Archives Ports\/Architectures Miscellaneous Site map Search The Debian Blog The latest stable release of Debian is 9.0. The last update to this release was made on June 17th, 2017. Read more about available versions of Debian. Getting Started If you'd like to start using Debian, you can easily obtain a copy, and then follow the installation instructions to install it. If you're upgrading to the latest stable release from a previous version, please read the release notes before proceeding. To get help in using or setting up Debian, see our documentation and support pages. Users that speak languages other than English should check the international section. People who use systems other than Intel x86 should check the ports section. RSS News [18 Jun 2017] Debian Edu \/ Skolelinux Stretch \u2014 a complete Linux solution for your school[17 Jun 2017] Debian 9 Stretch released[06 May 2017] Updated Debian 8: 8.8 released[25 Apr 2017] Shutting down public FTP services[17 Apr 2017] Statement concerning the arrest of Dmitry Bogatov[14 Jan 2017] Updated Debian 8: 8.7 released For older news items see the News Page. If you would like to receive mail whenever new Debian news comes out, subscribe to the debian-announce mailing list. RSS Security Advisories [09 Jul 2017] DSA-3905 xorg-server - security update [08 Jul 2017] DSA-3904 bind9 - security update [05 Jul 2017] DSA-3903 tiff - security update [05 Jul 2017] DSA-3902 jabberd2 - security update [02 Jul 2017] DSA-3901 libgcrypt20 - security update [27 Jun 2017] DSA-3900 openvpn - security update [27 Jun 2017] DSA-3899 vlc - security update [25 Jun 2017] DSA-3898 expat - security update [24 Jun 2017] DSA-3897 drupal7 - security update [22 Jun 2017] DSA-3896 apache2 - security update [22 Jun 2017] DSA-3895 flatpak - security update [22 Jun 2017] DSA-3894 graphite2 - security update [22 Jun 2017] DSA-3893 jython - security update [22 Jun 2017] DSA-3892 tomcat7 - security update [22 Jun 2017] DSA-3891 tomcat8 - security update For older security advisories see the Security Page. If you would like to receive security advisories as soon as they're announced, subscribe to the debian-security-announce mailing list. This page is also available in the following languages: \u0639\u0631\u0628\u064a\u0629\u00a0(Arabiya) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u00a0(B\u0259lgarski) catal\u00e0 \u010desky dansk Deutsch \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\u00a0(Ellinika) espa\u00f1ol Esperanto \u0641\u0627\u0631\u0633\u06cc\u00a0(Farsi) fran\u00e7ais Galego \ud55c\uad6d\uc5b4\u00a0(Hangul) \u0540\u0561\u0575\u0565\u0580\u0565\u0576\u00a0(hayeren) hrvatski Indonesia Italiano \u05e2\u05d1\u05e8\u05d9\u05ea\u00a0(ivrit) Lietuvi\u0173 magyar Nederlands \u65e5\u672c\u8a9e\u00a0(Nihongo) norsk\u00a0(bokm\u00e5l) polski Portugu\u00eas rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439\u00a0(Russkij) slovensky suomi svenska \u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u00a0(Tamil) Ti\u1ebfng Vi\u1ec7t T\u00fcrk\u00e7e \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u00a0(ukrajins'ka) \u4e2d\u6587(\u7b80) \u4e2d\u6587(HK) \u4e2d\u6587(\u7e41) How to set the default document language To report a problem with the web site, e-mail our publicly archived mailing list debian-www@lists.debian.org. For other contact information, see the Debian contact page. Web site source code is available. Last Modified: Thu, Jun 8 15:25:09 UTC 2017 Copyright \u00a9 1997-2017 SPI and others; See license terms Debian is a registered trademark of Software in the Public Interest, Inc. Dev Home minFraud GeoIP FAQ Main Site Site Map English \u7b80\u4f53\u4e2d\u6587 (Chinese (Simplified)) Search\r Search\r Table of ContentsBinary DatabasesMaxMind Supported APIsThird-Party APIsUpdating Downloadable DatabasesCSV DatabasesDownload LimitsLinksSystem Status \/* Skip to content Features Business Explore Marketplace Pricing \/dashboard Sign in or Sign up Built for developers GitHub is a development platform inspired by the way you work. From open source to business, you can host and review code, manage projects, and build software alongside millions of other developers. Username Email Password Use at least one letter, one numeral, and seven characters. Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. Sign up for GitHub teams GitHub for teams A better way to work together GitHub brings teams together to work through problems, move ideas forward, and learn from each other along the way. Sign up your team Write better code Collaboration makes perfect. The conversations and code reviews that happen in Pull Requests help your team share the weight of your work and improve the software you build. Learn about code review on GitHub Manage your chaos Take a deep breath. On GitHub, project management happens in Issues and Projects, right alongside your code. All you have to do is mention a teammate to get them involved. Learn about project management on GitHub security-admin Security and administration Boxes? Check. We worried about your administrative and security needs so you don\u2019t have to. From flexible hosting to authentication options, GitHub can help you meet your team\u2019s requirements. Learn about GitHub for Business Code security Prevent problems before they happen. Protected branches, signed commits, and required status checks protect your work and help you maintain a high standard for your code. Access controlled Encourage teams to work together while limiting access to those who need it with granular permissions and authentication through SAML\/SSO and LDAP. Hosted where you need it Securely and reliably host your work on GitHub.com. Or, deploy GitHub Enterprise on your own servers or in a private cloud using Amazon Web Services, Azure or Google Cloud Platform. integrations Integrations Build on GitHub Customize your process with GitHub apps and an intuitive API. Integrate the tools you already use or discover new favorites to create a happier, more efficient way of working. Learn about integrations Sometimes, there\u2019s more than one tool for the job. Why not try something new? Browse GitHub Marketplace open-source Community Welcome home, developers GitHub is home to the world\u2019s largest community of developers and their\u00a0projects... Ariya Hidayat PhantomJS maintainer Russell Keith-Magee PyBee maintainer MailChimp Marketing customer Kris Nova Kubernetes\/kops maintainer Evan You Vue maintainer Mapbox Software customer Jess Frazelle Kubernetes, previously Docker maintainer ...whether you\u2019re making your first commit or sending a Rover to Mars, there\u2019s room for you here, too. 62M repositories worldwide GitHub\u2019s users create and maintain influential technologies alongside the world's largest open source\u00a0community. 22M developers worldwide Developers use GitHub for personal projects, from experimenting with new programming languages to hosting their life\u2019s work. 117K businesses worldwide Businesses of all sizes use GitHub to support their development process and to securely build software. More than a million teams use GitHub Get started for free \u2014 join the millions of developers already using GitHub to share their code, work together, and build amazing things. Username Email Password Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. \u00a9 2017 Features Code review Project management Community Documentation Code hosting Platform Atom Electron GitHub Desktop Developers Community Personal Open source For Business For Education Sponsorships Company About Blog Customers Careers Press Shop Resources Contact GitHub Help Status Terms Privacy Security Training You can't perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Transform your plain text into static\u00a0websites and\u00a0blogs. Simple No more databases, comment moderation, or pesky updates to install\u2014just your content. How Jekyll works \u2192 Static Markdown (or Textile), Liquid, HTML & CSS go in. Static sites come out ready for deployment. Jekyll template guide \u2192 Blog-aware Permalinks, categories, pages, posts, and custom layouts are all first-class citizens here. Migrate your blog \u2192 Get up and running in\u00a0seconds. Quick-start Instructions ~ $ gem install jekyll bundler ~ $ jekyll new my-awesome-site ~ $ cd my-awesome-site ~\/my-awesome-site $ bundle exec jekyll serve # => Now browse to http:\/\/localhost:4000 Free hosting with GitHub Pages Sick of dealing with hosting companies? GitHub Pages are powered by Jekyll, so you can easily deploy your site using GitHub for free\u2014custom domain name and\u00a0all. Learn more about GitHub Pages \u2192 The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Navigate the docs\u2026WelcomeQuick-start guideInstallationJekyll on WindowsBasic UsageDirectory structureConfigurationFront MatterWriting postsWorking with draftsCreating pagesStatic FilesVariablesCollectionsData FilesAssetsBlog migrationsTemplatesIncludesPermalinksPaginationPluginsThemesExtrasGitHub PagesDeployment methodsContinuous IntegrationTroubleshootingSites using JekyllResourcesUpgrading from 0.x to 2.xUpgrading from 2.x to 3.xContributingMaintaining JekyllCode of ConductHistory \u00a0Improve this page Templates Jekyll uses the Liquid templating language to process templates. All of the standard Liquid tags and filters are supported. Jekyll even adds a few handy filters and tags of its own to make common tasks easier. Filters Description Filter and Output Relative URL Prepend the baseurl value to the input. Useful if your site is hosted at a subpath rather than the root of the domain. {{ \"\/assets\/style.css\" | relative_url }} \/my-baseurl\/assets\/style.css Absolute URL Prepend the url and baseurl value to the input. {{ \"\/assets\/style.css\" | absolute_url }} http:\/\/example.com\/my-baseurl\/assets\/style.css Date to XML Schema Convert a Date into XML Schema (ISO 8601) format. {{ site.time | date_to_xmlschema }} 2008-11-07T13:07:54-08:00 Date to RFC-822 Format Convert a Date into the RFC-822 format used for RSS feeds. {{ site.time | date_to_rfc822 }} Mon, 07 Nov 2008 13:07:54 -0800 Date to String Convert a date to short format. {{ site.time | date_to_string }} 07 Nov 2008 Date to Long String Format a date to long format. {{ site.time | date_to_long_string }} 07 November 2008 Where Select all the objects in an array where the key has the given value. {{ site.members | where:\"graduation_year\",\"2014\" }} Where Expression Select all the objects in an array where the expression is true. Jekyll v3.2.0 & later. {{ site.members | where_exp:\"item\", \"item.graduation_year == 2014\" }} {{ site.members | where_exp:\"item\", \"item.graduation_year < 2014\" }} {{ site.members | where_exp:\"item\", \"item.projects contains 'foo'\" }} Group By Group an array's items by a given property. {{ site.members | group_by:\"graduation_year\" }} [{\"name\"=>\"2013\", \"items\"=>[...]}, {\"name\"=>\"2014\", \"items\"=>[...]}] Group By Expression Group an array's items using a Liquid expression. {{ site.members | group_by_exp:\"item\", \"item.graduation_year | truncate: 3, \\\"\\\"\" }} [{\"name\"=>\"201...\", \"items\"=>[...]}, {\"name\"=>\"200...\", \"items\"=>[...]}] XML Escape Escape some text for use in XML. {{ page.content | xml_escape }} CGI Escape CGI escape a string for use in a URL. Replaces any special characters with appropriate %XX replacements. CGI escape normally replaces a space with a plus + sign. {{ \"foo, bar; baz?\" | cgi_escape }} foo%2C+bar%3B+baz%3F URI Escape Percent encodes any special characters in a URI. URI escape normally replaces a space with %20. Reserved characters will not be escaped. {{ \"http:\/\/foo.com\/?q=foo, \\bar?\" | uri_escape }} http:\/\/foo.com\/?q=foo,%20%5Cbar? Number of Words Count the number of words in some text. {{ page.content | number_of_words }} 1337 Array to Sentence Convert an array into a sentence. Useful for listing tags. Optional argument for connector. {{ page.tags | array_to_sentence_string }} foo, bar, and baz {{ page.tags | array_to_sentence_string: 'or' }} foo, bar, or baz Markdownify Convert a Markdown-formatted string into HTML. {{ page.excerpt | markdownify }} Smartify Convert \"quotes\" into \u201csmart quotes.\u201d {{ page.title | smartify }} Converting Sass\/SCSS Convert a Sass- or SCSS-formatted string into CSS. {{ some_scss | scssify }} {{ some_sass | sassify }} Slugify Convert a string into a lowercase URL \"slug\". See below for options. {{ \"The _config.yml file\" | slugify }} the-config-yml-file {{ \"The _config.yml file\" | slugify: 'pretty' }} the-_config.yml-file Data To JSON Convert Hash or Array to JSON. {{ site.data.projects | jsonify }} Normalize Whitespace Replace any occurrence of whitespace with a single space. {{ \"a \\n b\" | normalize_whitespace }} Sort Sort an array. Optional arguments for hashes: 1.\u00a0property name 2.\u00a0nils order (first or last). {{ page.tags | sort }} {{ site.posts | sort: 'author' }} {{ site.pages | sort: 'title', 'last' }} Sample Pick a random value from an array. Optional: pick multiple values. {{ site.pages | sample }} {{ site.pages | sample:2 }} To Integer Convert a string or boolean to integer. {{ some_var | to_integer }} Array Filters Push, pop, shift, and unshift elements from an Array. These are NON-DESTRUCTIVE, i.e. they do not mutate the array, but rather make a copy and mutate that. {{ page.tags | push: 'Spokane' }} ['Seattle', 'Tacoma', 'Spokane'] {{ page.tags | pop }} ['Seattle'] {{ page.tags | shift }} ['Tacoma'] {{ page.tags | unshift: \"Olympia\" }} ['Olympia', 'Seattle', 'Tacoma'] Inspect Convert an object into its String representation for debugging. {{ some_var | inspect }} Options for the slugify filter The slugify filter accepts an option, each specifying what to filter. The default is default. They are as follows (with what they filter): none: no characters raw: spaces default: spaces and non-alphanumeric characters pretty: spaces and non-alphanumeric characters except for ._~!$&'()+,;=@ Tags Includes If you have small page snippets that you want to include in multiple places on your site, save the snippets as include files and insert them where required, by using the include tag: {% include footer.html %} Jekyll expects all include files to be placed in an _includes directory at the root of your source directory. In the above example, this will embed the contents of _includes\/footer.html into the calling file. For more advanced information on using includes, see Includes. Code snippet highlighting Jekyll has built in support for syntax highlighting of over 60 languages thanks to Rouge. Rouge is the default highlighter in Jekyll 3 and above. To use it in Jekyll 2, set highlighter to rouge and ensure the rouge gem is installed properly. Alternatively, you can use Pygments to highlight your code snippets. To use Pygments, you must have Python installed on your system, have the pygments.rb gem installed and set highlighter to pygments in your site\u2019s configuration file. Pygments supports over 100 languages To render a code block with syntax highlighting, surround your code as follows: {% highlight ruby %} def foo puts 'foo' end {% endhighlight %} The argument to the highlight tag (ruby in the example above) is the language identifier. To find the appropriate identifier to use for the language you want to highlight, look for the \u201cshort name\u201d on the Rouge wiki or the Pygments\u2019 Lexers page. Line numbers There is a second argument to highlight called linenos that is optional. Including the linenos argument will force the highlighted code to include line numbers. For instance, the following code block would include line numbers next to each line: {% highlight ruby linenos %} def foo puts 'foo' end {% endhighlight %} Stylesheets for syntax highlighting In order for the highlighting to show up, you\u2019ll need to include a highlighting stylesheet. For an example stylesheet you can look at syntax.css. These are the same styles as used by GitHub and you are free to use them for your own site. If you use linenos, you might want to include an additional CSS class definition for the .lineno class in syntax.css to distinguish the line numbers from the highlighted code. Gist Use the gist tag to easily embed a GitHub Gist onto your site. This works with public or secret gists: {% gist parkr\/931c1c8d465a04042403 %} You may also optionally specify the filename in the gist to display: {% gist parkr\/931c1c8d465a04042403 jekyll-private-gist.markdown %} To use the gist tag, you\u2019ll need to add the jekyll-gist gem to your project. Links Linking to pages To link to a post, a page, collection item, or file, the link tag will generate the correct permalink URL for the path you specify. For example, if you use the link tag to link to mypage.html, even if you change your permalink style to include the file extension or omit it, the URL formed by the link tag will always be valid. You must include the file\u2019s original extension when using the link tag. Here are some examples: {{ site.baseurl }}{% link _collection\/name-of-document.md %} {{ site.baseurl }}{% link _posts\/2016-07-26-name-of-post.md %} {{ site.baseurl }}{% link news\/index.html %} {{ site.baseurl }}{% link \/assets\/files\/doc.pdf %} You can also use the link tag to create a link in Markdown as follows: [Link to a document]({{ site.baseurl }}{% link _collection\/name-of-document.md %}) [Link to a post]({{ site.baseurl }}{% link _posts\/2016-07-26-name-of-post.md %}) [Link to a page]({{ site.baseurl }}{% link news\/index.html %}) [Link to a file]({{ site.baseurl }}{% link \/assets\/files\/doc.pdf %}) (Including {{ site.baseurl }} is optional \u2014 it depends on whether you want to preface the page URL with the baseurl value.) The path to the post, page, or collection is defined as the path relative to the root directory (where your config file is) to the file, not the path from your existing page to the other page. For example, suppose you\u2019re creating a link in page_a.md (stored in pages\/folder1\/folder2) to page_b.md (stored in pages\/folder1). Your path in the link would not be ..\/page_b.html. Instead, it would be \/pages\/folder1\/page_b.md. If you\u2019re unsure of the path, add {{ page.path }} to the page and it will display the path. One major benefit of using the link tag is link validation. If the link doesn\u2019t exist, Jekyll won\u2019t build your site. This is a good thing, as it will alert you to a broken link so you can fix it (rather than allowing you to build and deploy a site with broken links). Note you cannot add filters to link tags. For example, you cannot append a string using Liquid filters, such as {% link mypage.html | append: \"#section1\" %} . To link to sections on a page, you will need to use regular HTML or Markdown linking techniques. Linking to posts If you want to include a link to a post on your site, the post_url tag will generate the correct permalink URL for the post you specify. {{ site.baseurl }}{% post_url 2010-07-21-name-of-post %} If you organize your posts in subdirectories, you need to include subdirectory path to the post: {{ site.baseurl }}{% post_url \/subdir\/2010-07-21-name-of-post %} There is no need to include the file extension when using the post_url tag. You can also use this tag to create a link to a post in Markdown as follows: [Name of Link]({{ site.baseurl }}{% post_url 2010-07-21-name-of-post %}) Back Next Getting Started Welcome Quick-start guide Installation Jekyll on Windows Basic Usage Directory structure Configuration Your Content Front Matter Writing posts Working with drafts Creating pages Static Files Variables Collections Data Files Assets Blog migrations Customization Templates Includes Permalinks Pagination Plugins Themes Extras Deployment GitHub Pages Deployment methods Continuous Integration Miscellaneous Troubleshooting Sites using Jekyll Resources Upgrading from 0.x to 2.x Upgrading from 2.x to 3.x Meta Contributing Maintaining Jekyll Code of Conduct History The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level Natan Felles Creative Webmaster \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview'); Toggle navigation Natan Felles Blog Servi\u00c3\u00a7os Mapa do Site Natan Felles Creative Webmaster In\u00c3\u00adcio Blog Apt-Cacher-NG: Proxy de Cache de Pacotes Apt-Cacher-NG: Proxy de Cache de Pacotes Blog \u00c2\u00b7 desenvolvimento 23.09.2016 Apresenta\u00c3\u00a7\u00c3\u00a3o Apt-Cacher NG \u00c3\u00a9 um proxy de cache para pacotes de software baixados por mecanismos de distribui\u00c3\u00a7\u00c3\u00a3o em sistemas Unix\/Linux de servidores espelhos acess\u00c3\u00adveis via HTTP. Entenda melhor Sabe-se que \u00c3\u00a9 altamente recomend\u00c3\u00a1vel manter um sistema operacional sempre atualizado por devidos fatores. Em locais onde h\u00c3\u00a1 v\u00c3\u00a1rios computadores pode haver um enorme gasto do tr\u00c3\u00a1fego de banda ou congestionamento da conex\u00c3\u00a3o com a internet para manter todos atualizados. Algumas vezes, utilizando distribui\u00c3\u00a7\u00c3\u00b5es rolling release, que buscam sempre possuir as \u00c3\u00baltimas vers\u00c3\u00b5es de softwares, j\u00c3\u00a1 cheguei a precisar baixar mais de 200 MB em um \u00c3\u00banico update. Agora, imagine isso em uma empresa com 20 m\u00c3\u00a1quinas. Daria cerca de 4 GB de download para atualizar todas. A solu\u00c3\u00a7\u00c3\u00a3o mais simples \u00c3\u00a9 criar um servidor proxy de cache, ou seja, todos os pacotes baixados ficar\u00c3\u00a3o armazenados nele. E ent\u00c3\u00a3o todas as outras m\u00c3\u00a1quinas ser\u00c3\u00a3o atualizadas atrav\u00c3\u00a9s deste servidor proxy, intermedi\u00c3\u00a1rio, \u00c3\u00banico respons\u00c3\u00a1vel por baixar atualiza\u00c3\u00a7\u00c3\u00b5es externas e repass\u00c3\u00a1-las para todas as m\u00c3\u00a1quinas da rede local. Toda vez que uma m\u00c3\u00a1quina for atualizada ocorrer\u00c3\u00a1 o seguinte processo: A m\u00c3\u00a1quina conecta com o proxy e questiona se h\u00c3\u00a1 atualiza\u00c3\u00a7\u00c3\u00b5es para ela. O proxy conecta no reposit\u00c3\u00b3rio oficial e questiona por essas atualiza\u00c3\u00a7\u00c3\u00b5es, fazendo uma compara\u00c3\u00a7\u00c3\u00a3o entre as vers\u00c3\u00b5es de seus pacotes com os pacotes externos. Se houver novos pacotes, o proxy baixa os pacotes e, se houver vers\u00c3\u00a3o maior do que os da m\u00c3\u00a1quina, os retransmite para ela. Se n\u00c3\u00a3o houver novos pacotes, mas eles tiverem vers\u00c3\u00a3o maior do que os da m\u00c3\u00a1quina, o proxy apenas retransmite os pacotes para a m\u00c3\u00a1quina. Por fim, o proxy se atualizar\u00c3\u00a1 com os reposit\u00c3\u00b3rios externos e a m\u00c3\u00a1quina se atualizar\u00c3\u00a1 com o proxy. Certo. Chega de teoria e vamos ver como podemos fazer isso acontecer. Instala\u00c3\u00a7\u00c3\u00a3o do Servidor Proxy de Cache Voc\u00c3\u00aa precisar\u00c3\u00a1 de uma m\u00c3\u00a1quina para ser o servidor proxy de cache. Recomendo que utilize um sistema sem desktop, mas \u00c3\u00a9 indiferente. No servidor, vamos instalar o Apt-Cacher-NG: sudo apt install apt-cacher-ng O Apt-Cacher-NG, por padr\u00c3\u00a3o, roda na porta 3142 e \u00c3\u00a9 acess\u00c3\u00advel via web, onde possui uma p\u00c3\u00a1gina explicando como configurar outras m\u00c3\u00a1quinas para us\u00c3\u00a1-lo, manual e estat\u00c3\u00adsticas. Voc\u00c3\u00aa pode entrar diretamente pelo IP do servidor ou hostname, como no exemplo: http:\/\/192.168.1.100:3142 Configura\u00c3\u00a7\u00c3\u00a3o dos Clientes Estando com o servidor proxy de cache instalado, vamos ver como configurar as m\u00c3\u00a1quinas clientes: Em cada cliente, crie um arquivo em \/etc\/apt\/apt.conf e adicione a linha abaixo, substituindo o IP pelo do seu servidor: Acquire::http::Proxy \"http:\/\/192.168.1.100:3142\"; Feito! Salve e feche o arquivo e atualize a m\u00c3\u00a1quina cliente: sudo apt update Ao atualizar a m\u00c3\u00a1quina, automaticamente o proxy ser\u00c3\u00a1 atualizado. Fa\u00c3\u00a7a isso em todas as m\u00c3\u00a1quinas clientes e desta forma voc\u00c3\u00aa s\u00c3\u00b3 precisar\u00c3\u00a1 baixar pacotes em um \u00c3\u00banico local. Seguran\u00c3\u00a7a Caso seja necess\u00c3\u00a1rio, voc\u00c3\u00aa pode proteger o sistema web com a requisi\u00c3\u00a7\u00c3\u00a3o de usu\u00c3\u00a1rio e senha. Para isso, edite o arquivo \/etc\/apt-cacher-ng\/security.conf: #AdminAuth: mooma:moopa AdminAuth: usuario:Senh4 Depois reinicie o apt-cacher-ng: sudo systemctl restart apt-cacher-ng.service \u00c3\u0080 partir de agora, quando for navegar na porta 3142 do seu servidor proxy, lhe ser\u00c3\u00a1 solicitado os dados de acesso. Informa\u00c3\u00a7\u00c3\u00a3o Para configura\u00c3\u00a7\u00c3\u00b5es avan\u00c3\u00a7adas, leia o manual em http:\/\/192.168.1.100:3142\/acng-doc\/html\/index.html. Conclus\u00c3\u00a3o Configurar o Apt-Cacher-NG \u00c3\u00a9 simples e de extrema utilidade. Voc\u00c3\u00aa pode ter v\u00c3\u00a1rias m\u00c3\u00a1quinas na rede local, mas vai baixar pacotes externos apenas por uma, uma \u00c3\u00banica vez. cache proxy debian linux Edite essa p\u00c3\u00a1gina no GitHub Pr\u00c3\u00b3ximo Anterior var disqus_config = function () { this.page.url = 'https:\/\/natanfelles.github.io\/blog\/apt-cacher-ng'; this.page.identifier = '\/blog\/apt-cacher-ng'; }; (function() { var d = document, s = d.createElement('script'); s.src = '\/\/natanfelles.disqus.com\/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Habilite o JavaScript para ver os coment\u00c3\u00a1rios fornecidos por Disqus. \u00a9 2017 Natan Felles. Direitos reservados. Website renderizado em 28.06.2017 18:15:52 -0300 \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview'); Toggle navigation Natan Felles Blog Servi\u00c3\u00a7os Mapa do Site Natan Felles Creative Webmaster In\u00c3\u00adcio Blog Resetando a Senha do Root no MySQL Resetando a Senha do Root no MySQL Blog \u00c2\u00b7 desenvolvimento 13.06.2017 Hoje precisei acessar um servidor MySQL rec\u00c3\u00a9m instalado no qual eu n\u00c3\u00a3o sabia a senha do usu\u00c3\u00a1rio root. Mas eu tinha acesso de super-usu\u00c3\u00a1rio no Linux. Ent\u00c3\u00a3o, decidi criar uma nova senha. A maneira mais pr\u00c3\u00a1tica de realizar tal processo \u00c3\u00a9 utilizando o script mysqld_safe. Ele possui o par\u00c3\u00a2metro --skip-grant-tables, que possibilita logar sem inserir nenhuma senha. Para rodar esse script \u00c3\u00a9 necess\u00c3\u00a1rio que exista o diret\u00c3\u00b3rio \/var\/run\/mysqld com propriedade do usu\u00c3\u00a1rio do MySQL. Antes de rodar o mysqld_safe, voc\u00c3\u00aa pode conferir se o diret\u00c3\u00b3rio necess\u00c3\u00a1rio existe: \/var\/run\/mysqld Caso n\u00c3\u00a3o exista, crie-o e defina a propriedade: sudo mkdir -p \/var\/run\/mysqld sudo chown mysql:mysql \/var\/run\/mysqld Feito isso, abra outro terminal, certifique-se que o MySQL est\u00c3\u00a1 desligado e execute o mysqld_safe para rodar em segundo plano: sudo systemctl stop mysql.service sudo mysqld_safe --skip-grant-tables & Agora j\u00c3\u00a1 ser\u00c3\u00a1 poss\u00c3\u00advel entrar apenas com mysql -uroot. Sem necessidade da senha. Estando no prompt do MySQL, use a tabela mysql e defina sua nova senha: USE mysql; -- O nome da coluna \u00c3\u00a9 \"Password\" se a vers\u00c3\u00a3o do seu MySQL \u00c3\u00a9 menor que 5.7 UPDATE user SET authentication_string=PASSWORD('nova-senha') WHERE user='root'; FLUSH PRIVILEGES; EXIT Com a nova senha definida, mate o processo do mysqld_safe com um Ctrl + C e inicie o MySQL: sudo systemctl start mysql.service \u00c3\u0080 partir de ent\u00c3\u00a3o voc\u00c3\u00aa poder\u00c3\u00a1 acessar o MySQL normalmente, com mysql -uroot -p. Feito. Fontes MySQL :: MySQL 5.7 Reference Manual :: B.5.3.2 How to Reset the Root Password MysqlPasswordReset - Community Help Wiki Reset Forgotten MySQL Root Password mysql linux servidor Edite essa p\u00c3\u00a1gina no GitHub Pr\u00c3\u00b3ximo Anterior var disqus_config = function () { this.page.url = 'https:\/\/natanfelles.github.io\/blog\/mysql-reset-password'; this.page.identifier = '\/blog\/mysql-reset-password'; }; (function() { var d = document, s = d.createElement('script'); s.src = '\/\/natanfelles.disqus.com\/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Habilite o JavaScript para ver os coment\u00c3\u00a1rios fornecidos por Disqus. \u00a9 2017 Natan Felles. Direitos reservados. Website renderizado em 28.06.2017 18:15:52 -0300 \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview'); Downloads Documentation Get Involved Help php[world] 2017 Getting Started Introduction A simple tutorial Language Reference Basic syntax Types Variables Constants Expressions Operators Control Structures Functions Classes and Objects Namespaces Errors Exceptions Generators References Explained Predefined Variables Predefined Exceptions Predefined Interfaces and Classes Context options and parameters Supported Protocols and Wrappers Security Introduction General considerations Installed as CGI binary Installed as an Apache module Session Security Filesystem Security Database Security Error Reporting Using Register Globals User Submitted Data Magic Quotes Hiding PHP Keeping Current Features HTTP authentication with PHP Cookies Sessions Dealing with XForms Handling file uploads Using remote files Connection handling Persistent Database Connections Safe Mode Command line usage Garbage Collection DTrace Dynamic Tracing Function Reference Affecting PHP's Behaviour Audio Formats Manipulation Authentication Services Command Line Specific Extensions Compression and Archive Extensions Credit Card Processing Cryptography Extensions Database Extensions Date and Time Related Extensions File System Related Extensions Human Language and Character Encoding Support Image Processing and Generation Mail Related Extensions Mathematical Extensions Non-Text MIME Output Process Control Extensions Other Basic Extensions Other Services Search Engine Extensions Server Specific Extensions Session Extensions Text Processing Variable and Type Related Extensions Web Services Windows Only Extensions XML Manipulation GUI Extensions Keyboard Shortcuts? This help j Next menu item k Previous menu item g p Previous man page g n Next man page G Scroll to bottom g g Scroll to top g h Goto homepage g s Goto search(current page) \/ Focus search box DOMDocument::__construct \u00bb \u00ab DOMComment::__construct Manual do PHP Refer\u00eancia das Fun\u00e7\u00f5es Manipula\u00e7\u00e3o de XML DOM Change language: EnglishBrazilian PortugueseChinese (Simplified)FrenchGermanJapaneseRomanianRussianSpanishTurkishOther Edit Report a Bug The DOMDocument class (PHP 5, PHP 7) Introdu\u00e7\u00e3o Represents an entire HTML or XML document; serves as the root of the document tree. Sinopse da classe DOMDocument extends DOMNode { \/* Propriedades *\/ readonly public string $actualEncoding ; readonly public DOMConfiguration $config ; readonly public DOMDocumentType $doctype ; readonly public DOMElement $documentElement ; public string $documentURI ; public string $encoding ; public bool $formatOutput ; readonly public DOMImplementation $implementation ; public bool $preserveWhiteSpace = true ; public bool $recover ; public bool $resolveExternals ; public bool $standalone ; public bool $strictErrorChecking = true ; public bool $substituteEntities ; public bool $validateOnParse = false ; public string $version ; readonly public string $xmlEncoding ; public bool $xmlStandalone ; public string $xmlVersion ; \/* M\u00e9todos *\/ public __construct ([ string $version [, string $encoding ]] ) public DOMAttr createAttribute ( string $name ) public DOMAttr createAttributeNS ( string $namespaceURI , string $qualifiedName ) public DOMCDATASection createCDATASection ( string $data ) public DOMComment createComment ( string $data ) public DOMDocumentFragment createDocumentFragment ( void ) public DOMElement createElement ( string $name [, string $value ] ) public DOMElement createElementNS ( string $namespaceURI , string $qualifiedName [, string $value ] ) public DOMEntityReference createEntityReference ( string $name ) public DOMProcessingInstruction createProcessingInstruction ( string $target [, string $data ] ) public DOMText createTextNode ( string $content ) public DOMElement getElementById ( string $elementId ) public DOMNodeList getElementsByTagName ( string $name ) public DOMNodeList getElementsByTagNameNS ( string $namespaceURI , string $localName ) public DOMNode importNode ( DOMNode $importedNode [, bool $deep ] ) public mixed load ( string $filename [, int $options = 0 ] ) public bool loadHTML ( string $source [, int $options = 0 ] ) public bool loadHTMLFile ( string $filename [, int $options = 0 ] ) public mixed loadXML ( string $source [, int $options = 0 ] ) public void normalizeDocument ( void ) public bool registerNodeClass ( string $baseclass , string $extendedclass ) public bool relaxNGValidate ( string $filename ) public bool relaxNGValidateSource ( string $source ) public int save ( string $filename [, int $options ] ) public string saveHTML ([ DOMNode $node = NULL ] ) public int saveHTMLFile ( string $filename ) public string saveXML ([ DOMNode $node [, int $options ]] ) public bool schemaValidate ( string $filename [, int $flags ] ) public bool schemaValidateSource ( string $source [, int $flags ] ) public bool validate ( void ) public int xinclude ([ int $options ] ) \/* M\u00e9todos herdados *\/ public DOMNode DOMNode::appendChild ( DOMNode $newnode ) public string DOMNode::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) public int DOMNode::C14NFile ( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) public DOMNode DOMNode::cloneNode ([ bool $deep ] ) public int DOMNode::getLineNo ( void ) public string DOMNode::getNodePath ( void ) public bool DOMNode::hasAttributes ( void ) public bool DOMNode::hasChildNodes ( void ) public DOMNode DOMNode::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) public bool DOMNode::isDefaultNamespace ( string $namespaceURI ) public bool DOMNode::isSameNode ( DOMNode $node ) public bool DOMNode::isSupported ( string $feature , string $version ) public string DOMNode::lookupNamespaceURI ( string $prefix ) public string DOMNode::lookupPrefix ( string $namespaceURI ) public void DOMNode::normalize ( void ) public DOMNode DOMNode::removeChild ( DOMNode $oldnode ) public DOMNode DOMNode::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) } Propriedades actualEncoding Deprecated. Actual encoding of the document, is a readonly equivalent to encoding. config Deprecated. Configuration used when DOMDocument::normalizeDocument() is invoked. doctype The Document Type Declaration associated with this document. documentElement This is a convenience attribute that allows direct access to the child node that is the document element of the document. documentURI The location of the document or NULL if undefined. encoding Encoding of the document, as specified by the XML declaration. This attribute is not present in the final DOM Level 3 specification, but is the only way of manipulating XML document encoding in this implementation. formatOutput Nicely formats output with indentation and extra space. implementation The DOMImplementation object that handles this document. preserveWhiteSpace Do not remove redundant white space. Default to TRUE. recover Proprietary. Enables recovery mode, i.e. trying to parse non-well formed documents. This attribute is not part of the DOM specification and is specific to libxml. resolveExternals Set it to TRUE to load external entities from a doctype declaration. This is useful for including character entities in your XML document. standalone Deprecated. Whether or not the document is standalone, as specified by the XML declaration, corresponds to xmlStandalone. strictErrorChecking Throws DOMException on errors. Default to TRUE. substituteEntities Proprietary. Whether or not to substitute entities. This attribute is not part of the DOM specification and is specific to libxml. validateOnParse Loads and validates against the DTD. Default to FALSE. version Deprecated. Version of XML, corresponds to xmlVersion. xmlEncoding An attribute specifying, as part of the XML declaration, the encoding of this document. This is NULL when unspecified or when it is not known, such as when the Document was created in memory. xmlStandalone An attribute specifying, as part of the XML declaration, whether this document is standalone. This is FALSE when unspecified. xmlVersion An attribute specifying, as part of the XML declaration, the version number of this document. If there is no declaration and if this document supports the \"XML\" feature, the value is \"1.0\". Notas Nota: The DOM extension uses UTF-8 encoding. Use utf8_encode() and utf8_decode() to work with texts in ISO-8859-1 encoding or Iconv for other encodings. Veja Tamb\u00e9m \u00bb\u00a0W3C specification for Document \u00cdndiceDOMDocument::__construct \u2014 Creates a new DOMDocument objectDOMDocument::createAttribute \u2014 Create new attributeDOMDocument::createAttributeNS \u2014 Create new attribute node with an associated namespaceDOMDocument::createCDATASection \u2014 Create new cdata nodeDOMDocument::createComment \u2014 Create new comment nodeDOMDocument::createDocumentFragment \u2014 Create new document fragmentDOMDocument::createElement \u2014 Create new element nodeDOMDocument::createElementNS \u2014 Create new element node with an associated namespaceDOMDocument::createEntityReference \u2014 Create new entity reference nodeDOMDocument::createProcessingInstruction \u2014 Creates new PI nodeDOMDocument::createTextNode \u2014 Create new text nodeDOMDocument::getElementById \u2014 Searches for an element with a certain idDOMDocument::getElementsByTagName \u2014 Searches for all elements with given local tag nameDOMDocument::getElementsByTagNameNS \u2014 Searches for all elements with given tag name in specified namespaceDOMDocument::importNode \u2014 Import node into current documentDOMDocument::load \u2014 Load XML from a fileDOMDocument::loadHTML \u2014 Load HTML from a stringDOMDocument::loadHTMLFile \u2014 Load HTML from a fileDOMDocument::loadXML \u2014 Load XML from a stringDOMDocument::normalizeDocument \u2014 Normalizes the documentDOMDocument::registerNodeClass \u2014 Register extended class used to create base node typeDOMDocument::relaxNGValidate \u2014 Performs relaxNG validation on the documentDOMDocument::relaxNGValidateSource \u2014 Performs relaxNG validation on the documentDOMDocument::save \u2014 Dumps the internal XML tree back into a fileDOMDocument::saveHTML \u2014 Dumps the internal document into a string using HTML formattingDOMDocument::saveHTMLFile \u2014 Dumps the internal document into a file using HTML formattingDOMDocument::saveXML \u2014 Dumps the internal XML tree back into a stringDOMDocument::schemaValidate \u2014 Validates a document based on a schemaDOMDocument::schemaValidateSource \u2014 Validates a document based on a schemaDOMDocument::validate \u2014 Validates the document based on its DTDDOMDocument::xinclude \u2014 Substitutes XIncludes in a DOMDocument Object add a note User Contributed Notes 15 notes up down 63 Fernando H \u00b69 years ago Showing a quick example of how to use this class, just so that new users can get a quick start without having to figure it all out by themself. ( At the day of posting, this documentation just got added and is lacking examples. )Output:\u00a0 \u00a0 \u00a0 The ninth symphony\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The last symphony composed by Ludwig van Beethoven.\u00a0 \u00a0 \u00a0 \u00a0 Highway BluesIf you want your PHP->DOM code to run under the .xml extension, you should set your webserver up to run the .xml extension with PHP ( Refer to the installation\/configuration configuration for PHP on how to do this ).Note that this:is NOT the same as this:although this will work: up down 14 jay at jaygilford dot com \u00b67 years ago Here's a small function I wrote to get all page links using the DOMDocument which will hopefully be of use to others\r Tipue LondonHomeProductsBlogSupportAboutCloseHomeproductsblog Tipue Search Tipue Search is an open source site search engine jQuery plugin Download Tipue Search Tipue Search is a site search engine jQuery plugin. It's free, open source, responsive and fast. Download \u00a0 Demo Version 6.1 Only jQuery Tipue Search only needs a browser that supports jQuery. It doesn't need MySQL or similar. In Static mode it doesn't even need a web server. Tipue Search is released under the MIT License. It's free for both commercial and non-commercial use. It doesn't show advertising or any branding. Content is king Tipue Search uses various modes for loading content. Static mode uses a JavaScript object, while Live mode grabs content from a list of pages dynamically. There's also JSON support. See a demo of Static mode. Fully documented There's an easy Getting Started section along with full and comprehensive documentation. (adsbygoogle = window.adsbygoogle || []).push({}); New in 6 Version 6 includes contextual results, whole word search, timed results, related searches, ARIA attributes and more. Support We offer a range of flexible support plans, including free. (adsbygoogle = window.adsbygoogle || []).push({}); Browser Compatibility Tipue Search has wide browser support. It works with Chrome 32+, Microsoft Edge, IE10+, Firefox 43+, Safari 9.1+, Opera 35+, Android 4.0+, Safari iOS 7+ and almost any recent browser. Tweet (function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = \"\/\/connect.facebook.net\/en_GB\/all.js#xfbml=1\"; fjs.parentNode.insertBefore(js, fjs); }(document, 'script', 'facebook-jssdk')); \u00a9 2017, Tipue. Made in London.Privacy \u00a0T&Cs w3schools.com\r THE WORLD'S LARGEST WEB DEVELOPER SITE\r HTML\r CSS\r JAVASCRIPT\r SQL\r PHP\r BOOTSTRAP\r JQUERY\r ANGULAR\r W3.CSS\r XML\r MORE \ue802\r \ue801\r FORUM\r EXAMPLES REFERENCES \u00d7\r HTML and CSS\r Learn HTML\r Learn CSS\r Learn W3.CSS\r Learn Colors\r Learn Bootstrap\r Learn Graphics\r Learn Icons\r Learn How To\r JavaScript\r Learn JavaScript\r Learn jQuery\r Learn jQueryMobile\r Learn AngularJS\r Learn JSON\r Learn AJAX\r Learn W3.JS\r Learn AppML\r Server Side\r Learn SQL\r Learn PHP\r Learn ASP\r Learn Node.js\r Web Building\r Web Templates\r Web Statistics\r Web Certificates\r XML\r Learn XML\r Learn XML AJAX\r Learn XML DOM\r Learn XML DTD\r Learn XML Schema\r Learn XSLT\r Learn XPath\r Learn XQuery\r \u00d7\r HTML\r HTML Tag Reference\r HTML Event Reference\r HTML Color Reference\r HTML Attribute Reference\r HTML Canvas Reference\r HTML SVG Reference\r Google Maps Reference\r CSS\r CSS Reference\r CSS Selector Reference\r W3.CSS Reference\r Bootstrap Reference\r Icon Reference\r JavaScript\r JavaScript Reference\r HTML DOM Reference\r jQuery Reference\r jQuery Mobile Reference\r AngularJS Reference\r W3.JS Reference\r XML\r XML Reference\r XML Http Reference\r XSLT Reference\r XML Schema Reference\r Charsets\r HTML Character Sets\r HTML ASCII\r HTML ANSI\r HTML Windows-1252\r HTML ISO-8859-1\r HTML Symbols\r HTML UTF-8\r Server Side\r PHP Reference\r SQL Reference\r ASP Reference\r \u00d7\r HTML\/CSS\r HTML Examples\r CSS Examples\r W3.CSS Examples\r W3.CSS Templates\r Bootstrap Examples\r JavaScript\r JavaScript Examples\r HTML DOM Examples\r jQuery Examples\r jQuery Mobile Examples\r AngularJS Examples\r AJAX Examples\r W3.JS Examples\r Server Side\r PHP Examples\r ASP Examples\r XML\r XML Examples\r XSLT Examples\r XPath Examples\r XML Schema Examples\r SVG Examples\r Quizzes\r HTML Quiz\r CSS Quiz\r JavaScript Quiz\r Bootstrap Quiz\r jQuery Quiz\r PHP Quiz\r SQL Quiz\r XML Quiz\r \u00d7\r JavaScript Reference\r Overview\r JavaScript\r JS String\r JS Number\r JS Operators\r JS Statements\r JS Math\r JS Date\r JS Array\r JS Boolean\r JS Error\r JS RegExp\r JS Global\r JS Conversion\r Browser BOM\r Window\r Navigator\r Screen\r History\r Location\r HTML DOM\r DOM Document\r DOM Elements\r DOM Attributes\r DOM Events\r DOM Style\r HTML Objects\r - button\r checkbox\r color\r date\r datetime\r datetime-local\r email\r file\r hidden\r image\r month\r number\r password\r radio\r range\r reset\r search\r submit\r text\r time\r url\r week\r Other Objects\r CSSStyleDeclaration\r googletag.cmd.push(function() { googletag.display('div-gpt-ad-1422003450156-2'); });\r JavaScript Date Reference\r \u276e Previous\r Next \u276f\r Date Object\r The Date object is used to work with dates and times.\r Date objects are created with new Date().\r There are four ways of instantiating a date:\r var d =\r new Date();\r var d =\r new Date(milliseconds);\r var d =\r new Date(dateString);\r var d =\r new Date(year, month, day, hours, minutes, seconds, milliseconds);\r For a tutorial about date and times, read our JavaScript Date Tutorial.\r Date Object Properties\r Property\r Description\r constructor\r Returns the function that created the Date object's prototype\r prototype\r Allows you to add properties and methods to an object\r Date Object Methods\r Method\r Description\r getDate()\r Returns the day of the month (from 1-31)\r getDay()\r Returns the day of the week (from 0-6)\r getFullYear()\r Returns the year\r getHours()\r Returns the hour (from 0-23)\r getMilliseconds()\r Returns the milliseconds (from 0-999)\r getMinutes()\r Returns the minutes (from 0-59)\r getMonth()\r Returns the month (from 0-11)\r getSeconds()\r Returns the seconds (from 0-59)\r getTime()\r Returns the number of milliseconds since midnight Jan 1 1970, and a specified date\r getTimezoneOffset()\r Returns the time difference between UTC time and local time, in minutes\r getUTCDate()\r Returns the day of the month, according to universal time (from 1-31)\r getUTCDay()\r Returns the day of the week, according to universal time (from 0-6)\r getUTCFullYear()\r Returns the year, according to universal time\r getUTCHours()\r Returns the hour, according to universal time (from 0-23)\r getUTCMilliseconds()\r Returns the milliseconds, according to universal time (from 0-999)\r getUTCMinutes()\r Returns the minutes, according to universal time (from 0-59)\r getUTCMonth()\r Returns the month, according to universal time (from 0-11)\r getUTCSeconds()\r Returns the seconds, according to universal time (from 0-59)\r getYear()\r Deprecated. Use the getFullYear() method instead\r now()\r Returns the number of milliseconds since midnight Jan 1, 1970\r parse()\r Parses a date string and returns the number of milliseconds since January 1, 1970\r setDate()\r Sets the day of the month of a date object\r setFullYear()\r Sets the year of a date object\r setHours()\r Sets the hour of a date object\r setMilliseconds()\r Sets the milliseconds of a date object\r setMinutes()\r Set the minutes of a date object\r setMonth()\r Sets the month of a date object\r setSeconds()\r Sets the seconds of a date object\r setTime()\r Sets a date to a specified number of milliseconds after\/before January 1, 1970\r setUTCDate()\r Sets the day of the month of a date object, according to universal time\r setUTCFullYear()\r Sets the year of a date object, according to universal time\r setUTCHours()\r Sets the hour of a date object, according to universal time\r setUTCMilliseconds()\r Sets the milliseconds of a date object, according to universal time\r setUTCMinutes()\r Set the minutes of a date object, according to universal time\r setUTCMonth()\r Sets the month of a date object, according to universal time\r setUTCSeconds()\r Set the seconds of a date object, according to universal time\r setYear()\r Deprecated. Use the setFullYear() method instead\r toDateString()\r Converts the date portion of a Date object into a readable string\r toGMTString()\r Deprecated. Use the toUTCString() method instead\r toISOString()\r Returns the date as a string, using the ISO standard\r toJSON()\r Returns the date as a string, formatted as a JSON date\r toLocaleDateString()\r Returns the date portion of a Date object as a string, using locale conventions\r toLocaleTimeString()\r Returns the time portion of a Date object as a string, using locale conventions\r toLocaleString()\r Converts a Date object to a string, using locale conventions\r toString()\r Converts a Date object to a string\r toTimeString()\r Converts the time portion of a Date object to a string\r toUTCString()\r Converts a Date object to a string, according to universal time\r UTC()\r Returns the number of milliseconds in a date since midnight of January 1, 1970, according to UTC time\r valueOf()\r Returns the primitive value of a Date object\r \u276e Previous\r Next \u276f\r googletag.cmd.push(function() {\r googletag.display('div-gpt-ad-1422003450156-5');\r });\r COLOR PICKER\r LEARN MORE\r TabsDropdownsAccordionsConvert WeightsAnimated ButtonsSide NavigationTop NavigationJS AnimationsModal BoxesProgress BarsParallaxLogin FormHTML IncludesGoogle MapsLoadersTooltipsSlideshowFilter ListSort List\r SHARE\r CERTIFICATES\r HTML, CSS, JavaScript, PHP, jQuery, Bootstrap and XML.\r Read More \u00bb\r if (Number(w3_getStyleValue(document.getElementById(\"main\"), \"height\").replace(\"px\", \"\")) > 2200) {\r googletag.cmd.push(function() { googletag.display('div-gpt-ad-1472547360578-0'); });\r }\r window.addEventListener(\"scroll\", fix_stickyad);\r window.addEventListener(\"resize\", fix_stickyad);\r googletag.cmd.push(function() { googletag.display('div-gpt-ad-1422003450156-0'); });\r googletag.cmd.push(function() { googletag.display('div-gpt-ad-1422003450156-3'); });\r REPORT ERROR\r PRINT PAGE\r FORUM\r ABOUT\r \u00d7 Your Suggestion:\r Your E-mail:\r Page address:\r Description:\r Submit\r \u00d7 Thank You For Helping Us!\r Your message has been sent to W3Schools.\r Top 10 Tutorials\r HTML TutorialCSS TutorialJavaScript TutorialW3.CSS TutorialBootstrap TutorialSQL TutorialPHP TutorialjQuery TutorialAngular TutorialXML Tutorial\r Top 10 References\r HTML ReferenceCSS ReferenceJavaScript ReferenceW3.CSS ReferenceBrowser StatisticsPHP ReferenceHTML ColorsHTML Character SetsjQuery ReferenceAngularJS Reference\r Top 10 Examples\r HTML ExamplesCSS ExamplesJavaScript ExamplesW3.CSS ExamplesHTML DOM ExamplesPHP ExamplesASP ExamplesjQuery ExamplesAngular ExamplesXML Examples\r Web Certificates\r HTML CertificateCSS CertificateJavaScript CertificatejQuery CertificatePHP CertificateBootstrap CertificateXML Certificate\r W3Schools is optimized for learning, testing, and training. Examples might be simplified to improve reading and basic understanding.\r Tutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content.\r While using this site, you agree to have read and accepted our terms of use,\r cookie and privacy policy.\r Copyright 1999-2017 by Refsnes Data. All Rights Reserved.Powered by W3.CSS.\r","tags":"","url":"https:\/\/www.w3schools.com\/jsref\/jsref_obj_date.asp"},{"title":"Location Object","text":"jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery API jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the jQuery Learning Center. If you're updating to a newer version of jQuery, be sure to read the release notes published on our blog. If you're coming from a version prior 1.9, you should check out the 1.9 Upgrade Guide as well. Note that this is the API documentation for jQuery core. Other projects have API docs in other locations: jQuery UI API docs jQuery Mobile API docs QUnit API docs Traversing > Miscellaneous Traversing .add() Create a new jQuery object with elements added to the set of matched elements. Traversing > Miscellaneous Traversing .addBack() Add the previous set of elements on the stack to the current set, optionally filtered by a selector. Attributes | Manipulation > Class Attribute | CSS .addClass() Adds the specified class(es) to each element in the set of matched elements. Manipulation > DOM Insertion, Outside .after() Insert content, specified by the parameter, after each element in the set of matched elements. Ajax > Global Ajax Event Handlers .ajaxComplete() Register a handler to be called when Ajax requests complete. This is an AjaxEvent. Ajax > Global Ajax Event Handlers .ajaxError() Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSend() Attach a function to be executed before an Ajax request is sent. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStart() Register a handler to be called when the first Ajax request begins. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxStop() Register a handler to be called when all Ajax requests have completed. This is an Ajax Event. Ajax > Global Ajax Event Handlers .ajaxSuccess() Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event. Selectors > Basic All Selector (\u201c*\u201d) Selects all elements. Deprecated > Deprecated 1.8 | Traversing > Miscellaneous Traversing | Removed .andSelf() Add the previous set of elements on the stack to the current set. Effects > Custom .animate() Perform a custom animation of a set of CSS properties. Selectors > Basic Filter | Selectors > jQuery Extensions :animated Selector Select all elements that are in the progress of an animation at the time the selector is run. Manipulation > DOM Insertion, Inside .append() Insert content, specified by the parameter, to the end of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .appendTo() Insert every element in the set of matched elements to the end of the target. Attributes | Manipulation > General Attributes .attr() Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element. Selectors > Attribute Attribute Contains Prefix Selector [name|=\u201dvalue\u201d] Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-). Selectors > Attribute Attribute Contains Selector [name*=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given substring. Selectors > Attribute Attribute Contains Word Selector [name~=\u201dvalue\u201d] Selects elements that have the specified attribute with a value containing a given word, delimited by spaces. Selectors > Attribute Attribute Ends With Selector [name$=\u201dvalue\u201d] Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive. Selectors > Attribute Attribute Equals Selector [name=\u201dvalue\u201d] Selects elements that have the specified attribute with a value exactly equal to a certain value. Selectors > Attribute | Selectors > jQuery Extensions Attribute Not Equal Selector [name!=\u201dvalue\u201d] Select elements that either don\u2019t have the specified attribute, or do have the specified attribute but not with a certain value. Selectors > Attribute Attribute Starts With Selector [name^=\u201dvalue\u201d] Selects elements that have the specified attribute with a value beginning exactly with a given string. Manipulation > DOM Insertion, Outside .before() Insert content, specified by the parameter, before each element in the set of matched elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .bind() Attach a handler to an event for the elements. Events > Form Events | Forms .blur() Bind an event handler to the \u201cblur\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :button Selector Selects all button elements and elements of type button. Callbacks Object callbacks.add() Add a callback or a collection of callbacks to a callback list. Callbacks Object callbacks.disable() Disable a callback list from doing anything more. Callbacks Object callbacks.disabled() Determine if the callbacks list has been disabled. Callbacks Object callbacks.empty() Remove all of the callbacks from a list. Callbacks Object callbacks.fire() Call all of the callbacks with the given arguments. Callbacks Object callbacks.fired() Determine if the callbacks have already been called at least once. Callbacks Object callbacks.fireWith() Call all callbacks in a list with the given context and arguments. Callbacks Object callbacks.has() Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list. Callbacks Object callbacks.lock() Lock a callback list in its current state. Callbacks Object callbacks.locked() Determine if the callbacks list has been locked. Callbacks Object callbacks.remove() Remove a callback or a collection of callbacks from a callback list. Events > Form Events | Forms .change() Bind an event handler to the \u201cchange\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :checkbox Selector Selects all elements of type checkbox. Selectors > Form :checked Selector Matches all elements that are checked or selected. Selectors > Hierarchy Child Selector (\u201cparent > child\u201d) Selects all direct child elements specified by \u201cchild\u201d of elements specified by \u201cparent\u201d. Traversing > Tree Traversal .children() Get the children of each element in the set of matched elements, optionally filtered by a selector. Selectors > Basic Class Selector (\u201c.class\u201d) Selects all elements with the given class. Effects > Custom | Data | Utilities .clearQueue() Remove from the queue all items that have not yet been run. Events > Mouse Events .click() Bind an event handler to the \u201cclick\u201d JavaScript event, or trigger that event on an element. Manipulation > Copying .clone() Create a deep copy of the set of matched elements. Traversing > Tree Traversal .closest() For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree. Selectors > Content Filter :contains() Selector Select all elements that contain the specified text. Traversing > Miscellaneous Traversing .contents() Get the children of each element in the set of matched elements, including text and comment nodes. Deprecated > Deprecated 1.10 | Internals | Properties > Properties of jQuery Object Instances | Removed .context The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document. Events > Mouse Events .contextmenu() Bind an event handler to the \u201ccontextmenu\u201d JavaScript event, or trigger that event on an element. CSS | Manipulation > Style Properties .css() Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element. Data | Miscellaneous > Data Storage .data() Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements. Events > Mouse Events .dblclick() Bind an event handler to the \u201cdblclick\u201d JavaScript event, or trigger that event on an element. Deferred Object deferred.always() Add handlers to be called when the Deferred object is either resolved or rejected. Deferred Object deferred.catch() Add handlers to be called when the Deferred object is rejected. Deferred Object deferred.done() Add handlers to be called when the Deferred object is resolved. Deferred Object deferred.fail() Add handlers to be called when the Deferred object is rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isRejected() Determine whether a Deferred object has been rejected. Deferred Object | Deprecated > Deprecated 1.7 | Removed deferred.isResolved() Determine whether a Deferred object has been resolved. Deferred Object deferred.notify() Call the progressCallbacks on a Deferred object with the given args. Deferred Object deferred.notifyWith() Call the progressCallbacks on a Deferred object with the given context and args. Deferred Object | Deprecated > Deprecated 1.8 deferred.pipe() Utility method to filter and\/or chain Deferreds. Deferred Object deferred.progress() Add handlers to be called when the Deferred object generates progress notifications. Deferred Object deferred.promise() Return a Deferred\u2019s Promise object. Deferred Object deferred.reject() Reject a Deferred object and call any failCallbacks with the given args. Deferred Object deferred.rejectWith() Reject a Deferred object and call any failCallbacks with the given context and args. Deferred Object deferred.resolve() Resolve a Deferred object and call any doneCallbacks with the given args. Deferred Object deferred.resolveWith() Resolve a Deferred object and call any doneCallbacks with the given context and args. Deferred Object deferred.state() Determine the current state of a Deferred object. Deferred Object deferred.then() Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. Effects > Custom .delay() Set a timer to delay execution of subsequent items in the queue. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .delegate() Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements. Effects > Custom | Data | Utilities .dequeue() Execute the next function on the queue for the matched elements. Selectors > Hierarchy Descendant Selector (\u201cancestor descendant\u201d) Selects all elements that are descendants of a given ancestor. Manipulation > DOM Removal .detach() Remove the set of matched elements from the DOM. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .die() Remove event handlers previously attached using .live() from the elements. Selectors > Form :disabled Selector Selects all elements that are disabled. Miscellaneous > Collection Manipulation | Traversing .each() Iterate over a jQuery object, executing a function for each matched element. Selectors > Basic Element Selector (\u201celement\u201d) Selects all elements with the given tag name. Manipulation > DOM Removal .empty() Remove all child nodes of the set of matched elements from the DOM. Selectors > Content Filter :empty Selector Select all elements that have no children (including text nodes). Selectors > Form :enabled Selector Selects all elements that are enabled. Traversing > Miscellaneous Traversing .end() End the most recent filtering operation in the current chain and return the set of matched elements to its previous state. Traversing > Filtering .eq() Reduce the set of matched elements to the one at the specified index. Selectors > Basic Filter | Selectors > jQuery Extensions :eq() Selector Select the element at index n within the matched set. Events > Browser Events | Deprecated > Deprecated 1.8 | Removed .error() Bind an event handler to the \u201cerror\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :even Selector Selects even elements, zero-indexed. See also odd. Events > Event Object event.currentTarget The current DOM element within the event bubbling phase. Events > Event Object event.data An optional object of data passed to an event method when the current executing handler is bound. Events > Event Object | Events event.delegateTarget The element where the currently-called jQuery event handler was attached. Events > Event Object event.isDefaultPrevented() Returns whether event.preventDefault() was ever called on this event object. Events > Event Object event.isImmediatePropagationStopped() Returns whether event.stopImmediatePropagation() was ever called on this event object. Events > Event Object event.isPropagationStopped() Returns whether event.stopPropagation() was ever called on this event object. Events > Event Object event.metaKey Indicates whether the META key was pressed when the event fired. Events > Event Object event.namespace The namespace specified when the event was triggered. Events > Event Object event.pageX The mouse position relative to the left edge of the document. Events > Event Object event.pageY The mouse position relative to the top edge of the document. Events > Event Object event.preventDefault() If this method is called, the default action of the event will not be triggered. Events > Event Object event.relatedTarget The other DOM element involved in the event, if any. Events > Event Object event.result The last value returned by an event handler that was triggered by this event, unless the value was undefined. Events > Event Object event.stopImmediatePropagation() Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree. Events > Event Object event.stopPropagation() Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event. Events > Event Object event.target The DOM element that initiated the event. Events > Event Object event.timeStamp The difference in milliseconds between the time the browser created the event and January 1, 1970. Events > Event Object event.type Describes the nature of the event. Events > Event Object event.which For key or mouse events, this property indicates the specific key or button that was pressed. Effects > Fading .fadeIn() Display the matched elements by fading them to opaque. Effects > Fading .fadeOut() Hide the matched elements by fading them to transparent. Effects > Fading .fadeTo() Adjust the opacity of the matched elements. Effects | Effects > Fading .fadeToggle() Display or hide the matched elements by animating their opacity. Selectors > Form | Selectors > jQuery Extensions :file Selector Selects all elements of type file. Traversing > Filtering .filter() Reduce the set of matched elements to those that match the selector or pass the function\u2019s test. Traversing > Tree Traversal .find() Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element. Effects > Custom .finish() Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements. Traversing > Filtering .first() Reduce the set of matched elements to the first in the set. Selectors > Child Filter :first-child Selector Selects all elements that are the first child of their parent. Selectors > Child Filter :first-of-type Selector Selects all elements that are the first among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :first Selector Selects the first matched DOM element. Events > Form Events | Forms .focus() Bind an event handler to the \u201cfocus\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter | Selectors > Form :focus Selector Selects element if it is currently focused. Events > Form Events | Forms .focusin() Bind an event handler to the \u201cfocusin\u201d event. Events > Form Events | Forms .focusout() Bind an event handler to the \u201cfocusout\u201d JavaScript event. Miscellaneous > DOM Element Methods .get() Retrieve the DOM elements matched by the jQuery object. Selectors > Basic Filter | Selectors > jQuery Extensions :gt() Selector Select all elements at an index greater than index within the matched set. Traversing > Filtering .has() Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element. Selectors > Attribute Has Attribute Selector [name] Selects elements that have the specified attribute, with any value. Selectors > Content Filter | Selectors > jQuery Extensions :has() Selector Selects elements which contain at least one element that matches the specified selector. Attributes | Manipulation > Class Attribute | CSS .hasClass() Determine whether any of the matched elements are assigned the given class. Selectors > Basic Filter | Selectors > jQuery Extensions :header Selector Selects all elements that are headers, like h1, h2, h3 and so on. CSS | Dimensions | Manipulation > Style Properties .height() Get the current computed height for the first element in the set of matched elements or set the height of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :hidden Selector Selects all elements that are hidden. Effects > Basics .hide() Hide the matched elements. Events > Mouse Events .hover() Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements. Attributes | Manipulation > DOM Insertion, Inside .html() Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Selectors > Basic ID Selector (\u201c#id\u201d) Selects a single element with the given id attribute. Selectors > Form | Selectors > jQuery Extensions :image Selector Selects all elements of type image. Miscellaneous > DOM Element Methods .index() Search for a given element from among the matched elements. CSS | Dimensions | Manipulation > Style Properties .innerHeight() Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element. CSS | Dimensions | Manipulation > Style Properties .innerWidth() Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element. Selectors > Form | Selectors > jQuery Extensions :input Selector Selects all input, textarea, select and button elements. Manipulation > DOM Insertion, Outside .insertAfter() Insert every element in the set of matched elements after the target. Manipulation > DOM Insertion, Outside .insertBefore() Insert every element in the set of matched elements before the target. Traversing > Filtering .is() Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments. Core jQuery() Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string. Internals | Properties > Properties of jQuery Object Instances .jquery A string containing the jQuery version number. Ajax > Low-Level Interface jQuery.ajax() Perform an asynchronous HTTP (Ajax) request. Ajax > Low-Level Interface jQuery.ajaxPrefilter() Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax(). Ajax > Low-Level Interface jQuery.ajaxSetup() Set default values for future Ajax requests. Its use is not recommended. Ajax > Low-Level Interface jQuery.ajaxTransport() Creates an object that handles the actual transmission of Ajax data. Deprecated > Deprecated 1.3 | Removed | Utilities jQuery.boxModel States if the current page, in the user\u2019s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead. Deprecated > Deprecated 1.3 | Properties > Properties of the Global jQuery Object | Removed | Utilities jQuery.browser Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead. Callbacks Object jQuery.Callbacks() A multi-purpose callbacks list object that provides a powerful way to manage callback lists. Utilities jQuery.contains() Check to see if a DOM element is a descendant of another DOM element. CSS jQuery.cssHooks Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties. CSS | Manipulation > Style Properties jQuery.cssNumber An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values. Data | Utilities jQuery.data() Store arbitrary data associated with the specified element and\/or return the value that was set. Deferred Object jQuery.Deferred() A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function. Data | Utilities jQuery.dequeue() Execute the next function on the queue for the matched element. Utilities jQuery.each() A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function\u2019s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties. Internals jQuery.error() Takes a string and throws an exception containing it. CSS jQuery.escapeSelector() Escapes any character that has a special meaning in a CSS selector. Utilities jQuery.extend() Merge the contents of two or more objects together into the first object. Utilities jQuery.fn.extend() Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods. Effects > Custom | Deprecated > Deprecated 3.0 | Properties > Properties of the Global jQuery Object jQuery.fx.interval The rate (in milliseconds) at which animations fire. Effects > Custom | Properties > Properties of the Global jQuery Object jQuery.fx.off Globally disable all animations. Ajax > Shorthand Methods jQuery.get() Load data from the server using a HTTP GET request. Ajax > Shorthand Methods jQuery.getJSON() Load JSON-encoded data from the server using a GET HTTP request. Ajax > Shorthand Methods jQuery.getScript() Load a JavaScript file from the server using a GET HTTP request, then execute it. Utilities jQuery.globalEval() Execute some JavaScript code globally. Utilities jQuery.grep() Finds the elements of an array which satisfy a filter function. The original array is not affected. Data jQuery.hasData() Determine whether an element has any jQuery data associated with it. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.holdReady() Holds or releases the execution of jQuery\u2019s ready event. Manipulation jQuery.htmlPrefilter() Modify and filter HTML strings passed through jQuery manipulation methods. Utilities jQuery.inArray() Search for a specified value within an array and return its index (or -1 if not found). Utilities jQuery.isArray() Determine whether the argument is an array. Utilities jQuery.isEmptyObject() Check to see if an object is empty (contains no enumerable properties). Utilities jQuery.isFunction() Determine if the argument passed is a JavaScript function object. Utilities jQuery.isNumeric() Determines whether its argument represents a JavaScript number. Utilities jQuery.isPlainObject() Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d). Utilities jQuery.isWindow() Determine whether the argument is a window. Utilities jQuery.isXMLDoc() Check to see if a DOM node is within an XML document (or is an XML document). Utilities jQuery.makeArray() Convert an array-like object into a true JavaScript array. Utilities jQuery.map() Translate all items in an array or object to new array of items. Utilities jQuery.merge() Merge the contents of two arrays together into the first array. Core | Miscellaneous > Setup Methods jQuery.noConflict() Relinquish jQuery\u2019s control of the $ variable. Utilities jQuery.noop() An empty function. Utilities jQuery.now() Return a number representing the current time. Miscellaneous > Collection Manipulation | Forms | Ajax > Helper Functions jQuery.param() Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name\/value properties. Utilities jQuery.parseHTML() Parses a string into an array of DOM nodes. Utilities jQuery.parseJSON() Takes a well-formed JSON string and returns the resulting JavaScript value. Utilities jQuery.parseXML() Parses a string into an XML document. Ajax > Shorthand Methods jQuery.post() Load data from the server using a HTTP POST request. Events > Event Handler Attachment | Utilities jQuery.proxy() Takes a function and returns a new one that will always have a particular context. Data | Utilities jQuery.queue() Show or manipulate the queue of functions to be executed on the matched element. Core | Events > Document Loading | Properties > Properties of the Global jQuery Object jQuery.ready A Promise-like object (or \u201cthenable\u201d) that resolves when the document is ready. Core jQuery.readyException() Handles errors thrown synchronously in functions wrapped in jQuery(). Data | Utilities jQuery.removeData() Remove a previously-stored piece of data. Effects > Custom jQuery.speed Creates an object containing a set of properties ready to be used in the definition of custom animations. Core | Deprecated > Deprecated 1.7 | Removed jQuery.sub() Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object. Deprecated > Deprecated 1.9 | Properties > Properties of the Global jQuery Object | Utilities jQuery.support A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery\u2019s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project\u2019s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support. Utilities jQuery.trim() Remove the whitespace from the beginning and end of a string. Utilities jQuery.type() Determine the internal JavaScript [[Class]] of an object. Utilities jQuery.unique() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Utilities jQuery.uniqueSort() Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers. Core | Deferred Object jQuery.when() Provides a way to execute callback functions based on zero or more Thenable objects, usually Deferred objects that represent asynchronous events. Events > Keyboard Events .keydown() Bind an event handler to the \u201ckeydown\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keypress() Bind an event handler to the \u201ckeypress\u201d JavaScript event, or trigger that event on an element. Events > Keyboard Events .keyup() Bind an event handler to the \u201ckeyup\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :lang() Selector Selects all elements of the specified language. Traversing > Filtering .last() Reduce the set of matched elements to the final one in the set. Selectors > Child Filter :last-child Selector Selects all elements that are the last child of their parent. Selectors > Child Filter :last-of-type Selector Selects all elements that are the last among siblings of the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :last Selector Selects the last matched element. Properties > Properties of jQuery Object Instances .length The number of elements in the jQuery object. Deprecated > Deprecated 1.7 | Events > Event Handler Attachment | Removed .live() Attach an event handler for all elements which match the current selector, now and in the future. Ajax > Shorthand Methods .load() Load data from the server and place the returned HTML into the matched element. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .load() Bind an event handler to the \u201cload\u201d JavaScript event. Selectors > Basic Filter | Selectors > jQuery Extensions :lt() Selector Select all elements at an index less than index within the matched set. Traversing > Filtering .map() Pass each element in the current matched set through a function, producing a new jQuery object containing the return values. Events > Mouse Events .mousedown() Bind an event handler to the \u201cmousedown\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseenter() Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element. Events > Mouse Events .mouseleave() Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element. Events > Mouse Events .mousemove() Bind an event handler to the \u201cmousemove\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseout() Bind an event handler to the \u201cmouseout\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseover() Bind an event handler to the \u201cmouseover\u201d JavaScript event, or trigger that event on an element. Events > Mouse Events .mouseup() Bind an event handler to the \u201cmouseup\u201d JavaScript event, or trigger that event on an element. Selectors > Attribute Multiple Attribute Selector [name=\u201dvalue\u201d][name2=\u201dvalue2\u2033] Matches elements that match all of the specified attribute filters. Selectors > Basic Multiple Selector (\u201cselector1, selector2, selectorN\u201d) Selects the combined results of all the specified selectors. Traversing > Tree Traversal .next() Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector. Selectors > Hierarchy Next Adjacent Selector (\u201cprev + next\u201d) Selects all next elements matching \u201cnext\u201d that are immediately preceded by a sibling \u201cprev\u201d. Selectors > Hierarchy Next Siblings Selector (\u201cprev ~ siblings\u201d) Selects all sibling elements that follow after the \u201cprev\u201d element, have the same parent, and match the filtering \u201csiblings\u201d selector. Traversing > Tree Traversal .nextAll() Get all following siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .nextUntil() Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed. Traversing > Filtering | Traversing > Miscellaneous Traversing .not() Remove elements from the set of matched elements. Selectors > Basic Filter :not() Selector Selects all elements that do not match the given selector. Selectors > Child Filter :nth-child() Selector Selects all elements that are the nth-child of their parent. Selectors > Child Filter :nth-last-child() Selector Selects all elements that are the nth-child of their parent, counting from the last element to the first. Selectors > Child Filter :nth-last-of-type() Selector Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first. Selectors > Child Filter :nth-of-type() Selector Selects all elements that are the nth child of their parent in relation to siblings with the same element name. Selectors > Basic Filter | Selectors > jQuery Extensions :odd Selector Selects odd elements, zero-indexed. See also even. Events > Event Handler Attachment .off() Remove an event handler. CSS | Offset | Manipulation > Style Properties .offset() Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document. Offset | Traversing > Tree Traversal .offsetParent() Get the closest ancestor element that is positioned. Events > Event Handler Attachment .on() Attach an event handler function for one or more events to the selected elements. Events > Event Handler Attachment .one() Attach a handler to an event for the elements. The handler is executed at most once per element per event type. Selectors > Child Filter :only-child Selector Selects all elements that are the only child of their parent. Selectors > Child Filter :only-of-type Selector Selects all elements that have no siblings with the same element name. CSS | Dimensions | Manipulation > Style Properties .outerHeight() Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer height of every matched element. CSS | Dimensions | Manipulation > Style Properties .outerWidth() Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements or set the outer width of every matched element. Traversing > Tree Traversal .parent() Get the parent of each element in the current set of matched elements, optionally filtered by a selector. Selectors > Content Filter | Selectors > jQuery Extensions :parent Selector Select all elements that have at least one child node (either an element or text). Traversing > Tree Traversal .parents() Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .parentsUntil() Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object. Selectors > Form | Selectors > jQuery Extensions :password Selector Selects all elements of type password. CSS | Offset | Manipulation > Style Properties .position() Get the current coordinates of the first element in the set of matched elements, relative to the offset parent. Manipulation > DOM Insertion, Inside .prepend() Insert content, specified by the parameter, to the beginning of each element in the set of matched elements. Manipulation > DOM Insertion, Inside .prependTo() Insert every element in the set of matched elements to the beginning of the target. Traversing > Tree Traversal .prev() Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector. Traversing > Tree Traversal .prevAll() Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector. Traversing > Tree Traversal .prevUntil() Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object. Deferred Object .promise() Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. Attributes | Manipulation > General Attributes .prop() Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element. Internals .pushStack() Add a collection of DOM elements onto the jQuery stack. Effects > Custom | Data | Utilities .queue() Show or manipulate the queue of functions to be executed on the matched elements. Selectors > Form | Selectors > jQuery Extensions :radio Selector Selects all elements of type radio. Events > Document Loading .ready() Specify a function to execute when the DOM is fully loaded. Manipulation > DOM Removal .remove() Remove the set of matched elements from the DOM. Attributes | Manipulation > General Attributes .removeAttr() Remove an attribute from each element in the set of matched elements. Attributes | Manipulation > Class Attribute | CSS .removeClass() Remove a single class, multiple classes, or all classes from each element in the set of matched elements. Data | Miscellaneous > Data Storage .removeData() Remove a previously-stored piece of data. Attributes | Manipulation > General Attributes .removeProp() Remove a property for the set of matched elements. Manipulation > DOM Replacement .replaceAll() Replace each target element with the set of matched elements. Manipulation > DOM Replacement .replaceWith() Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed. Selectors > Form | Selectors > jQuery Extensions :reset Selector Selects all elements of type reset. Events > Browser Events .resize() Bind an event handler to the \u201cresize\u201d JavaScript event, or trigger that event on an element. Selectors > Basic Filter :root Selector Selects the element that is the root of the document. Events > Browser Events .scroll() Bind an event handler to the \u201cscroll\u201d JavaScript event, or trigger that event on an element. CSS | Offset | Manipulation > Style Properties .scrollLeft() Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element. CSS | Offset | Manipulation > Style Properties .scrollTop() Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element. Events > Form Events | Forms .select() Bind an event handler to the \u201cselect\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :selected Selector Selects all elements that are selected. Deprecated > Deprecated 1.7 | Internals | Properties > Properties of jQuery Object Instances | Removed .selector A selector representing selector passed to jQuery(), if any, when creating the original set. Forms | Ajax > Helper Functions .serialize() Encode a set of form elements as a string for submission. Forms | Ajax > Helper Functions .serializeArray() Encode a set of form elements as an array of names and values. Effects > Basics .show() Display the matched elements. Traversing > Tree Traversal .siblings() Get the siblings of each element in the set of matched elements, optionally filtered by a selector. Deprecated > Deprecated 1.8 | Miscellaneous > DOM Element Methods | Removed .size() Return the number of elements in the jQuery object. Traversing > Filtering .slice() Reduce the set of matched elements to a subset specified by a range of indices. Effects > Sliding .slideDown() Display the matched elements with a sliding motion. Effects > Sliding .slideToggle() Display or hide the matched elements with a sliding motion. Effects > Sliding .slideUp() Hide the matched elements with a sliding motion. Effects > Custom .stop() Stop the currently-running animation on the matched elements. Events > Form Events | Forms .submit() Bind an event handler to the \u201csubmit\u201d JavaScript event, or trigger that event on an element. Selectors > Form | Selectors > jQuery Extensions :submit Selector Selects all elements of type submit. Selectors > Basic Filter :target Selector Selects the target element indicated by the fragment identifier of the document\u2019s URI. Manipulation > DOM Insertion, Inside .text() Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements. Selectors > Form | Selectors > jQuery Extensions :text Selector Selects all input elements of type text. Miscellaneous > DOM Element Methods .toArray() Retrieve all the elements contained in the jQuery set, as an array. Effects > Basics .toggle() Display or hide the matched elements. Deprecated > Deprecated 1.8 | Events > Mouse Events | Removed .toggle() Bind two or more handlers to the matched elements, to be executed on alternate clicks. Attributes | Manipulation > Class Attribute | CSS .toggleClass() Add or remove one or more classes from each element in the set of matched elements, depending on either the class\u2019s presence or the value of the state argument. Events > Event Handler Attachment .trigger() Execute all handlers and behaviors attached to the matched elements for the given event type. Events > Event Handler Attachment .triggerHandler() Execute all handlers attached to an element for an event. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .unbind() Remove a previously-attached event handler from the elements. Deprecated > Deprecated 3.0 | Events > Event Handler Attachment .undelegate() Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements. Deprecated > Deprecated 1.8 | Events > Document Loading | Removed .unload() Bind an event handler to the \u201cunload\u201d JavaScript event. Manipulation > DOM Insertion, Around | Manipulation > DOM Removal .unwrap() Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place. Attributes | Forms | Manipulation > General Attributes .val() Get the current value of the first element in the set of matched elements or set the value of every matched element. Selectors > jQuery Extensions | Selectors > Visibility Filter :visible Selector Selects all elements that are visible. CSS | Dimensions | Manipulation > Style Properties .width() Get the current computed width for the first element in the set of matched elements or set the width of every matched element. Manipulation > DOM Insertion, Around .wrap() Wrap an HTML structure around each element in the set of matched elements. Manipulation > DOM Insertion, Around .wrapAll() Wrap an HTML structure around all elements in the set of matched elements. Manipulation > DOM Insertion, Around .wrapInner() Wrap an HTML structure around the content of each element in the set of matched elements. Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation .html() Categories: Attributes | Manipulation > DOM Insertion, Inside Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element. Contents: .html().html() .html( htmlString ).html( htmlString ) .html( function ) .html()Returns: String Description: Get the HTML contents of the first element in the set of matched elements. version added: 1.0.html() This method does not accept any arguments. This method is not available on XML documents. In an HTML document, .html() can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code: 1 $( \"div.demo-container\" ).html(); In order for the following 's content to be retrieved, it would have to be the first one with class=\"demo-container\" in the document: 1 2 3 Demonstration Box The result would look like this: 1 Demonstration Box This method uses the browser's innerHTML property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters. Additional Notes: By design, any jQuery constructor or method that accepts an HTML string \u2014 jQuery(), .append(), .after(), etc. \u2014 can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, ). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. Example: Click a paragraph to convert it from html to text. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 html demo p { margin: 8px; font-size: 20px; color: blue; cursor: pointer; } b { text-decoration: underline; } button { cursor: pointer; } Click to change the html to a text node. This button does nothing. $( \"p\" ).click(function() { var htmlString = $( this ).html(); $( this ).text( htmlString );}); Demo: .html( htmlString )Returns: jQuery Description: Set the HTML contents of each element in the set of matched elements. version added: 1.0.html( htmlString ) htmlString Type: htmlString A string of HTML to set as the content of each matched element. version added: 1.4.html( function ) function Type: Function( Integer index, htmlString oldhtml ) => htmlString A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set. The .html() method is not available in XML documents. When .html() is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content. Consider the following HTML: 1 2 3 Demonstration Box The content of can be set like this: 1 2 $( \"div.demo-container\" ) .html( \"All new content. You bet!\" ); That line of code will replace everything inside : 1 2 3 All new content. You bet! As of jQuery 1.4, the .html() method allows the HTML content to be set by passing in a function. 1 2 3 4 $( \"div.demo-container\" ).html(function() { var emphasis = \"\" + $( \"p\" ).length + \" paragraphs!\"; return \"All new content for \" + emphasis + \"\";}); Given a document with six paragraphs, this example will set the HTML of to All new content for 6 paragraphs!. This method uses the browser's innerHTML property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all href properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate compatibility layer. To set the content of a element, which does not contain HTML, use the .text() method and not .html(). Note: In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use .empty().html( string ) instead of .html(string) so that the elements are removed from the document before the new string is assigned to the element. Examples: Add some html to each div. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 html demo .red { color: red; } Hello $( \"div\" ).html( \"Hello Again\" ); Demo: Add some html to each div then immediately do further manipulations to the inserted html. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 html demo div { color: blue; font-size: 18px; } $( \"div\" ).html( \"Wow! Such excitement...\" );$( \"div b\" ) .append( document.createTextNode( \"!!!\" ) ) .css( \"color\", \"red\" ); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.ajax() Categories: Ajax > Low-Level Interface jQuery.ajax( url [, settings ] )Returns: jqXHR Description: Perform an asynchronous HTTP (Ajax) request. version added: 1.5jQuery.ajax( url [, settings ] ) url Type: String A string containing the URL to which the request is sent. settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. version added: 1.0jQuery.ajax( [settings ] ) settings Type: PlainObject A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). accepts (default: depends on DataType) Type: PlainObject A set of key\/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type mycustomtype to be sent with the request: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 $.ajax({ accepts: { mycustomtype: 'application\/x-some-custom-type' }, \/\/ Instructions for how to deserialize a `mycustomtype` converters: { 'text mycustomtype': function(result) { \/\/ Do Stuff return newresult; } }, \/\/ Expect a `mycustomtype` back from server dataType: 'mycustomtype'}); Note: You will need to specify a complementary entry for this type in converters for this to work properly. async (default: true) Type: Boolean By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success\/error\/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done(). beforeSend Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request. cache (default: true, false for dataType 'script' and 'jsonp') Type: Boolean If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET. complete Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (\"success\", \"notmodified\", \"nocontent\", \"error\", \"timeout\", \"abort\", or \"parsererror\"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. contents Type: PlainObject An object of string\/regular-expression pairs that determine how jQuery will parse the response, given its content type. (version added: 1.5) contentType (default: 'application\/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String When sending data to the server, use this content type. Default is \"application\/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application\/x-www-form-urlencoded, multipart\/form-data, or text\/plain will trigger the browser to send a preflight OPTIONS request to the server. context Type: PlainObject This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax). For example, specifying a DOM element as the context will make that the context for the complete callback of a request, like so: 1 2 3 4 5 6 $.ajax({ url: \"test.html\", context: document.body}).done(function() { $( this ).addClass( \"done\" );}); converters (default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response. (version added: 1.5) crossDomain (default: false for same-domain requests, true for cross-domain requests) Type: Boolean If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5) data Type: PlainObject or String or Array Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key\/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). dataFilter Type: Function( String data, String type ) => Anything A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter. dataType (default: Intelligent Guess (xml, json, script, or html)) Type: String The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: \"xml\": Returns a XML document that can be processed via jQuery. \"html\": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM. \"script\": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. \"json\": Evaluates the response as JSON and returns a JavaScript object. Cross-domain \"json\" requests are converted to \"jsonp\" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.) \"jsonp\": Loads in a JSON block using JSONP. Adds an extra \"?callback=?\" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, \"_=[TIMESTAMP]\", to the URL unless the cache option is set to true. \"text\": A plain text string. multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use \"text xml\" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: \"jsonp text xml\". Similarly, a shorthand string such as \"jsonp xml\" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml. error Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event. global (default: true) Type: Boolean Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events. headers (default: {}) Type: PlainObject An object of additional header key\/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function. (version added: 1.5) ifModified (default: false) Type: Boolean Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data. isLocal (default: depends on current location protocol) Type: Boolean Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method. (version added: 1.5.1) jsonp Type: String or Boolean Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons. jsonpCallback Type: String or Function() Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function. method (default: 'GET') Type: String The HTTP method to use for the request (e.g. \"POST\", \"GET\", \"PUT\"). (version added: 1.9.0) mimeType Type: String A mime type to override the XHR mime type. (version added: 1.5.1) password Type: String A password to be used with XMLHttpRequest in response to an HTTP access authentication request. processData (default: true) Type: Boolean By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application\/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false. scriptCharset Type: String Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. statusCode (default: {}) Type: PlainObject An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404: 1 2 3 4 5 6 7 $.ajax({ statusCode: { 404: function() { alert( \"page not found\" ); } }}); If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback. (version added: 1.5) success Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event. timeout Type: Number Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period. traditional Type: Boolean Set this to true if you wish to use the traditional style of param serialization. type (default: 'GET') Type: String An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0. url (default: The current page) Type: String A string containing the URL to which the request is sent. username Type: String A username to be used with XMLHttpRequest in response to an HTTP access authentication request. xhr (default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory. xhrFields Type: PlainObject An object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed. 1 2 3 4 5 6 $.ajax({ url: a_cross_domain_url, xhrFields: { withCredentials: true }}); In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it. (version added: 1.5.1) The $.ajax() function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like $.get() and .load() are available and are easier to use. If less common options are required, though, $.ajax() can be used more flexibly. At its simplest, the $.ajax() function can be called with no arguments: 1 $.ajax(); Note: Default settings can be set globally by using the $.ajaxSetup() function. This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions. The jqXHR Object The jQuery XMLHttpRequest (jqXHR) object returned by $.ajax() as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains responseText and responseXML properties, as well as a getResponseHeader() method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the jqXHR object simulates native XHR functionality where possible. As of jQuery 1.5.1, the jqXHR object also contains the overrideMimeType() method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The .overrideMimeType() method may be used in the beforeSend() callback function, for example, to modify the response content-type header: 1 2 3 4 5 6 7 8 9 10 11 $.ajax({ url: \"http:\/\/fiddle.jshell.net\/favicon.png\", beforeSend: function( xhr ) { xhr.overrideMimeType( \"text\/plain; charset=x-user-defined\" ); }}) .done(function( data ) { if ( console && console.log ) { console.log( \"Sample of data:\", data.slice( 0, 100 ) ); } }); The jqXHR objects returned by $.ajax() as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the $.ajax() request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to deferred.done() for implementation details. jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the .fail() method replaces the deprecated .error() method. Refer to deferred.fail() for implementation details. jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the .always() method replaces the deprecated .complete() method. In response to a successful request, the function's arguments are the same as those of .done(): data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of .fail(): the jqXHR object, textStatus, and errorThrown. Refer to deferred.always() for implementation details. jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the .done() and .fail() methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to deferred.then() for implementation details. Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqXHR object for this requestvar jqxhr = $.ajax( \"example.php\" ) .done(function() { alert( \"success\" ); }) .fail(function() { alert( \"error\" ); }) .always(function() { alert( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.always(function() { alert( \"second complete\" );}); The this reference within all callbacks is the object in the context option passed to $.ajax in the settings; if context is not specified, this is a reference to the Ajax settings themselves. For backward compatibility with XMLHttpRequest, a jqXHR object will expose the following properties and methods: readyState responseXML and\/or responseText when the underlying request responded with xml and\/or text, respectively status statusText abort( [ statusText ] ) getAllResponseHeaders() as a string getResponseHeader( name ) overrideMimeType( mimeType ) setRequestHeader( name, value ) which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one statusCode( callbacksByStatusCode ) No onreadystatechange mechanism is provided, however, since done, fail, always, and statusCode cover all conceivable requirements. Callback Function Queues The beforeSend, error, dataFilter, success and complete options all accept callback functions that are invoked at the appropriate times. As of jQuery 1.5, the fail and done, and, as of jQuery 1.6, always callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these $.ajax() callback hooks. The callback hooks provided by $.ajax() are as follows: beforeSend callback option is invoked; it receives the jqXHR object and the settings object as parameters. error callback option is invoked, if the request fails. It receives the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\". dataFilter callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success. success callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the jqXHR object. Promise callbacks \u2014 .done(), .fail(), .always(), and .then() \u2014 are invoked, in the order they are registered. complete callback option fires, when the request finishes, whether in failure or success. It receives the jqXHR object, as well as a string containing the success or error code. Data Types Different types of response to $.ajax() call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the dataType option. If the dataType option is provided, the Content-Type header of the response will be disregarded. The available data types are text, html, xml, json, jsonp, and script. If text or html is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the responseText property of the jqXHR object. If xml is specified, the response is parsed using jQuery.parseXML before being passed, as an XMLDocument, to the success handler. The XML document is made available through the responseXML property of the jqXHR object. If json is specified, the response is parsed using jQuery.parseJSON before being passed, as an object, to the success handler. The parsed JSON object is made available through the responseJSON property of the jqXHR object. If script is specified, $.ajax() will execute the JavaScript that is received from the server before passing it on to the success handler as a string. If jsonp is specified, $.ajax() will automatically append a query string parameter of (by default) callback=? to the URL. The jsonp and jsonpCallback properties of the settings passed to $.ajax() can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. $.ajax() will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the $.ajax() success handler. For more information on JSONP, see the original post detailing its use. Sending Data to the Server By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the type option. This option affects how the contents of the data option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard. The data option can contain either a query string of the form key1=value1&key2=value2, or an object of the form {key1: 'value1', key2: 'value2'}. If the latter form is used, the data is converted into a query string using jQuery.param() before it is sent. This processing can be circumvented by setting processData to false. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the contentType option from application\/x-www-form-urlencoded to a more appropriate MIME type. Advanced Options The global option prevents handlers registered using .ajaxSend(), .ajaxError(), and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with .ajaxSend() if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to false. See the descriptions of these methods below for more details. If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the username and password options. Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using $.ajaxSetup() rather than being overridden for specific requests with the timeout option. By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set cache to false. To cause the request to report failure if the asset has not been modified since the last request, set ifModified to true. The scriptCharset allows the character set to be explicitly specified for requests that use a tag (that is, a type of script or jsonp). This is useful if the script and host page have differing character sets. The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The async option to $.ajax() defaults to true, indicating that code execution can continue after the request is made. Setting this option to false (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive. The $.ajax() function returns the XMLHttpRequest object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the xhr option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling .abort() on the object will halt the request before it completes. Extending Ajax As of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility. Using Converters $.ajax() converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g json), you must add a correspondence between the response Content-Type and the actual data type using the contents option: 1 2 3 4 5 6 7 8 9 10 11 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression). To convert from a supported type (e.g text, json) to a custom data type and back again, use another pass-through converter: 1 2 3 4 5 6 7 8 9 10 11 12 $.ajaxSetup({ contents: { mycustomtype: \/mycustomtype\/ }, converters: { \"text mycustomtype\": true, \"mycustomtype json\": function( result ) { \/\/ Do stuff return newresult; } }}); The above now allows passing from text to mycustomtype and then mycustomtype to json. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Save some data to the server and notify the user once it's complete. 1 2 3 4 5 6 7 8 $.ajax({ method: \"POST\", url: \"some.php\", data: { name: \"John\", location: \"Boston\" }}) .done(function( msg ) { alert( \"Data Saved: \" + msg ); }); Retrieve the latest version of an HTML page. 1 2 3 4 5 6 7 $.ajax({ url: \"test.html\", cache: false}) .done(function( html ) { $( \"#results\" ).append( html ); }); Send an xml document as data to the server. By setting the processData option to false, the automatic conversion of data to strings is prevented. 1 2 3 4 5 6 7 8 var xmlDocument = [create xml document];var xmlRequest = $.ajax({ url: \"page.php\", processData: false, data: xmlDocument}); xmlRequest.done( handleResponse ); Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 var menuId = $( \"ul.nav\" ).first().attr( \"id\" );var request = $.ajax({ url: \"script.php\", method: \"POST\", data: { id : menuId }, dataType: \"html\"}); request.done(function( msg ) { $( \"#log\" ).html( msg );}); request.fail(function( jqXHR, textStatus ) { alert( \"Request failed: \" + textStatus );}); Load and execute a JavaScript file. 1 2 3 4 5 $.ajax({ method: \"GET\", url: \"test.js\", dataType: \"script\"}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getJSON() Categories: Ajax > Shorthand Methods jQuery.getJSON( url [, data ] [, success ] )Returns: jqXHR Description: Load JSON-encoded data from the server using a GET HTTP request. version added: 1.0jQuery.getJSON( url [, data ] [, success ] ) url Type: String A string containing the URL to which the request is sent. data Type: PlainObject or String A plain object or string that is sent to the server with the request. success Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 6 $.ajax({ dataType: \"json\", url: url, data: data, success: success}); Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL. Most implementations will specify a success handler: 1 2 3 4 5 6 7 8 9 10 11 $.getJSON( \"ajax\/test.json\", function( data ) { var items = []; $.each( data, function( key, val ) { items.push( \"\" + val + \"\" ); }); $( \"\", { \"class\": \"my-new-list\", html: items.join( \"\" ) }).appendTo( \"body\" );}); This example, of course, relies on the structure of the JSON file: 1 2 3 4 5 { \"one\": \"Singular sensation\", \"two\": \"Beady little eyes\", \"three\": \"Little birds pitch by my doorstep\"} Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body. The success callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the $.parseJSON() method. It is also passed the text status of the response. As of jQuery 1.5, the success callback function receives a \"jqXHR\" object (in jQuery 1.4, it received the XMLHttpRequest object). However, since JSONP and cross-domain GET requests do not use XHR, in those cases the jqXHR and textStatus parameters passed to the success callback are undefined. Important: As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see http:\/\/json.org\/. JSONP If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the jsonp data type in $.ajax() for more details. The jqXHR Object As of jQuery 1.5, all of jQuery's Ajax methods return a superset of the XMLHTTPRequest object. This jQuery XHR object, or \"jqXHR,\" returned by $.getJSON() implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see Deferred object for more information). The jqXHR.done() (for success), jqXHR.fail() (for error), and jqXHR.always() (for completion, whether success or error; added in jQuery 1.6) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the jqXHR Object section of the $.ajax() documentation. The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including $.getJSON(), to chain multiple .done(), .always(), and .fail() callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \/\/ Assign handlers immediately after making the request,\/\/ and remember the jqxhr object for this requestvar jqxhr = $.getJSON( \"example.json\", function() { console.log( \"success\" );}) .done(function() { console.log( \"second success\" ); }) .fail(function() { console.log( \"error\" ); }) .always(function() { console.log( \"complete\" ); }); \/\/ Perform other work here ... \/\/ Set another completion function for the request abovejqxhr.complete(function() { console.log( \"second complete\" );}); Deprecation Notice The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callback methods are removed as of jQuery 3.0. You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead. Additional Notes: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. Script and JSONP requests are not subject to the same origin policy restrictions. Examples: Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 jQuery.getJSON demo img { height: 100px; float: left; } (function() { var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\"; $.getJSON( flickerAPI, { tags: \"mount rainier\", tagmode: \"any\", format: \"json\" }) .done(function( data ) { $.each( data.items, function( i, item ) { $( \"\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" ); if ( i === 3 ) { return false; } }); });})(); Demo: Load the JSON data from test.js and access a name from the returned JSON data. 1 2 3 $.getJSON( \"test.js\", function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }); Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead. 1 2 3 4 5 6 7 8 $.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } ) .done(function( json ) { console.log( \"JSON Data: \" + json.users[ 3 ].name ); }) .fail(function( jqxhr, textStatus, error ) { var err = textStatus + \", \" + error; console.log( \"Request Failed: \" + err );}); Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); jQuery jQuery UI jQuery Mobile Sizzle QUnit Plugins Contribute CLA Style Guides Bug Triage Code Documentation Web Sites Events Support Learning Center Try jQuery IRC\/Chat Forums Stack Overflow Commercial Support jQuery Foundation Join Members Team Conduct Brand Guide Donate jQuery API Documentation Download API Documentation Blog Plugins Browser Support search Search jQuery API Documentation jQuery.getScript() Categories: Ajax > Shorthand Methods jQuery.getScript( url [, success ] )Returns: jqXHR Description: Load a JavaScript file from the server using a GET HTTP request, then execute it. version added: 1.0jQuery.getScript( url [, success ] ) url Type: String A string containing the URL to which the request is sent. success Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. This is a shorthand Ajax function, which is equivalent to: 1 2 3 4 5 $.ajax({ url: url, dataType: \"script\", success: success}); The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page. Success Callback The callback is fired once the script has been loaded but not necessarily executed. Scripts are included and run by referencing the file name: 1 2 3 4 5 6 $.getScript( \"ajax\/test.js\", function( data, textStatus, jqxhr ) { console.log( data ); \/\/ Data returned console.log( textStatus ); \/\/ Success console.log( jqxhr.status ); \/\/ 200 console.log( \"Load was performed.\" );}); Handling Errors As of jQuery 1.5, you may use .fail() to account for errors: 1 2 3 4 5 6 7 $.getScript( \"ajax\/test.js\" ) .done(function( script, textStatus ) { console.log( textStatus ); }) .fail(function( jqxhr, settings, exception ) { $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );}); Prior to jQuery 1.5, the global .ajaxError() callback event had to be used in order to handle $.getScript() errors: 1 2 3 4 5 $( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) { if ( settings.dataType == \"script\" ) { $( this ).text( \"Triggered ajaxError handler.\" ); }}); Caching Responses By default, $.getScript() sets the cache setting to false. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using $.ajaxSetup(): 1 2 3 $.ajaxSetup({ cache: true}); Alternatively, you could define a new method that uses the more flexible $.ajax() method. Examples: Define a $.cachedScript() method that allows fetching a cached script: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 jQuery.cachedScript = function( url, options ) { \/\/ Allow user to set any option except for dataType, cache, and url options = $.extend( options || {}, { dataType: \"script\", cache: true, url: url }); \/\/ Use $.ajax() since it is more flexible than $.getScript \/\/ Return the jqXHR object so we can chain callbacks return jQuery.ajax( options );}; \/\/ Usage$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) { console.log( textStatus );}); Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 jQuery.getScript demo .block { background-color: blue; width: 150px; height: 70px; margin: 10px; } &raquo; Run var url = \"https:\/\/code.jquery.com\/color\/jquery.color.js\";$.getScript( url, function() { $( \"#go\" ).click(function() { $( \".block\" ) .animate({ backgroundColor: \"rgb(255, 180, 180)\" }, 1000 ) .delay( 500 ) .animate({ backgroundColor: \"olive\" }, 1000 ) .delay( 500\u00a0) .animate({ backgroundColor: \"#00f\" }, 1000 ); });}); Demo: Ajax Global Ajax Event Handlers Helper Functions Low-Level Interface Shorthand Methods Attributes Callbacks Object Core CSS Data Deferred Object Deprecated Deprecated 1.3 Deprecated 1.7 Deprecated 1.8 Deprecated 1.9 Deprecated 1.10 Deprecated 3.0 Dimensions Effects Basics Custom Fading Sliding Events Browser Events Document Loading Event Handler Attachment Event Object Form Events Keyboard Events Mouse Events Forms Internals Manipulation Class Attribute Copying DOM Insertion, Around DOM Insertion, Inside DOM Insertion, Outside DOM Removal DOM Replacement General Attributes Style Properties Miscellaneous Collection Manipulation Data Storage DOM Element Methods Setup Methods Offset Properties Properties of jQuery Object Instances Properties of the Global jQuery Object Removed Selectors Attribute Basic Basic Filter Child Filter Content Filter Form Hierarchy jQuery Extensions Visibility Filter Traversing Filtering Miscellaneous Traversing Tree Traversal Utilities Version Version 1.0 Version 1.0.4 Version 1.1 Version 1.1.2 Version 1.1.3 Version 1.1.4 Version 1.2 Version 1.2.3 Version 1.2.6 Version 1.3 Version 1.4 Version 1.4.1 Version 1.4.2 Version 1.4.3 Version 1.4.4 Version 1.5 Version 1.5.1 Version 1.6 Version 1.7 Version 1.8 Version 1.9 Version 1.12 & 2.2 Version 3.0 Version 3.1 Books Learning jQuery Fourth Edition Karl Swedberg and Jonathan Chaffer jQuery in Action Bear Bibeault, Yehuda Katz, and Aurelio De Rosa jQuery Succinctly Cody Lindley Learning Center Forum API Twitter IRC GitHub Copyright 2017 The jQuery Foundation. jQuery License Web hosting by Digital Ocean | CDN by StackPath var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-1076265-1']); _gaq.push(['_setDomainName', 'api.jquery.com']); _gaq.push(['_setAllowLinker', true]); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text\/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https:\/\/ssl' : 'http:\/\/www') + '.google-analytics.com\/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); Toggle navigation CodeIgniter Download Documentation Community Contribute CodeIgniter Rocks CodeIgniter is a powerful PHP framework with a very small footprint, built for developers who need a simple and elegant toolkit to create full-featured web applications. Star 14,705 Fork 6,953 @CodeIgniter Download The latest is Version 3.1.5 Read the Manual Clear documentation View the Forums Get Support & Discuss Things On GitHub Fix Bugs or Add Features Recent News 2017.07.11 Project Update - 2017.07.10 2017.06.19 CodeIgniter 3.1.5 Released 2017.03.20 CodeIgniter 3.1.4 released 2017.03.09 BCIT newsletter story about CodeIgniter 2017.01.20 Planned Server Downtime Jan 21, 2017 Active Forum Threads 2017.07.11 form_input don't output html since ci3 upgrade 2017.07.11 Community Auth : Login Error 2017.07.11 Get data from cookie on subdomain with Codeigniter 2017.07.11 local to gmt function doesn't work 2017.07.11 REST API request does not reply until shell script is done Why CodeIgniter? Framework with a small footprint CodeIgniter 3 has a 2MB download, including the user guide. Simple solutions over complexity CodeIgniter encourages MVC, but does not force it on you. Clear documentation The CodeIgniter User Guide comes with the download. It contains an introduction, tutorial, a number of \"how to\" guides, and then reference documentation for the components that make up the framework. Exceptional performance CodeIgniter consistently outperforms most of its competitors. Strong Security We take security seriously, with built-in protection against CSRF and XSS attacks. Nearly zero configuration Much of the CodeIgniter configuration is done by convention, for instance putting models in a \"models\" folder. There are still a number of configuration options available, through scripts in the \"config\" folder. Policies The Fine Print About CodeIgniter was created by EllisLab and is now a project of the British Columbia Institute of Technology !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], p = \/^http:\/.test(d.location) ? 'http' : 'https'; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = p + ':\/\/platform.twitter.com\/widgets.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'twitter-wjs');\/* -1&&m>28){j=28+s;s='';if(j *\/ Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 CodeIgniter4 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server TutorialStatic pages News section Create news items Conclusion CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 \u00a0 CodeIgniter4 Docs \u00bb CodeIgniter4 User Guide CodeIgniter4 User Guide\u00b6 License Agreement Change Log Welcome Installation Tutorial CodeIgniter4 Overview General Topics Library Reference Database Reference Helper Reference Contributing to CodeIgniter Welcome\u00b6 Welcome to CodeIgniter4Welcome to CodeIgniter4 Server Requirements Credits PSR Compliance Installation\u00b6 InstallationDownloading CodeIgniter Installation Upgrading From a Previous Version Troubleshooting Local Development Server Tutorial\u00b6 TutorialStatic pages News section Create news items Conclusion CodeIgniter4 Overview\u00b6 CodeIgniter4 OverviewApplication Structure Models, Views, and Controllers Autoloading Files Services Working With HTTP Requests Security Guidelines General Topics\u00b6 General TopicsWorking With Configuration Files CodeIgniter URLs Controllers Views View Cells View Renderer View Parser Helper Functions Creating Core System Classes Events - Extending the Framework Core Global Functions and Constants URI Routing Controller Filters Logging Information Error Handling Debugging Your Application Web Page Caching Running via the CLI Custom CLI Commands Code Modules Managing your Applications Handling Multiple Environments Alternate PHP Syntax for View Files Testing Library Reference\u00b6 Library ReferenceAPI Response Trait Benchmarking Caching Driver CLI Library Content Negotiation Localization CURLRequest Class Image Manipulation Class IncomingRequest Class HTTP Messages Pagination Request Class HTTP Responses Security Class Session Library Throttler Typography Working with Files Working with Uploaded Files Working with URIs Validation Database Reference\u00b6 Database ReferenceQuick Start: Usage Examples Database Configuration Connecting to a Database Running Queries Generating Query Results Query Helper Functions Query Builder Class Transactions Getting MetaData Custom Function Calls Using CodeIgniter\u2019s Model Using Entity Classes Database Manipulation with Database Forge Database Migrations Database Seeding Database Events Helper Reference\u00b6 HelpersCookie Helper Filesystem Helper Form Helper HTML Helper Inflector Helper Number Helper Security Helper Text Helper URL Helper Contributing to CodeIgniter\u00b6 Contributing to CodeIgniterContribution Guidelines Contribution Workflow Contribution Signing CodeIgniter4 Roadmap CodeIgniter Internals Overview Writing CodeIgniter Documentation PHP Style Guide Developer\u2019s Certificate of Origin 1.1 Next \u00a9 Copyright 2014 - 2017, British Columbia Institute of Technology. Last updated on Jul 05, 2017. Built with Sphinx using a theme provided by Read the Docs. var DOCUMENTATION_OPTIONS = { URL_ROOT:'.\/', VERSION:'4.0.0-dev', COLLAPSE_INDEX:false, FILE_SUFFIX:'.html', HAS_SOURCE: false }; jQuery(function () { SphinxRtdTheme.StickyNav.enable(); }); Skip Quicknav About Debian Getting Debian Support Developers' Corner \u00a0 Download Debian 9.0(64-bit PC Network installer) Debian Debian is a free operating system (OS) for your computer. An operating system is the set of basic programs and utilities that make your computer run. Debian provides more than a pure OS: it comes with over 51000 packages, precompiled software bundled up in a nice format for easy installation on your machine. Read more... About Social Contract Code of Conduct Free Software Partners Donations Contact Us Help Debian Getting Debian Network install CD\/USB ISO images CD vendors Pre-installed Pure Blends Debian Packages Developers' Corner News Project News Events Documentation Release Info Installation manual Debian Books Debian Wiki Support Debian International Security Information Bug reports Mailing Lists Mailing List Archives Ports\/Architectures Miscellaneous Site map Search The Debian Blog The latest stable release of Debian is 9.0. The last update to this release was made on June 17th, 2017. Read more about available versions of Debian. Getting Started If you'd like to start using Debian, you can easily obtain a copy, and then follow the installation instructions to install it. If you're upgrading to the latest stable release from a previous version, please read the release notes before proceeding. To get help in using or setting up Debian, see our documentation and support pages. Users that speak languages other than English should check the international section. People who use systems other than Intel x86 should check the ports section. RSS News [18 Jun 2017] Debian Edu \/ Skolelinux Stretch \u2014 a complete Linux solution for your school[17 Jun 2017] Debian 9 Stretch released[06 May 2017] Updated Debian 8: 8.8 released[25 Apr 2017] Shutting down public FTP services[17 Apr 2017] Statement concerning the arrest of Dmitry Bogatov[14 Jan 2017] Updated Debian 8: 8.7 released For older news items see the News Page. If you would like to receive mail whenever new Debian news comes out, subscribe to the debian-announce mailing list. RSS Security Advisories [09 Jul 2017] DSA-3905 xorg-server - security update [08 Jul 2017] DSA-3904 bind9 - security update [05 Jul 2017] DSA-3903 tiff - security update [05 Jul 2017] DSA-3902 jabberd2 - security update [02 Jul 2017] DSA-3901 libgcrypt20 - security update [27 Jun 2017] DSA-3900 openvpn - security update [27 Jun 2017] DSA-3899 vlc - security update [25 Jun 2017] DSA-3898 expat - security update [24 Jun 2017] DSA-3897 drupal7 - security update [22 Jun 2017] DSA-3896 apache2 - security update [22 Jun 2017] DSA-3895 flatpak - security update [22 Jun 2017] DSA-3894 graphite2 - security update [22 Jun 2017] DSA-3893 jython - security update [22 Jun 2017] DSA-3892 tomcat7 - security update [22 Jun 2017] DSA-3891 tomcat8 - security update For older security advisories see the Security Page. If you would like to receive security advisories as soon as they're announced, subscribe to the debian-security-announce mailing list. This page is also available in the following languages: \u0639\u0631\u0628\u064a\u0629\u00a0(Arabiya) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u00a0(B\u0259lgarski) catal\u00e0 \u010desky dansk Deutsch \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\u00a0(Ellinika) espa\u00f1ol Esperanto \u0641\u0627\u0631\u0633\u06cc\u00a0(Farsi) fran\u00e7ais Galego \ud55c\uad6d\uc5b4\u00a0(Hangul) \u0540\u0561\u0575\u0565\u0580\u0565\u0576\u00a0(hayeren) hrvatski Indonesia Italiano \u05e2\u05d1\u05e8\u05d9\u05ea\u00a0(ivrit) Lietuvi\u0173 magyar Nederlands \u65e5\u672c\u8a9e\u00a0(Nihongo) norsk\u00a0(bokm\u00e5l) polski Portugu\u00eas rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439\u00a0(Russkij) slovensky suomi svenska \u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u00a0(Tamil) Ti\u1ebfng Vi\u1ec7t T\u00fcrk\u00e7e \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u00a0(ukrajins'ka) \u4e2d\u6587(\u7b80) \u4e2d\u6587(HK) \u4e2d\u6587(\u7e41) How to set the default document language To report a problem with the web site, e-mail our publicly archived mailing list debian-www@lists.debian.org. For other contact information, see the Debian contact page. Web site source code is available. Last Modified: Thu, Jun 8 15:25:09 UTC 2017 Copyright \u00a9 1997-2017 SPI and others; See license terms Debian is a registered trademark of Software in the Public Interest, Inc. Dev Home minFraud GeoIP FAQ Main Site Site Map English \u7b80\u4f53\u4e2d\u6587 (Chinese (Simplified)) Search\r Search\r Table of ContentsBinary DatabasesMaxMind Supported APIsThird-Party APIsUpdating Downloadable DatabasesCSV DatabasesDownload LimitsLinksSystem Status \/* Skip to content Features Business Explore Marketplace Pricing \/dashboard Sign in or Sign up Built for developers GitHub is a development platform inspired by the way you work. From open source to business, you can host and review code, manage projects, and build software alongside millions of other developers. Username Email Password Use at least one letter, one numeral, and seven characters. Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. Sign up for GitHub teams GitHub for teams A better way to work together GitHub brings teams together to work through problems, move ideas forward, and learn from each other along the way. Sign up your team Write better code Collaboration makes perfect. The conversations and code reviews that happen in Pull Requests help your team share the weight of your work and improve the software you build. Learn about code review on GitHub Manage your chaos Take a deep breath. On GitHub, project management happens in Issues and Projects, right alongside your code. All you have to do is mention a teammate to get them involved. Learn about project management on GitHub security-admin Security and administration Boxes? Check. We worried about your administrative and security needs so you don\u2019t have to. From flexible hosting to authentication options, GitHub can help you meet your team\u2019s requirements. Learn about GitHub for Business Code security Prevent problems before they happen. Protected branches, signed commits, and required status checks protect your work and help you maintain a high standard for your code. Access controlled Encourage teams to work together while limiting access to those who need it with granular permissions and authentication through SAML\/SSO and LDAP. Hosted where you need it Securely and reliably host your work on GitHub.com. Or, deploy GitHub Enterprise on your own servers or in a private cloud using Amazon Web Services, Azure or Google Cloud Platform. integrations Integrations Build on GitHub Customize your process with GitHub apps and an intuitive API. Integrate the tools you already use or discover new favorites to create a happier, more efficient way of working. Learn about integrations Sometimes, there\u2019s more than one tool for the job. Why not try something new? Browse GitHub Marketplace open-source Community Welcome home, developers GitHub is home to the world\u2019s largest community of developers and their\u00a0projects... Ariya Hidayat PhantomJS maintainer Russell Keith-Magee PyBee maintainer MailChimp Marketing customer Kris Nova Kubernetes\/kops maintainer Evan You Vue maintainer Mapbox Software customer Jess Frazelle Kubernetes, previously Docker maintainer ...whether you\u2019re making your first commit or sending a Rover to Mars, there\u2019s room for you here, too. 62M repositories worldwide GitHub\u2019s users create and maintain influential technologies alongside the world's largest open source\u00a0community. 22M developers worldwide Developers use GitHub for personal projects, from experimenting with new programming languages to hosting their life\u2019s work. 117K businesses worldwide Businesses of all sizes use GitHub to support their development process and to securely build software. More than a million teams use GitHub Get started for free \u2014 join the millions of developers already using GitHub to share their code, work together, and build amazing things. Username Email Password Sign up for GitHub By clicking \"Sign up for GitHub\", you agree to our terms of service and privacy policy. We\u2019ll occasionally send you account related emails. \u00a9 2017 Features Code review Project management Community Documentation Code hosting Platform Atom Electron GitHub Desktop Developers Community Personal Open source For Business For Education Sponsorships Company About Blog Customers Careers Press Shop Resources Contact GitHub Help Status Terms Privacy Security Training You can't perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Transform your plain text into static\u00a0websites and\u00a0blogs. Simple No more databases, comment moderation, or pesky updates to install\u2014just your content. How Jekyll works \u2192 Static Markdown (or Textile), Liquid, HTML & CSS go in. Static sites come out ready for deployment. Jekyll template guide \u2192 Blog-aware Permalinks, categories, pages, posts, and custom layouts are all first-class citizens here. Migrate your blog \u2192 Get up and running in\u00a0seconds. Quick-start Instructions ~ $ gem install jekyll bundler ~ $ jekyll new my-awesome-site ~ $ cd my-awesome-site ~\/my-awesome-site $ bundle exec jekyll serve # => Now browse to http:\/\/localhost:4000 Free hosting with GitHub Pages Sick of dealing with hosting companies? GitHub Pages are powered by Jekyll, so you can easily deploy your site using GitHub for free\u2014custom domain name and\u00a0all. Learn more about GitHub Pages \u2192 The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level Home Docs News Community Help GitHub Jekyll Home Docs News Community Help GitHub Navigate the docs\u2026WelcomeQuick-start guideInstallationJekyll on WindowsBasic UsageDirectory structureConfigurationFront MatterWriting postsWorking with draftsCreating pagesStatic FilesVariablesCollectionsData FilesAssetsBlog migrationsTemplatesIncludesPermalinksPaginationPluginsThemesExtrasGitHub PagesDeployment methodsContinuous IntegrationTroubleshootingSites using JekyllResourcesUpgrading from 0.x to 2.xUpgrading from 2.x to 3.xContributingMaintaining JekyllCode of ConductHistory \u00a0Improve this page Templates Jekyll uses the Liquid templating language to process templates. All of the standard Liquid tags and filters are supported. Jekyll even adds a few handy filters and tags of its own to make common tasks easier. Filters Description Filter and Output Relative URL Prepend the baseurl value to the input. Useful if your site is hosted at a subpath rather than the root of the domain. {{ \"\/assets\/style.css\" | relative_url }} \/my-baseurl\/assets\/style.css Absolute URL Prepend the url and baseurl value to the input. {{ \"\/assets\/style.css\" | absolute_url }} http:\/\/example.com\/my-baseurl\/assets\/style.css Date to XML Schema Convert a Date into XML Schema (ISO 8601) format. {{ site.time | date_to_xmlschema }} 2008-11-07T13:07:54-08:00 Date to RFC-822 Format Convert a Date into the RFC-822 format used for RSS feeds. {{ site.time | date_to_rfc822 }} Mon, 07 Nov 2008 13:07:54 -0800 Date to String Convert a date to short format. {{ site.time | date_to_string }} 07 Nov 2008 Date to Long String Format a date to long format. {{ site.time | date_to_long_string }} 07 November 2008 Where Select all the objects in an array where the key has the given value. {{ site.members | where:\"graduation_year\",\"2014\" }} Where Expression Select all the objects in an array where the expression is true. Jekyll v3.2.0 & later. {{ site.members | where_exp:\"item\", \"item.graduation_year == 2014\" }} {{ site.members | where_exp:\"item\", \"item.graduation_year < 2014\" }} {{ site.members | where_exp:\"item\", \"item.projects contains 'foo'\" }} Group By Group an array's items by a given property. {{ site.members | group_by:\"graduation_year\" }} [{\"name\"=>\"2013\", \"items\"=>[...]}, {\"name\"=>\"2014\", \"items\"=>[...]}] Group By Expression Group an array's items using a Liquid expression. {{ site.members | group_by_exp:\"item\", \"item.graduation_year | truncate: 3, \\\"\\\"\" }} [{\"name\"=>\"201...\", \"items\"=>[...]}, {\"name\"=>\"200...\", \"items\"=>[...]}] XML Escape Escape some text for use in XML. {{ page.content | xml_escape }} CGI Escape CGI escape a string for use in a URL. Replaces any special characters with appropriate %XX replacements. CGI escape normally replaces a space with a plus + sign. {{ \"foo, bar; baz?\" | cgi_escape }} foo%2C+bar%3B+baz%3F URI Escape Percent encodes any special characters in a URI. URI escape normally replaces a space with %20. Reserved characters will not be escaped. {{ \"http:\/\/foo.com\/?q=foo, \\bar?\" | uri_escape }} http:\/\/foo.com\/?q=foo,%20%5Cbar? Number of Words Count the number of words in some text. {{ page.content | number_of_words }} 1337 Array to Sentence Convert an array into a sentence. Useful for listing tags. Optional argument for connector. {{ page.tags | array_to_sentence_string }} foo, bar, and baz {{ page.tags | array_to_sentence_string: 'or' }} foo, bar, or baz Markdownify Convert a Markdown-formatted string into HTML. {{ page.excerpt | markdownify }} Smartify Convert \"quotes\" into \u201csmart quotes.\u201d {{ page.title | smartify }} Converting Sass\/SCSS Convert a Sass- or SCSS-formatted string into CSS. {{ some_scss | scssify }} {{ some_sass | sassify }} Slugify Convert a string into a lowercase URL \"slug\". See below for options. {{ \"The _config.yml file\" | slugify }} the-config-yml-file {{ \"The _config.yml file\" | slugify: 'pretty' }} the-_config.yml-file Data To JSON Convert Hash or Array to JSON. {{ site.data.projects | jsonify }} Normalize Whitespace Replace any occurrence of whitespace with a single space. {{ \"a \\n b\" | normalize_whitespace }} Sort Sort an array. Optional arguments for hashes: 1.\u00a0property name 2.\u00a0nils order (first or last). {{ page.tags | sort }} {{ site.posts | sort: 'author' }} {{ site.pages | sort: 'title', 'last' }} Sample Pick a random value from an array. Optional: pick multiple values. {{ site.pages | sample }} {{ site.pages | sample:2 }} To Integer Convert a string or boolean to integer. {{ some_var | to_integer }} Array Filters Push, pop, shift, and unshift elements from an Array. These are NON-DESTRUCTIVE, i.e. they do not mutate the array, but rather make a copy and mutate that. {{ page.tags | push: 'Spokane' }} ['Seattle', 'Tacoma', 'Spokane'] {{ page.tags | pop }} ['Seattle'] {{ page.tags | shift }} ['Tacoma'] {{ page.tags | unshift: \"Olympia\" }} ['Olympia', 'Seattle', 'Tacoma'] Inspect Convert an object into its String representation for debugging. {{ some_var | inspect }} Options for the slugify filter The slugify filter accepts an option, each specifying what to filter. The default is default. They are as follows (with what they filter): none: no characters raw: spaces default: spaces and non-alphanumeric characters pretty: spaces and non-alphanumeric characters except for ._~!$&'()+,;=@ Tags Includes If you have small page snippets that you want to include in multiple places on your site, save the snippets as include files and insert them where required, by using the include tag: {% include footer.html %} Jekyll expects all include files to be placed in an _includes directory at the root of your source directory. In the above example, this will embed the contents of _includes\/footer.html into the calling file. For more advanced information on using includes, see Includes. Code snippet highlighting Jekyll has built in support for syntax highlighting of over 60 languages thanks to Rouge. Rouge is the default highlighter in Jekyll 3 and above. To use it in Jekyll 2, set highlighter to rouge and ensure the rouge gem is installed properly. Alternatively, you can use Pygments to highlight your code snippets. To use Pygments, you must have Python installed on your system, have the pygments.rb gem installed and set highlighter to pygments in your site\u2019s configuration file. Pygments supports over 100 languages To render a code block with syntax highlighting, surround your code as follows: {% highlight ruby %} def foo puts 'foo' end {% endhighlight %} The argument to the highlight tag (ruby in the example above) is the language identifier. To find the appropriate identifier to use for the language you want to highlight, look for the \u201cshort name\u201d on the Rouge wiki or the Pygments\u2019 Lexers page. Line numbers There is a second argument to highlight called linenos that is optional. Including the linenos argument will force the highlighted code to include line numbers. For instance, the following code block would include line numbers next to each line: {% highlight ruby linenos %} def foo puts 'foo' end {% endhighlight %} Stylesheets for syntax highlighting In order for the highlighting to show up, you\u2019ll need to include a highlighting stylesheet. For an example stylesheet you can look at syntax.css. These are the same styles as used by GitHub and you are free to use them for your own site. If you use linenos, you might want to include an additional CSS class definition for the .lineno class in syntax.css to distinguish the line numbers from the highlighted code. Gist Use the gist tag to easily embed a GitHub Gist onto your site. This works with public or secret gists: {% gist parkr\/931c1c8d465a04042403 %} You may also optionally specify the filename in the gist to display: {% gist parkr\/931c1c8d465a04042403 jekyll-private-gist.markdown %} To use the gist tag, you\u2019ll need to add the jekyll-gist gem to your project. Links Linking to pages To link to a post, a page, collection item, or file, the link tag will generate the correct permalink URL for the path you specify. For example, if you use the link tag to link to mypage.html, even if you change your permalink style to include the file extension or omit it, the URL formed by the link tag will always be valid. You must include the file\u2019s original extension when using the link tag. Here are some examples: {{ site.baseurl }}{% link _collection\/name-of-document.md %} {{ site.baseurl }}{% link _posts\/2016-07-26-name-of-post.md %} {{ site.baseurl }}{% link news\/index.html %} {{ site.baseurl }}{% link \/assets\/files\/doc.pdf %} You can also use the link tag to create a link in Markdown as follows: [Link to a document]({{ site.baseurl }}{% link _collection\/name-of-document.md %}) [Link to a post]({{ site.baseurl }}{% link _posts\/2016-07-26-name-of-post.md %}) [Link to a page]({{ site.baseurl }}{% link news\/index.html %}) [Link to a file]({{ site.baseurl }}{% link \/assets\/files\/doc.pdf %}) (Including {{ site.baseurl }} is optional \u2014 it depends on whether you want to preface the page URL with the baseurl value.) The path to the post, page, or collection is defined as the path relative to the root directory (where your config file is) to the file, not the path from your existing page to the other page. For example, suppose you\u2019re creating a link in page_a.md (stored in pages\/folder1\/folder2) to page_b.md (stored in pages\/folder1). Your path in the link would not be ..\/page_b.html. Instead, it would be \/pages\/folder1\/page_b.md. If you\u2019re unsure of the path, add {{ page.path }} to the page and it will display the path. One major benefit of using the link tag is link validation. If the link doesn\u2019t exist, Jekyll won\u2019t build your site. This is a good thing, as it will alert you to a broken link so you can fix it (rather than allowing you to build and deploy a site with broken links). Note you cannot add filters to link tags. For example, you cannot append a string using Liquid filters, such as {% link mypage.html | append: \"#section1\" %} . To link to sections on a page, you will need to use regular HTML or Markdown linking techniques. Linking to posts If you want to include a link to a post on your site, the post_url tag will generate the correct permalink URL for the post you specify. {{ site.baseurl }}{% post_url 2010-07-21-name-of-post %} If you organize your posts in subdirectories, you need to include subdirectory path to the post: {{ site.baseurl }}{% post_url \/subdir\/2010-07-21-name-of-post %} There is no need to include the file extension when using the post_url tag. You can also use this tag to create a link to a post in Markdown as follows: [Name of Link]({{ site.baseurl }}{% post_url 2010-07-21-name-of-post %}) Back Next Getting Started Welcome Quick-start guide Installation Jekyll on Windows Basic Usage Directory structure Configuration Your Content Front Matter Writing posts Working with drafts Creating pages Static Files Variables Collections Data Files Assets Blog migrations Customization Templates Includes Permalinks Pagination Plugins Themes Extras Deployment GitHub Pages Deployment methods Continuous Integration Miscellaneous Troubleshooting Sites using Jekyll Resources Upgrading from 0.x to 2.x Upgrading from 2.x to 3.x Meta Contributing Maintaining Jekyll Code of Conduct History The contents of this website are \u00a9\u00a02017 under the terms of the MIT\u00a0License. Proudly hosted by var anchorForId = function (id) { var anchor = document.createElement(\"a\"); anchor.className = \"header-link\"; anchor.href = \"#\" + id; anchor.innerHTML = \"Permalink\"; anchor.title = \"Permalink\"; return anchor; }; var linkifyAnchors = function (level, containingElement) { var headers = containingElement.getElementsByTagName(\"h\" + level); for (var h = 0; h < headers.length; h++) { var header = headers[h]; if (typeof header.id !== \"undefined\" && header.id !== \"\") { header.appendChild(anchorForId(header.id)); } } }; document.onreadystatechange = function () { if (this.readyState === \"complete\") { var contentBlock = document.getElementsByClassName(\"docs\")[0] || document.getElementsByClassName(\"news\")[0]; if (!contentBlock) { return; } for (var level = 1; level Natan Felles Creative Webmaster \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview'); Toggle navigation Natan Felles Blog Servi\u00c3\u00a7os Mapa do Site Natan Felles Creative Webmaster In\u00c3\u00adcio Blog Apt-Cacher-NG: Proxy de Cache de Pacotes Apt-Cacher-NG: Proxy de Cache de Pacotes Blog \u00c2\u00b7 desenvolvimento 23.09.2016 Apresenta\u00c3\u00a7\u00c3\u00a3o Apt-Cacher NG \u00c3\u00a9 um proxy de cache para pacotes de software baixados por mecanismos de distribui\u00c3\u00a7\u00c3\u00a3o em sistemas Unix\/Linux de servidores espelhos acess\u00c3\u00adveis via HTTP. Entenda melhor Sabe-se que \u00c3\u00a9 altamente recomend\u00c3\u00a1vel manter um sistema operacional sempre atualizado por devidos fatores. Em locais onde h\u00c3\u00a1 v\u00c3\u00a1rios computadores pode haver um enorme gasto do tr\u00c3\u00a1fego de banda ou congestionamento da conex\u00c3\u00a3o com a internet para manter todos atualizados. Algumas vezes, utilizando distribui\u00c3\u00a7\u00c3\u00b5es rolling release, que buscam sempre possuir as \u00c3\u00baltimas vers\u00c3\u00b5es de softwares, j\u00c3\u00a1 cheguei a precisar baixar mais de 200 MB em um \u00c3\u00banico update. Agora, imagine isso em uma empresa com 20 m\u00c3\u00a1quinas. Daria cerca de 4 GB de download para atualizar todas. A solu\u00c3\u00a7\u00c3\u00a3o mais simples \u00c3\u00a9 criar um servidor proxy de cache, ou seja, todos os pacotes baixados ficar\u00c3\u00a3o armazenados nele. E ent\u00c3\u00a3o todas as outras m\u00c3\u00a1quinas ser\u00c3\u00a3o atualizadas atrav\u00c3\u00a9s deste servidor proxy, intermedi\u00c3\u00a1rio, \u00c3\u00banico respons\u00c3\u00a1vel por baixar atualiza\u00c3\u00a7\u00c3\u00b5es externas e repass\u00c3\u00a1-las para todas as m\u00c3\u00a1quinas da rede local. Toda vez que uma m\u00c3\u00a1quina for atualizada ocorrer\u00c3\u00a1 o seguinte processo: A m\u00c3\u00a1quina conecta com o proxy e questiona se h\u00c3\u00a1 atualiza\u00c3\u00a7\u00c3\u00b5es para ela. O proxy conecta no reposit\u00c3\u00b3rio oficial e questiona por essas atualiza\u00c3\u00a7\u00c3\u00b5es, fazendo uma compara\u00c3\u00a7\u00c3\u00a3o entre as vers\u00c3\u00b5es de seus pacotes com os pacotes externos. Se houver novos pacotes, o proxy baixa os pacotes e, se houver vers\u00c3\u00a3o maior do que os da m\u00c3\u00a1quina, os retransmite para ela. Se n\u00c3\u00a3o houver novos pacotes, mas eles tiverem vers\u00c3\u00a3o maior do que os da m\u00c3\u00a1quina, o proxy apenas retransmite os pacotes para a m\u00c3\u00a1quina. Por fim, o proxy se atualizar\u00c3\u00a1 com os reposit\u00c3\u00b3rios externos e a m\u00c3\u00a1quina se atualizar\u00c3\u00a1 com o proxy. Certo. Chega de teoria e vamos ver como podemos fazer isso acontecer. Instala\u00c3\u00a7\u00c3\u00a3o do Servidor Proxy de Cache Voc\u00c3\u00aa precisar\u00c3\u00a1 de uma m\u00c3\u00a1quina para ser o servidor proxy de cache. Recomendo que utilize um sistema sem desktop, mas \u00c3\u00a9 indiferente. No servidor, vamos instalar o Apt-Cacher-NG: sudo apt install apt-cacher-ng O Apt-Cacher-NG, por padr\u00c3\u00a3o, roda na porta 3142 e \u00c3\u00a9 acess\u00c3\u00advel via web, onde possui uma p\u00c3\u00a1gina explicando como configurar outras m\u00c3\u00a1quinas para us\u00c3\u00a1-lo, manual e estat\u00c3\u00adsticas. Voc\u00c3\u00aa pode entrar diretamente pelo IP do servidor ou hostname, como no exemplo: http:\/\/192.168.1.100:3142 Configura\u00c3\u00a7\u00c3\u00a3o dos Clientes Estando com o servidor proxy de cache instalado, vamos ver como configurar as m\u00c3\u00a1quinas clientes: Em cada cliente, crie um arquivo em \/etc\/apt\/apt.conf e adicione a linha abaixo, substituindo o IP pelo do seu servidor: Acquire::http::Proxy \"http:\/\/192.168.1.100:3142\"; Feito! Salve e feche o arquivo e atualize a m\u00c3\u00a1quina cliente: sudo apt update Ao atualizar a m\u00c3\u00a1quina, automaticamente o proxy ser\u00c3\u00a1 atualizado. Fa\u00c3\u00a7a isso em todas as m\u00c3\u00a1quinas clientes e desta forma voc\u00c3\u00aa s\u00c3\u00b3 precisar\u00c3\u00a1 baixar pacotes em um \u00c3\u00banico local. Seguran\u00c3\u00a7a Caso seja necess\u00c3\u00a1rio, voc\u00c3\u00aa pode proteger o sistema web com a requisi\u00c3\u00a7\u00c3\u00a3o de usu\u00c3\u00a1rio e senha. Para isso, edite o arquivo \/etc\/apt-cacher-ng\/security.conf: #AdminAuth: mooma:moopa AdminAuth: usuario:Senh4 Depois reinicie o apt-cacher-ng: sudo systemctl restart apt-cacher-ng.service \u00c3\u0080 partir de agora, quando for navegar na porta 3142 do seu servidor proxy, lhe ser\u00c3\u00a1 solicitado os dados de acesso. Informa\u00c3\u00a7\u00c3\u00a3o Para configura\u00c3\u00a7\u00c3\u00b5es avan\u00c3\u00a7adas, leia o manual em http:\/\/192.168.1.100:3142\/acng-doc\/html\/index.html. Conclus\u00c3\u00a3o Configurar o Apt-Cacher-NG \u00c3\u00a9 simples e de extrema utilidade. Voc\u00c3\u00aa pode ter v\u00c3\u00a1rias m\u00c3\u00a1quinas na rede local, mas vai baixar pacotes externos apenas por uma, uma \u00c3\u00banica vez. cache proxy debian linux Edite essa p\u00c3\u00a1gina no GitHub Pr\u00c3\u00b3ximo Anterior var disqus_config = function () { this.page.url = 'https:\/\/natanfelles.github.io\/blog\/apt-cacher-ng'; this.page.identifier = '\/blog\/apt-cacher-ng'; }; (function() { var d = document, s = d.createElement('script'); s.src = '\/\/natanfelles.disqus.com\/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Habilite o JavaScript para ver os coment\u00c3\u00a1rios fornecidos por Disqus. \u00a9 2017 Natan Felles. Direitos reservados. Website renderizado em 28.06.2017 18:15:52 -0300 \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview'); Toggle navigation Natan Felles Blog Servi\u00c3\u00a7os Mapa do Site Natan Felles Creative Webmaster In\u00c3\u00adcio Blog Resetando a Senha do Root no MySQL Resetando a Senha do Root no MySQL Blog \u00c2\u00b7 desenvolvimento 13.06.2017 Hoje precisei acessar um servidor MySQL rec\u00c3\u00a9m instalado no qual eu n\u00c3\u00a3o sabia a senha do usu\u00c3\u00a1rio root. Mas eu tinha acesso de super-usu\u00c3\u00a1rio no Linux. Ent\u00c3\u00a3o, decidi criar uma nova senha. A maneira mais pr\u00c3\u00a1tica de realizar tal processo \u00c3\u00a9 utilizando o script mysqld_safe. Ele possui o par\u00c3\u00a2metro --skip-grant-tables, que possibilita logar sem inserir nenhuma senha. Para rodar esse script \u00c3\u00a9 necess\u00c3\u00a1rio que exista o diret\u00c3\u00b3rio \/var\/run\/mysqld com propriedade do usu\u00c3\u00a1rio do MySQL. Antes de rodar o mysqld_safe, voc\u00c3\u00aa pode conferir se o diret\u00c3\u00b3rio necess\u00c3\u00a1rio existe: \/var\/run\/mysqld Caso n\u00c3\u00a3o exista, crie-o e defina a propriedade: sudo mkdir -p \/var\/run\/mysqld sudo chown mysql:mysql \/var\/run\/mysqld Feito isso, abra outro terminal, certifique-se que o MySQL est\u00c3\u00a1 desligado e execute o mysqld_safe para rodar em segundo plano: sudo systemctl stop mysql.service sudo mysqld_safe --skip-grant-tables & Agora j\u00c3\u00a1 ser\u00c3\u00a1 poss\u00c3\u00advel entrar apenas com mysql -uroot. Sem necessidade da senha. Estando no prompt do MySQL, use a tabela mysql e defina sua nova senha: USE mysql; -- O nome da coluna \u00c3\u00a9 \"Password\" se a vers\u00c3\u00a3o do seu MySQL \u00c3\u00a9 menor que 5.7 UPDATE user SET authentication_string=PASSWORD('nova-senha') WHERE user='root'; FLUSH PRIVILEGES; EXIT Com a nova senha definida, mate o processo do mysqld_safe com um Ctrl + C e inicie o MySQL: sudo systemctl start mysql.service \u00c3\u0080 partir de ent\u00c3\u00a3o voc\u00c3\u00aa poder\u00c3\u00a1 acessar o MySQL normalmente, com mysql -uroot -p. Feito. Fontes MySQL :: MySQL 5.7 Reference Manual :: B.5.3.2 How to Reset the Root Password MysqlPasswordReset - Community Help Wiki Reset Forgotten MySQL Root Password mysql linux servidor Edite essa p\u00c3\u00a1gina no GitHub Pr\u00c3\u00b3ximo Anterior var disqus_config = function () { this.page.url = 'https:\/\/natanfelles.github.io\/blog\/mysql-reset-password'; this.page.identifier = '\/blog\/mysql-reset-password'; }; (function() { var d = document, s = d.createElement('script'); s.src = '\/\/natanfelles.disqus.com\/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Habilite o JavaScript para ver os coment\u00c3\u00a1rios fornecidos por Disqus. \u00a9 2017 Natan Felles. Direitos reservados. Website renderizado em 28.06.2017 18:15:52 -0300 \u00d7 Pesquisar (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https:\/\/www.google-analytics.com\/analytics.js','ga'); ga('create', 'UA-75463090-1', 'auto'); ga('send', 'pageview'); Downloads Documentation Get Involved Help php[world] 2017 Getting Started Introduction A simple tutorial Language Reference Basic syntax Types Variables Constants Expressions Operators Control Structures Functions Classes and Objects Namespaces Errors Exceptions Generators References Explained Predefined Variables Predefined Exceptions Predefined Interfaces and Classes Context options and parameters Supported Protocols and Wrappers Security Introduction General considerations Installed as CGI binary Installed as an Apache module Session Security Filesystem Security Database Security Error Reporting Using Register Globals User Submitted Data Magic Quotes Hiding PHP Keeping Current Features HTTP authentication with PHP Cookies Sessions Dealing with XForms Handling file uploads Using remote files Connection handling Persistent Database Connections Safe Mode Command line usage Garbage Collection DTrace Dynamic Tracing Function Reference Affecting PHP's Behaviour Audio Formats Manipulation Authentication Services Command Line Specific Extensions Compression and Archive Extensions Credit Card Processing Cryptography Extensions Database Extensions Date and Time Related Extensions File System Related Extensions Human Language and Character Encoding Support Image Processing and Generation Mail Related Extensions Mathematical Extensions Non-Text MIME Output Process Control Extensions Other Basic Extensions Other Services Search Engine Extensions Server Specific Extensions Session Extensions Text Processing Variable and Type Related Extensions Web Services Windows Only Extensions XML Manipulation GUI Extensions Keyboard Shortcuts? This help j Next menu item k Previous menu item g p Previous man page g n Next man page G Scroll to bottom g g Scroll to top g h Goto homepage g s Goto search(current page) \/ Focus search box DOMDocument::__construct \u00bb \u00ab DOMComment::__construct Manual do PHP Refer\u00eancia das Fun\u00e7\u00f5es Manipula\u00e7\u00e3o de XML DOM Change language: EnglishBrazilian PortugueseChinese (Simplified)FrenchGermanJapaneseRomanianRussianSpanishTurkishOther Edit Report a Bug The DOMDocument class (PHP 5, PHP 7) Introdu\u00e7\u00e3o Represents an entire HTML or XML document; serves as the root of the document tree. Sinopse da classe DOMDocument extends DOMNode { \/* Propriedades *\/ readonly public string $actualEncoding ; readonly public DOMConfiguration $config ; readonly public DOMDocumentType $doctype ; readonly public DOMElement $documentElement ; public string $documentURI ; public string $encoding ; public bool $formatOutput ; readonly public DOMImplementation $implementation ; public bool $preserveWhiteSpace = true ; public bool $recover ; public bool $resolveExternals ; public bool $standalone ; public bool $strictErrorChecking = true ; public bool $substituteEntities ; public bool $validateOnParse = false ; public string $version ; readonly public string $xmlEncoding ; public bool $xmlStandalone ; public string $xmlVersion ; \/* M\u00e9todos *\/ public __construct ([ string $version [, string $encoding ]] ) public DOMAttr createAttribute ( string $name ) public DOMAttr createAttributeNS ( string $namespaceURI , string $qualifiedName ) public DOMCDATASection createCDATASection ( string $data ) public DOMComment createComment ( string $data ) public DOMDocumentFragment createDocumentFragment ( void ) public DOMElement createElement ( string $name [, string $value ] ) public DOMElement createElementNS ( string $namespaceURI , string $qualifiedName [, string $value ] ) public DOMEntityReference createEntityReference ( string $name ) public DOMProcessingInstruction createProcessingInstruction ( string $target [, string $data ] ) public DOMText createTextNode ( string $content ) public DOMElement getElementById ( string $elementId ) public DOMNodeList getElementsByTagName ( string $name ) public DOMNodeList getElementsByTagNameNS ( string $namespaceURI , string $localName ) public DOMNode importNode ( DOMNode $importedNode [, bool $deep ] ) public mixed load ( string $filename [, int $options = 0 ] ) public bool loadHTML ( string $source [, int $options = 0 ] ) public bool loadHTMLFile ( string $filename [, int $options = 0 ] ) public mixed loadXML ( string $source [, int $options = 0 ] ) public void normalizeDocument ( void ) public bool registerNodeClass ( string $baseclass , string $extendedclass ) public bool relaxNGValidate ( string $filename ) public bool relaxNGValidateSource ( string $source ) public int save ( string $filename [, int $options ] ) public string saveHTML ([ DOMNode $node = NULL ] ) public int saveHTMLFile ( string $filename ) public string saveXML ([ DOMNode $node [, int $options ]] ) public bool schemaValidate ( string $filename [, int $flags ] ) public bool schemaValidateSource ( string $source [, int $flags ] ) public bool validate ( void ) public int xinclude ([ int $options ] ) \/* M\u00e9todos herdados *\/ public DOMNode DOMNode::appendChild ( DOMNode $newnode ) public string DOMNode::C14N ([ bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) public int DOMNode::C14NFile ( string $uri [, bool $exclusive [, bool $with_comments [, array $xpath [, array $ns_prefixes ]]]] ) public DOMNode DOMNode::cloneNode ([ bool $deep ] ) public int DOMNode::getLineNo ( void ) public string DOMNode::getNodePath ( void ) public bool DOMNode::hasAttributes ( void ) public bool DOMNode::hasChildNodes ( void ) public DOMNode DOMNode::insertBefore ( DOMNode $newnode [, DOMNode $refnode ] ) public bool DOMNode::isDefaultNamespace ( string $namespaceURI ) public bool DOMNode::isSameNode ( DOMNode $node ) public bool DOMNode::isSupported ( string $feature , string $version ) public string DOMNode::lookupNamespaceURI ( string $prefix ) public string DOMNode::lookupPrefix ( string $namespaceURI ) public void DOMNode::normalize ( void ) public DOMNode DOMNode::removeChild ( DOMNode $oldnode ) public DOMNode DOMNode::replaceChild ( DOMNode $newnode , DOMNode $oldnode ) } Propriedades actualEncoding Deprecated. Actual encoding of the document, is a readonly equivalent to encoding. config Deprecated. Configuration used when DOMDocument::normalizeDocument() is invoked. doctype The Document Type Declaration associated with this document. documentElement This is a convenience attribute that allows direct access to the child node that is the document element of the document. documentURI The location of the document or NULL if undefined. encoding Encoding of the document, as specified by the XML declaration. This attribute is not present in the final DOM Level 3 specification, but is the only way of manipulating XML document encoding in this implementation. formatOutput Nicely formats output with indentation and extra space. implementation The DOMImplementation object that handles this document. preserveWhiteSpace Do not remove redundant white space. Default to TRUE. recover Proprietary. Enables recovery mode, i.e. trying to parse non-well formed documents. This attribute is not part of the DOM specification and is specific to libxml. resolveExternals Set it to TRUE to load external entities from a doctype declaration. This is useful for including character entities in your XML document. standalone Deprecated. Whether or not the document is standalone, as specified by the XML declaration, corresponds to xmlStandalone. strictErrorChecking Throws DOMException on errors. Default to TRUE. substituteEntities Proprietary. Whether or not to substitute entities. This attribute is not part of the DOM specification and is specific to libxml. validateOnParse Loads and validates against the DTD. Default to FALSE. version Deprecated. Version of XML, corresponds to xmlVersion. xmlEncoding An attribute specifying, as part of the XML declaration, the encoding of this document. This is NULL when unspecified or when it is not known, such as when the Document was created in memory. xmlStandalone An attribute specifying, as part of the XML declaration, whether this document is standalone. This is FALSE when unspecified. xmlVersion An attribute specifying, as part of the XML declaration, the version number of this document. If there is no declaration and if this document supports the \"XML\" feature, the value is \"1.0\". Notas Nota: The DOM extension uses UTF-8 encoding. Use utf8_encode() and utf8_decode() to work with texts in ISO-8859-1 encoding or Iconv for other encodings. Veja Tamb\u00e9m \u00bb\u00a0W3C specification for Document \u00cdndiceDOMDocument::__construct \u2014 Creates a new DOMDocument objectDOMDocument::createAttribute \u2014 Create new attributeDOMDocument::createAttributeNS \u2014 Create new attribute node with an associated namespaceDOMDocument::createCDATASection \u2014 Create new cdata nodeDOMDocument::createComment \u2014 Create new comment nodeDOMDocument::createDocumentFragment \u2014 Create new document fragmentDOMDocument::createElement \u2014 Create new element nodeDOMDocument::createElementNS \u2014 Create new element node with an associated namespaceDOMDocument::createEntityReference \u2014 Create new entity reference nodeDOMDocument::createProcessingInstruction \u2014 Creates new PI nodeDOMDocument::createTextNode \u2014 Create new text nodeDOMDocument::getElementById \u2014 Searches for an element with a certain idDOMDocument::getElementsByTagName \u2014 Searches for all elements with given local tag nameDOMDocument::getElementsByTagNameNS \u2014 Searches for all elements with given tag name in specified namespaceDOMDocument::importNode \u2014 Import node into current documentDOMDocument::load \u2014 Load XML from a fileDOMDocument::loadHTML \u2014 Load HTML from a stringDOMDocument::loadHTMLFile \u2014 Load HTML from a fileDOMDocument::loadXML \u2014 Load XML from a stringDOMDocument::normalizeDocument \u2014 Normalizes the documentDOMDocument::registerNodeClass \u2014 Register extended class used to create base node typeDOMDocument::relaxNGValidate \u2014 Performs relaxNG validation on the documentDOMDocument::relaxNGValidateSource \u2014 Performs relaxNG validation on the documentDOMDocument::save \u2014 Dumps the internal XML tree back into a fileDOMDocument::saveHTML \u2014 Dumps the internal document into a string using HTML formattingDOMDocument::saveHTMLFile \u2014 Dumps the internal document into a file using HTML formattingDOMDocument::saveXML \u2014 Dumps the internal XML tree back into a stringDOMDocument::schemaValidate \u2014 Validates a document based on a schemaDOMDocument::schemaValidateSource \u2014 Validates a document based on a schemaDOMDocument::validate \u2014 Validates the document based on its DTDDOMDocument::xinclude \u2014 Substitutes XIncludes in a DOMDocument Object add a note User Contributed Notes 15 notes up down 63 Fernando H \u00b69 years ago Showing a quick example of how to use this class, just so that new users can get a quick start without having to figure it all out by themself. ( At the day of posting, this documentation just got added and is lacking examples. )Output:\u00a0 \u00a0 \u00a0 The ninth symphony\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 The last symphony composed by Ludwig van Beethoven.\u00a0 \u00a0 \u00a0 \u00a0 Highway BluesIf you want your PHP->DOM code to run under the .xml extension, you should set your webserver up to run the .xml extension with PHP ( Refer to the installation\/configuration configuration for PHP on how to do this ).Note that this:is NOT the same as this:although this will work: up down 14 jay at jaygilford dot com \u00b67 years ago Here's a small function I wrote to get all page links using the DOMDocument which will hopefully be of use to others\r Tipue LondonHomeProductsBlogSupportAboutCloseHomeproductsblog Tipue Search Tipue Search is an open source site search engine jQuery plugin Download Tipue Search Tipue Search is a site search engine jQuery plugin. It's free, open source, responsive and fast. Download \u00a0 Demo Version 6.1 Only jQuery Tipue Search only needs a browser that supports jQuery. It doesn't need MySQL or similar. In Static mode it doesn't even need a web server. Tipue Search is released under the MIT License. It's free for both commercial and non-commercial use. It doesn't show advertising or any branding. Content is king Tipue Search uses various modes for loading content. Static mode uses a JavaScript object, while Live mode grabs content from a list of pages dynamically. There's also JSON support. See a demo of Static mode. Fully documented There's an easy Getting Started section along with full and comprehensive documentation. (adsbygoogle = window.adsbygoogle || []).push({}); New in 6 Version 6 includes contextual results, whole word search, timed results, related searches, ARIA attributes and more. Support We offer a range of flexible support plans, including free. (adsbygoogle = window.adsbygoogle || []).push({}); Browser Compatibility Tipue Search has wide browser support. It works with Chrome 32+, Microsoft Edge, IE10+, Firefox 43+, Safari 9.1+, Opera 35+, Android 4.0+, Safari iOS 7+ and almost any recent browser. Tweet (function(d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = \"\/\/connect.facebook.net\/en_GB\/all.js#xfbml=1\"; fjs.parentNode.insertBefore(js, fjs); }(document, 'script', 'facebook-jssdk')); \u00a9 2017, Tipue. Made in London.Privacy \u00a0T&Cs w3schools.com\r THE WORLD'S LARGEST WEB DEVELOPER SITE\r HTML\r CSS\r JAVASCRIPT\r SQL\r PHP\r BOOTSTRAP\r JQUERY\r ANGULAR\r W3.CSS\r XML\r MORE \ue802\r \ue801\r FORUM\r EXAMPLES REFERENCES \u00d7\r HTML and CSS\r Learn HTML\r Learn CSS\r Learn W3.CSS\r Learn Colors\r Learn Bootstrap\r Learn Graphics\r Learn Icons\r Learn How To\r JavaScript\r Learn JavaScript\r Learn jQuery\r Learn jQueryMobile\r Learn AngularJS\r Learn JSON\r Learn AJAX\r Learn W3.JS\r Learn AppML\r Server Side\r Learn SQL\r Learn PHP\r Learn ASP\r Learn Node.js\r Web Building\r Web Templates\r Web Statistics\r Web Certificates\r XML\r Learn XML\r Learn XML AJAX\r Learn XML DOM\r Learn XML DTD\r Learn XML Schema\r Learn XSLT\r Learn XPath\r Learn XQuery\r \u00d7\r HTML\r HTML Tag Reference\r HTML Event Reference\r HTML Color Reference\r HTML Attribute Reference\r HTML Canvas Reference\r HTML SVG Reference\r Google Maps Reference\r CSS\r CSS Reference\r CSS Selector Reference\r W3.CSS Reference\r Bootstrap Reference\r Icon Reference\r JavaScript\r JavaScript Reference\r HTML DOM Reference\r jQuery Reference\r jQuery Mobile Reference\r AngularJS Reference\r W3.JS Reference\r XML\r XML Reference\r XML Http Reference\r XSLT Reference\r XML Schema Reference\r Charsets\r HTML Character Sets\r HTML ASCII\r HTML ANSI\r HTML Windows-1252\r HTML ISO-8859-1\r HTML Symbols\r HTML UTF-8\r Server Side\r PHP Reference\r SQL Reference\r ASP Reference\r \u00d7\r HTML\/CSS\r HTML Examples\r CSS Examples\r W3.CSS Examples\r W3.CSS Templates\r Bootstrap Examples\r JavaScript\r JavaScript Examples\r HTML DOM Examples\r jQuery Examples\r jQuery Mobile Examples\r AngularJS Examples\r AJAX Examples\r W3.JS Examples\r Server Side\r PHP Examples\r ASP Examples\r XML\r XML Examples\r XSLT Examples\r XPath Examples\r XML Schema Examples\r SVG Examples\r Quizzes\r HTML Quiz\r CSS Quiz\r JavaScript Quiz\r Bootstrap Quiz\r jQuery Quiz\r PHP Quiz\r SQL Quiz\r XML Quiz\r \u00d7\r JavaScript Reference\r Overview\r JavaScript\r JS String\r JS Number\r JS Operators\r JS Statements\r JS Math\r JS Date\r JS Array\r JS Boolean\r JS Error\r JS RegExp\r JS Global\r JS Conversion\r Browser BOM\r Window\r Navigator\r Screen\r History\r Location\r HTML DOM\r DOM Document\r DOM Elements\r DOM Attributes\r DOM Events\r DOM Style\r HTML Objects\r - button\r checkbox\r color\r date\r datetime\r datetime-local\r email\r file\r hidden\r image\r month\r number\r password\r radio\r range\r reset\r search\r submit\r text\r time\r url\r week\r Other Objects\r CSSStyleDeclaration\r googletag.cmd.push(function() { googletag.display('div-gpt-ad-1422003450156-2'); });\r JavaScript Date Reference\r \u276e Previous\r Next \u276f\r Date Object\r The Date object is used to work with dates and times.\r Date objects are created with new Date().\r There are four ways of instantiating a date:\r var d =\r new Date();\r var d =\r new Date(milliseconds);\r var d =\r new Date(dateString);\r var d =\r new Date(year, month, day, hours, minutes, seconds, milliseconds);\r For a tutorial about date and times, read our JavaScript Date Tutorial.\r Date Object Properties\r Property\r Description\r constructor\r Returns the function that created the Date object's prototype\r prototype\r Allows you to add properties and methods to an object\r Date Object Methods\r Method\r Description\r getDate()\r Returns the day of the month (from 1-31)\r getDay()\r Returns the day of the week (from 0-6)\r getFullYear()\r Returns the year\r getHours()\r Returns the hour (from 0-23)\r getMilliseconds()\r Returns the milliseconds (from 0-999)\r getMinutes()\r Returns the minutes (from 0-59)\r getMonth()\r Returns the month (from 0-11)\r getSeconds()\r Returns the seconds (from 0-59)\r getTime()\r Returns the number of milliseconds since midnight Jan 1 1970, and a specified date\r getTimezoneOffset()\r Returns the time difference between UTC time and local time, in minutes\r getUTCDate()\r Returns the day of the month, according to universal time (from 1-31)\r getUTCDay()\r Returns the day of the week, according to universal time (from 0-6)\r getUTCFullYear()\r Returns the year, according to universal time\r getUTCHours()\r Returns the hour, according to universal time (from 0-23)\r getUTCMilliseconds()\r Returns the milliseconds, according to universal time (from 0-999)\r getUTCMinutes()\r Returns the minutes, according to universal time (from 0-59)\r getUTCMonth()\r Returns the month, according to universal time (from 0-11)\r getUTCSeconds()\r Returns the seconds, according to universal time (from 0-59)\r getYear()\r Deprecated. Use the getFullYear() method instead\r now()\r Returns the number of milliseconds since midnight Jan 1, 1970\r parse()\r Parses a date string and returns the number of milliseconds since January 1, 1970\r setDate()\r Sets the day of the month of a date object\r setFullYear()\r Sets the year of a date object\r setHours()\r Sets the hour of a date object\r setMilliseconds()\r Sets the milliseconds of a date object\r setMinutes()\r Set the minutes of a date object\r setMonth()\r Sets the month of a date object\r setSeconds()\r Sets the seconds of a date object\r setTime()\r Sets a date to a specified number of milliseconds after\/before January 1, 1970\r setUTCDate()\r Sets the day of the month of a date object, according to universal time\r setUTCFullYear()\r Sets the year of a date object, according to universal time\r setUTCHours()\r Sets the hour of a date object, according to universal time\r setUTCMilliseconds()\r Sets the milliseconds of a date object, according to universal time\r setUTCMinutes()\r Set the minutes of a date object, according to universal time\r setUTCMonth()\r Sets the month of a date object, according to universal time\r setUTCSeconds()\r Set the seconds of a date object, according to universal time\r setYear()\r Deprecated. Use the setFullYear() method instead\r toDateString()\r Converts the date portion of a Date object into a readable string\r toGMTString()\r Deprecated. Use the toUTCString() method instead\r toISOString()\r Returns the date as a string, using the ISO standard\r toJSON()\r Returns the date as a string, formatted as a JSON date\r toLocaleDateString()\r Returns the date portion of a Date object as a string, using locale conventions\r toLocaleTimeString()\r Returns the time portion of a Date object as a string, using locale conventions\r toLocaleString()\r Converts a Date object to a string, using locale conventions\r toString()\r Converts a Date object to a string\r toTimeString()\r Converts the time portion of a Date object to a string\r toUTCString()\r Converts a Date object to a string, according to universal time\r UTC()\r Returns the number of milliseconds in a date since midnight of January 1, 1970, according to UTC time\r valueOf()\r Returns the primitive value of a Date object\r \u276e Previous\r Next \u276f\r googletag.cmd.push(function() {\r googletag.display('div-gpt-ad-1422003450156-5');\r });\r COLOR PICKER\r LEARN MORE\r TabsDropdownsAccordionsConvert WeightsAnimated ButtonsSide NavigationTop NavigationJS AnimationsModal BoxesProgress BarsParallaxLogin FormHTML IncludesGoogle MapsLoadersTooltipsSlideshowFilter ListSort List\r SHARE\r CERTIFICATES\r HTML, CSS, JavaScript, PHP, jQuery, Bootstrap and XML.\r Read More \u00bb\r if (Number(w3_getStyleValue(document.getElementById(\"main\"), \"height\").replace(\"px\", \"\")) > 2200) {\r googletag.cmd.push(function() { googletag.display('div-gpt-ad-1472547360578-0'); });\r }\r window.addEventListener(\"scroll\", fix_stickyad);\r window.addEventListener(\"resize\", fix_stickyad);\r googletag.cmd.push(function() { googletag.display('div-gpt-ad-1422003450156-0'); });\r googletag.cmd.push(function() { googletag.display('div-gpt-ad-1422003450156-3'); });\r REPORT ERROR\r PRINT PAGE\r FORUM\r ABOUT\r \u00d7 Your Suggestion:\r Your E-mail:\r Page address:\r Description:\r Submit\r \u00d7 Thank You For Helping Us!\r Your message has been sent to W3Schools.\r Top 10 Tutorials\r HTML TutorialCSS TutorialJavaScript TutorialW3.CSS TutorialBootstrap TutorialSQL TutorialPHP TutorialjQuery TutorialAngular TutorialXML Tutorial\r Top 10 References\r HTML ReferenceCSS ReferenceJavaScript ReferenceW3.CSS ReferenceBrowser StatisticsPHP ReferenceHTML ColorsHTML Character SetsjQuery ReferenceAngularJS Reference\r Top 10 Examples\r HTML ExamplesCSS ExamplesJavaScript ExamplesW3.CSS ExamplesHTML DOM ExamplesPHP ExamplesASP ExamplesjQuery ExamplesAngular ExamplesXML Examples\r Web Certificates\r HTML CertificateCSS CertificateJavaScript CertificatejQuery CertificatePHP CertificateBootstrap CertificateXML Certificate\r W3Schools is optimized for learning, testing, and training. Examples might be simplified to improve reading and basic understanding.\r Tutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content.\r While using this site, you agree to have read and accepted our terms of use,\r cookie and privacy policy.\r Copyright 1999-2017 by Refsnes Data. All Rights Reserved.Powered by W3.CSS.\r w3schools.com\r THE WORLD'S LARGEST WEB DEVELOPER SITE\r HTML\r CSS\r JAVASCRIPT\r SQL\r PHP\r BOOTSTRAP\r JQUERY\r ANGULAR\r W3.CSS\r XML\r MORE \ue802\r \ue801\r FORUM\r EXAMPLES REFERENCES \u00d7\r HTML and CSS\r Learn HTML\r Learn CSS\r Learn W3.CSS\r Learn Colors\r Learn Bootstrap\r Learn Graphics\r Learn Icons\r Learn How To\r JavaScript\r Learn JavaScript\r Learn jQuery\r Learn jQueryMobile\r Learn AngularJS\r Learn JSON\r Learn AJAX\r Learn W3.JS\r Learn AppML\r Server Side\r Learn SQL\r Learn PHP\r Learn ASP\r Learn Node.js\r Web Building\r Web Templates\r Web Statistics\r Web Certificates\r XML\r Learn XML\r Learn XML AJAX\r Learn XML DOM\r Learn XML DTD\r Learn XML Schema\r Learn XSLT\r Learn XPath\r Learn XQuery\r \u00d7\r HTML\r HTML Tag Reference\r HTML Event Reference\r HTML Color Reference\r HTML Attribute Reference\r HTML Canvas Reference\r HTML SVG Reference\r Google Maps Reference\r CSS\r CSS Reference\r CSS Selector Reference\r W3.CSS Reference\r Bootstrap Reference\r Icon Reference\r JavaScript\r JavaScript Reference\r HTML DOM Reference\r jQuery Reference\r jQuery Mobile Reference\r AngularJS Reference\r W3.JS Reference\r XML\r XML Reference\r XML Http Reference\r XSLT Reference\r XML Schema Reference\r Charsets\r HTML Character Sets\r HTML ASCII\r HTML ANSI\r HTML Windows-1252\r HTML ISO-8859-1\r HTML Symbols\r HTML UTF-8\r Server Side\r PHP Reference\r SQL Reference\r ASP Reference\r \u00d7\r HTML\/CSS\r HTML Examples\r CSS Examples\r W3.CSS Examples\r W3.CSS Templates\r Bootstrap Examples\r JavaScript\r JavaScript Examples\r HTML DOM Examples\r jQuery Examples\r jQuery Mobile Examples\r AngularJS Examples\r AJAX Examples\r W3.JS Examples\r Server Side\r PHP Examples\r ASP Examples\r XML\r XML Examples\r XSLT Examples\r XPath Examples\r XML Schema Examples\r SVG Examples\r Quizzes\r HTML Quiz\r CSS Quiz\r JavaScript Quiz\r Bootstrap Quiz\r jQuery Quiz\r PHP Quiz\r SQL Quiz\r XML Quiz\r \u00d7\r JavaScript Reference\r Overview\r JavaScript\r JS String\r JS Number\r JS Operators\r JS Statements\r JS Math\r JS Date\r JS Array\r JS Boolean\r JS Error\r JS RegExp\r JS Global\r JS Conversion\r Browser BOM\r Window\r Navigator\r Screen\r History\r Location\r HTML DOM\r DOM Document\r DOM Elements\r DOM Attributes\r DOM Events\r DOM Style\r HTML Objects\r - button\r checkbox\r color\r date\r datetime\r datetime-local\r email\r file\r hidden\r image\r month\r number\r password\r radio\r range\r reset\r search\r submit\r text\r time\r url\r week\r Other Objects\r CSSStyleDeclaration\r googletag.cmd.push(function() { googletag.display('div-gpt-ad-1422003450156-2'); });\r The Location Object\r \u276e Previous\r Next \u276f\r Location Object\r The location object contains information about the current URL.\r The location object is part of the window object and is accessed through the window.location property.\r Note: There is no public standard that applies to the location object, but all major browsers support it.\r Location Object Properties\r Property\r Description\r hash\r Sets or returns the anchor part (#) of a URL\r host\r Sets or returns the hostname and port number of a URL\r hostname\r Sets or returns the hostname of a URL\r href\r Sets or returns the entire URL\r origin\r Returns the protocol, hostname and port number of a URL\r pathname\r Sets or returns the path name of a URL\r port\r Sets or returns the port number of a URL\r protocol\r Sets or returns the protocol of a URL\r search\r Sets or returns the querystring part of a URL\r Location Object Methods\r Method\r Description\r assign()\r Loads a new document\r reload()\r Reloads the current document\r replace()\r Replaces the current document with a new one\r \u276e Previous\r Next \u276f\r googletag.cmd.push(function() {\r googletag.display('div-gpt-ad-1422003450156-5');\r });\r COLOR PICKER\r LEARN MORE\r TabsDropdownsAccordionsConvert WeightsAnimated ButtonsSide NavigationTop NavigationJS AnimationsModal BoxesProgress BarsParallaxLogin FormHTML IncludesGoogle MapsLoadersTooltipsSlideshowFilter ListSort List\r SHARE\r CERTIFICATES\r HTML, CSS, JavaScript, PHP, jQuery, Bootstrap and XML.\r Read More \u00bb\r if (Number(w3_getStyleValue(document.getElementById(\"main\"), \"height\").replace(\"px\", \"\")) > 2200) {\r googletag.cmd.push(function() { googletag.display('div-gpt-ad-1472547360578-0'); });\r }\r window.addEventListener(\"scroll\", fix_stickyad);\r window.addEventListener(\"resize\", fix_stickyad);\r googletag.cmd.push(function() { googletag.display('div-gpt-ad-1422003450156-0'); });\r googletag.cmd.push(function() { googletag.display('div-gpt-ad-1422003450156-3'); });\r REPORT ERROR\r PRINT PAGE\r FORUM\r ABOUT\r \u00d7 Your Suggestion:\r Your E-mail:\r Page address:\r Description:\r Submit\r \u00d7 Thank You For Helping Us!\r Your message has been sent to W3Schools.\r Top 10 Tutorials\r HTML TutorialCSS TutorialJavaScript TutorialW3.CSS TutorialBootstrap TutorialSQL TutorialPHP TutorialjQuery TutorialAngular TutorialXML Tutorial\r Top 10 References\r HTML ReferenceCSS ReferenceJavaScript ReferenceW3.CSS ReferenceBrowser StatisticsPHP ReferenceHTML ColorsHTML Character SetsjQuery ReferenceAngularJS Reference\r Top 10 Examples\r HTML ExamplesCSS ExamplesJavaScript ExamplesW3.CSS ExamplesHTML DOM ExamplesPHP ExamplesASP ExamplesjQuery ExamplesAngular ExamplesXML Examples\r Web Certificates\r HTML CertificateCSS CertificateJavaScript CertificatejQuery CertificatePHP CertificateBootstrap CertificateXML Certificate\r W3Schools is optimized for learning, testing, and training. Examples might be simplified to improve reading and basic understanding.\r Tutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness of all content.\r While using this site, you agree to have read and accepted our terms of use,\r cookie and privacy policy.\r Copyright 1999-2017 by Refsnes Data. All Rights Reserved.Powered by W3.CSS.\r","tags":"","url":"https:\/\/www.w3schools.com\/jsref\/obj_location.asp"}]