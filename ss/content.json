[{"title":"C (programming language) - Wikipedia","text":"C (programming language) From Wikipedia, the free encyclopedia Jump to: navigation, search C The C Programming Language[1] (often referred to as \"K&R\"), the seminal book on C Paradigm Imperative (procedural), structured Designed\u00a0by Dennis Ritchie Developer Dennis Ritchie & Bell Labs (creators); ANSI X3J11 (ANSI C); ISO\/IEC JTC1\/SC22\/WG14 (ISO C) First\u00a0appeared 1972; 45\u00a0years ago\u00a0(1972)[2] Stable release C11 \/ December\u00a02011; 5\u00a0years ago\u00a0(2011-12) Typing discipline Static, weak, manifest, nominal OS Cross-platform Filename extensions .c, .h Major implementations K&R, GCC, Clang, Intel C, Microsoft Visual C++, Pelles C, Watcom C Dialects Cyclone, Unified Parallel C, Split-C, Cilk, C* Influenced by B (BCPL, CPL), ALGOL 68,[3] Assembly, PL\/I, FORTRAN Influenced Numerous: AMPL, AWK, csh, C++, C--, C#, Objective-C, BitC, D, Go, Java, JavaScript, Julia, Limbo, LPC, Perl, PHP, Pike, Processing, Python, Rust, Seed7, Vala, Verilog (HDL)[4] C Programming at Wikibooks C (\/\u02c8si\u02d0\/, as in the letter c) is a general-purpose, imperative computer programming language, supporting structured programming, lexical variable scope and recursion, while a static type system prevents many unintended operations. By design, C provides constructs that map efficiently to typical machine instructions, and therefore it has found lasting use in applications that had formerly been coded in assembly language, including operating systems, as well as various application software for computers ranging from supercomputers to embedded systems. C was originally developed by Dennis Ritchie between 1969 and 1973 at Bell Labs,[5] and used to re-implement the Unix operating system.[6] It has since become one of the most widely used programming languages of all time,[7][8] with C compilers from various vendors available for the majority of existing computer architectures and operating systems. C has been standardized by the American National Standards Institute (ANSI) since 1989 (see ANSI C) and subsequently by the International Organization for Standardization (ISO). Contents 1 Design 1.1 Reserved words (Keywords) 1.2 Functions 1.3 C standard library and header files 2 Overview 2.1 Relations to other languages 3 History 3.1 Early developments 3.2 K&R C 3.3 ANSI C and ISO C 3.4 C99 3.5 C11 3.6 Embedded C 4 Syntax 4.1 Character set 4.2 Reserved words 4.3 Operators 5 \"Hello, world\" example 6 Data types 6.1 Pointers 6.2 Arrays 6.3 Array\u2013pointer interchangeability 7 Memory management 8 Libraries 9 Language tools 10 Uses 11 Related languages 12 See also 13 Notes 14 References 15 Sources 16 Further reading 17 External links Design C is an imperative procedural language. It was designed to be compiled using a relatively straightforward compiler, to provide low-level access to memory, to provide language constructs that map efficiently to machine instructions, and to require minimal run-time support. Therefore, C was useful for many applications that had formerly been coded in assembly language, for example in system programming. Despite its low-level capabilities, the language was designed to encourage cross-platform programming. A standards-compliant and portably written C program can be compiled for a very wide variety of computer platforms and operating systems with few changes to its source code. The language has become available on a very wide range of platforms, from embedded microcontrollers to supercomputers. Reserved words (Keywords) Until and including the ANSI-89 standard only around thirty words were reserved for the compiler. These words are known as keywords and are the only words included in the language itself: auto break case char const continue default do double else enum extern for goto if int long register return signed sizeof static struct switch typedef union unsigned void volatile while These words cannot be used for naming variables, constants or in any other way. Later more keywords were added, but most of them are intended to widen the language into areas outside embedded systems.[citation needed] C is, regardless of a few added keywords, still the smallest high-level computer language.[citation needed] Functions Normally a C program requires a number of functions. Unlike several other high-level computer languages, C and C++ do not differentiate between functions and subroutines. Other languages label functions which not return any kind of value as a subroutines. C and C++ instead allow a function to return nothing - or void. In C (here unlike C++) void means \"nothing at all\", not even the value of zero. C standard library and header files While the number of reserved keywords is few, C instead offers many prepared functions called the C standard library which is accessed by including header files. Depending on which types of functions a programmer requires, he or she includes some of these header files, usually at the top of a program file. For larger programs may this inclusion be done in a separate file. If for instance the header file math.h is included, a whole range of various mathematical functions become available. If any kind of input or output is required generally the header file stdio.h is included. Overview Like most imperative languages in the ALGOL tradition, C has facilities for structured programming and allows lexical variable scope and recursion, while a static type system prevents many unintended operations. In C, all executable code is contained within subroutines, which are called \"functions\" (although not in the strict sense of functional programming). Function parameters are always passed by value. Pass-by-reference is simulated in C by explicitly passing pointer values. C program source text is free-format, using the semicolon as a statement terminator and curly braces for grouping blocks of statements. The C language also exhibits the following characteristics: There is a small, fixed number of keywords, including a full set of flow of control primitives: for, if\/else, while, switch, and do\/while. User-defined names are not distinguished from keywords by any kind of sigil. There are a large number of arithmetical and logical operators, such as +, +=, ++, &, ~, etc. More than one assignment may be performed in a single statement. Function return values can be ignored when not needed. Typing is static, but weakly enforced: all data has a type, but implicit conversions may be performed. Declaration syntax mimics usage context. C has no \"define\" keyword; instead, a statement beginning with the name of a type is taken as a declaration. There is no \"function\" keyword; instead, a function is indicated by the parentheses of an argument list. User-defined (typedef) and compound types are possible. Heterogeneous aggregate data types (struct) allow related data elements to be accessed and assigned as a unit. Array indexing is a secondary notation, defined in terms of pointer arithmetic. Unlike structs, arrays are not first-class objects; they cannot be assigned or compared using single built-in operators. There is no \"array\" keyword, in use or definition; instead, square brackets indicate arrays syntactically, for example month[11]. Enumerated types are possible with the enum keyword. They are not tagged, and are freely interconvertible with integers. Strings are not a separate data type, but are conventionally implemented as null-terminated arrays of characters. Low-level access to computer memory is possible by converting machine addresses to typed pointers. Procedures (subroutines not returning values) are a special case of function, with an untyped return type void. Functions may not be defined within the lexical scope of other functions. Function and data pointers permit ad hoc run-time polymorphism. A preprocessor performs macro definition, source code file inclusion, and conditional compilation. There is a basic form of modularity: files can be compiled separately and linked together, with control over which functions and data objects are visible to other files via static and extern attributes. Complex functionality such as I\/O, string manipulation, and mathematical functions are consistently delegated to library routines. While C does not include some features found in some other languages, such as object orientation or garbage collection, such features can be implemented or emulated in C, often by way of external libraries (e.g., the Boehm garbage collector or the GLib Object System). Relations to other languages Many later languages have borrowed directly or indirectly from C, including C++, D, Go, Rust, Java, JavaScript, Limbo, LPC, C#, Objective-C, Perl, PHP, Python, Swift, Verilog (hardware description language),[4] and Unix's C shell. These languages have drawn many of their control structures and other basic features from C. Most of them (with Python being the most dramatic exception) are also very syntactically similar to C in general, and they tend to combine the recognizable expression and statement syntax of C with underlying type systems, data models, and semantics that can be radically different. History Early developments Ken Thompson (left) with Dennis Ritchie (right, the inventor of the C programming language) The origin of C is closely tied to the development of the Unix operating system, originally implemented in assembly language on a PDP-7 by Dennis Ritchie and Ken Thompson, incorporating several ideas from colleagues. Eventually, they decided to port the operating system to a PDP-11. The original PDP-11 version of Unix was developed in assembly language. The developers were considering rewriting the system using the B language, Thompson's simplified version of BCPL.[9] However B's inability to take advantage of some of the PDP-11's features, notably byte addressability, led to C. The name of C was chosen simply as the next after B.[10] The development of C started in 1972 on the PDP-11 Unix system[11] and first appeared in Version 2 Unix.[12] The language was not initially designed with portability in mind, but soon ran on different platforms as well: a compiler for the Honeywell 6000 was written within the first year of C's history, while an IBM System\/370 port followed soon.[1][11] Also in 1972, a large part of Unix was rewritten in C.[13] By 1973, with the addition of struct types, the C language had become powerful enough that most of the Unix kernel was now in C. Unix was one of the first operating system kernels implemented in a language other than assembly. Earlier instances include the Multics system which was written in PL\/I), and Master Control Program (MCP) for the Burroughs B5000 written in ALGOL in 1961. In around 1977, Ritchie and Stephen C. Johnson made further changes to the language to facilitate portability of the Unix operating system. Johnson's Portable C Compiler served as the basis for several implementations of C on new platforms.[11] K&R C The cover of the book, The C Programming Language, first edition by Brian Kernighan and Dennis Ritchie In 1978, Brian Kernighan and Dennis Ritchie published the first edition of The C Programming Language.[1] This book, known to C programmers as \"K&R\", served for many years as an informal specification of the language. The version of C that it describes is commonly referred to as K&R C. The second edition of the book[14] covers the later ANSI C standard, described below. K&R introduced several language features: Standard I\/O library long int data type unsigned int data type Compound assignment operators of the form =op (such as =-) were changed to the form op= (that is, -=) to remove the semantic ambiguity created by constructs such as i=-10, which had been interpreted as i\u00a0=-\u00a010 (decrement i by 10) instead of the possibly intended i\u00a0=\u00a0-10 (let i be -10). Even after the publication of the 1989 ANSI standard, for many years K&R C was still considered the \"lowest common denominator\" to which C programmers restricted themselves when maximum portability was desired, since many older compilers were still in use, and because carefully written K&R C code can be legal Standard C as well. In early versions of C, only functions that return types other than int must be declared if used before the function definition; functions used without prior declaration were presumed to return type int. For example: long some_function(); \/* int *\/ other_function(); \/* int *\/ calling_function() { long test1; register \/* int *\/ test2; test1 = some_function(); if (test1 > 0) test2 = 0; else test2 = other_function(); return test2; } The int type specifiers which are commented out could be omitted in K&R C, but are required in later standards. Since K&R function declarations did not include any information about function arguments, function parameter type checks were not performed, although some compilers would issue a warning message if a local function was called with the wrong number of arguments, or if multiple calls to an external function used different numbers or types of arguments. Separate tools such as Unix's lint utility were developed that (among other things) could check for consistency of function use across multiple source files. In the years following the publication of K&R C, several features were added to the language, supported by compilers from AT&T (in particular PCC[15]) and some other vendors. These included: void functions (i.e., functions with no return value) functions returning struct or union types (rather than pointers) assignment for struct data types enumerated types The large number of extensions and lack of agreement on a standard library, together with the language popularity and the fact that not even the Unix compilers precisely implemented the K&R specification, led to the necessity of standardization. ANSI C and ISO C Main article: ANSI C During the late 1970s and 1980s, versions of C were implemented for a wide variety of mainframe computers, minicomputers, and microcomputers, including the IBM PC, as its popularity began to increase significantly. In 1983, the American National Standards Institute (ANSI) formed a committee, X3J11, to establish a standard specification of C. X3J11 based the C standard on the Unix implementation; however, the non-portable portion of the Unix C library was handed off to the IEEE working group 1003 to become the basis for the 1988 POSIX standard. In 1989, the C standard was ratified as ANSI X3.159-1989 \"Programming Language C\". This version of the language is often referred to as ANSI C, Standard C, or sometimes C89. In 1990, the ANSI C standard (with formatting changes) was adopted by the International Organization for Standardization (ISO) as ISO\/IEC 9899:1990, which is sometimes called C90. Therefore, the terms \"C89\" and \"C90\" refer to the same programming language. ANSI, like other national standards bodies, no longer develops the C standard independently, but defers to the international C standard, maintained by the working group ISO\/IEC JTC1\/SC22\/WG14. National adoption of an update to the international standard typically occurs within a year of ISO publication. One of the aims of the C standardization process was to produce a superset of K&R C, incorporating many of the subsequently introduced unofficial features. The standards committee also included several additional features such as function prototypes (borrowed from C++), void pointers, support for international character sets and locales, and preprocessor enhancements. Although the syntax for parameter declarations was augmented to include the style used in C++, the K&R interface continued to be permitted, for compatibility with existing source code. C89 is supported by current C compilers, and most C code being written today is based on it. Any program written only in Standard C and without any hardware-dependent assumptions will run correctly on any platform with a conforming C implementation, within its resource limits. Without such precautions, programs may compile only on a certain platform or with a particular compiler, due, for example, to the use of non-standard libraries, such as GUI libraries, or to a reliance on compiler- or platform-specific attributes such as the exact size of data types and byte endianness. In cases where code must be compilable by either standard-conforming or K&R C-based compilers, the __STDC__ macro can be used to split the code into Standard and K&R sections to prevent the use on a K&R C-based compiler of features available only in Standard C. After the ANSI\/ISO standardization process, the C language specification remained relatively static for several years. In 1995, Normative Amendment 1 to the 1990 C standard (ISO\/IEC 9899\/AMD1:1995, known informally as C95) was published, to correct some details and to add more extensive support for international character sets.[citation needed] C99 Main article: C99 The C standard was further revised in the late 1990s, leading to the publication of ISO\/IEC 9899:1999 in 1999, which is commonly referred to as \"C99\". It has since been amended three times by Technical Corrigenda.[16] C99 introduced several new features, including inline functions, several new data types (including long long int and a complex type to represent complex numbers), variable-length arrays and flexible array members, improved support for IEEE 754 floating point, support for variadic macros (macros of variable arity), and support for one-line comments beginning with \/\/, as in BCPL or C++. Many of these had already been implemented as extensions in several C compilers. C99 is for the most part backward compatible with C90, but is stricter in some ways; in particular, a declaration that lacks a type specifier no longer has int implicitly assumed. A standard macro __STDC_VERSION__ is defined with value 199901L to indicate that C99 support is available. GCC, Solaris Studio, and other C compilers now support many or all of the new features of C99. The C compiler in Microsoft Visual C++, however, implements the C89 standard and those parts of C99 that are required for compatibility with C++11.[17] C11 Main article: C11 (C standard revision) In 2007, work began on another revision of the C standard, informally called \"C1X\" until its official publication on 2011-12-08. The C standards committee adopted guidelines to limit the adoption of new features that had not been tested by existing implementations. The C11 standard adds numerous new features to C and the library, including type generic macros, anonymous structures, improved Unicode support, atomic operations, multi-threading, and bounds-checked functions. It also makes some portions of the existing C99 library optional, and improves compatibility with C++. The standard macro __STDC_VERSION__ is defined as 201112L to indicate that C11 support is available. Embedded C Main article: Embedded C Historically, embedded C programming requires nonstandard extensions to the C language in order to support exotic features such as fixed-point arithmetic, multiple distinct memory banks, and basic I\/O operations. In 2008, the C Standards Committee published a technical report extending the C language[18] to address these issues by providing a common standard for all implementations to adhere to. It includes a number of features not available in normal C, such as fixed-point arithmetic, named address spaces, and basic I\/O hardware addressing. Syntax Main article: C syntax C has a formal grammar specified by the C standard.[19] Line endings are generally not significant in C; however, line boundaries do have significance during the preprocessing phase. Comments may appear either between the delimiters \/* and *\/, or (since C99) following \/\/ until the end of the line. Comments delimited by \/* and *\/ do not nest, and these sequences of characters are not interpreted as comment delimiters if they appear inside string or character literals.[20] C source files contain declarations and function definitions. Function definitions, in turn, contain declarations and statements. Declarations either define new types using keywords such as struct, union, and enum, or assign types to and perhaps reserve storage for new variables, usually by writing the type followed by the variable name. Keywords such as char and int specify built-in types. Sections of code are enclosed in braces ({ and }, sometimes called \"curly brackets\") to limit the scope of declarations and to act as a single statement for control structures. As an imperative language, C uses statements to specify actions. The most common statement is an expression statement, consisting of an expression to be evaluated, followed by a semicolon; as a side effect of the evaluation, functions may be called and variables may be assigned new values. To modify the normal sequential execution of statements, C provides several control-flow statements identified by reserved keywords. Structured programming is supported by if(-else) conditional execution and by do-while, while, and for iterative execution (looping). The for statement has separate initialization, testing, and reinitialization expressions, any or all of which can be omitted. break and continue can be used to leave the innermost enclosing loop statement or skip to its reinitialization. There is also a non-structured goto statement which branches directly to the designated label within the function. switch selects a case to be executed based on the value of an integer expression. Expressions can use a variety of built-in operators and may contain function calls. The order in which arguments to functions and operands to most operators are evaluated is unspecified. The evaluations may even be interleaved. However, all side effects (including storage to variables) will occur before the next \"sequence point\"; sequence points include the end of each expression statement, and the entry to and return from each function call. Sequence points also occur during evaluation of expressions containing certain operators (&&, ||, ?: and the comma operator). This permits a high degree of object code optimization by the compiler, but requires C programmers to take more care to obtain reliable results than is needed for other programming languages. Kernighan and Ritchie say in the Introduction of The C Programming Language: \"C, like any other language, has its blemishes. Some of the operators have the wrong precedence; some parts of the syntax could be better.\"[21] The C standard did not attempt to correct many of these blemishes, because of the impact of such changes on already existing software. Character set The basic C source character set includes the following characters: Lowercase and uppercase letters of ISO Basic Latin Alphabet: a\u2013z A\u2013Z Decimal digits: 0\u20139 Graphic characters: ! \" #\u00a0% & ' ( ) * + , - . \/\u00a0:\u00a0; < = >\u00a0? [ \\ ] ^ _ { | } ~ Whitespace characters: space, horizontal tab, vertical tab, form feed, newline Newline indicates the end of a text line; it need not correspond to an actual single character, although for convenience C treats it as one. Additional multi-byte encoded characters may be used in string literals, but they are not entirely portable. The latest C standard (C11) allows multi-national Unicode characters to be embedded portably within C source text by using \\uXXXX or \\UXXXXXXXX encoding (where the X denotes a hexadecimal character), although this feature is not yet widely implemented. The basic C execution character set contains the same characters, along with representations for alert, backspace, and carriage return. Run-time support for extended character sets has increased with each revision of the C standard. Reserved words C89 has 32 reserved words, also known as keywords, which are the words that cannot be used for any purposes other than those for which they are predefined: auto break case char const continue default do double else enum extern float for goto if int long register return short signed sizeof static struct switch typedef union unsigned void volatile while C99 reserved five more words: _Bool _Complex _Imaginary inline restrict C11 reserved seven more words:[22] _Alignas _Alignof _Atomic _Generic _Noreturn _Static_assert _Thread_local Most of the recently reserved words begin with an underscore followed by a capital letter, because identifiers of that form were previously reserved by the C standard for use only by implementations. Since existing program source code should not have been using these identifiers, it would not be affected when C implementations started supporting these extensions to the programming language. Some standard headers do define more convenient synonyms for underscored identifiers. The language previously included a reserved word called entry, but this was seldom implemented, and has now been removed as a reserved word.[23] Operators Main article: Operators in C and C++ C supports a rich set of operators, which are symbols used within an expression to specify the manipulations to be performed while evaluating that expression. C has operators for: arithmetic: +, -, *, \/, % assignment: = augmented assignment: +=, -=, *=, \/=, %=, &=, |=, ^=, = bitwise logic: ~, &, |, ^ bitwise shifts: boolean logic: !, &&, || conditional evaluation: ? : equality testing: ==, != calling functions: ( ) increment and decrement: ++, -- member selection: ., -> object size: sizeof order relations: = reference and dereference: &, *, [ ] sequencing: , subexpression grouping: ( ) type conversion: (typename) C uses the operator = (used in mathematics to express equality) to indicate assignment, following the precedent of Fortran and PL\/I, but unlike ALGOL and its derivatives. C uses the operator == to test for equality. The similarity between these two operators (assignment and equality) may result in the accidental use of one in place of the other, and in many cases, the mistake does not produce an error message (although some compilers produce warnings). For example, the conditional expression if(a==b+1) might mistakenly be written as if(a=b+1), which will be evaluated as true if a is not zero after the assignment.[24] The C operator precedence is not always intuitive. For example, the operator == binds more tightly than (is executed prior to) the operators & (bitwise AND) and | (bitwise OR) in expressions such as x & 1 == 0, which must be written as (x & 1) == 0 if that is the coder's intent.[25] \"Hello, world\" example The \"hello, world\" example, which appeared in the first edition of K&R, has become the model for an introductory program in most programming textbooks, regardless of programming language. The program prints \"hello, world\" to the standard output, which is usually a terminal or screen display. The original version was:[26] main() { printf(\"hello, world\\n\"); } A standard-conforming \"hello, world\" program is:[a] #include int main(void) { printf(\"hello, world\\n\"); } The first line of the program contains a preprocessing directive, indicated by #include. This causes the compiler to replace that line with the entire text of the stdio.h standard header, which contains declarations for standard input and output functions such as printf. The angle brackets surrounding stdio.h indicate that stdio.h is located using a search strategy that prefers headers provided with the compiler to other headers having the same name, as opposed to double quotes which typically include local or project-specific header files. The next line indicates that a function named main is being defined. The main function serves a special purpose in C programs; the run-time environment calls the main function to begin program execution. The type specifier int indicates that the value that is returned to the invoker (in this case the run-time environment) as a result of evaluating the main function, is an integer. The keyword void as a parameter list indicates that this function takes no arguments.[b] The opening curly brace indicates the beginning of the definition of the main function. The next line calls (diverts execution to) a function named printf, which in this case is supplied from a system library. In this call, the printf function is passed (provided with) a single argument, the address of the first character in the string literal \"hello, world\\n\". The string literal is an unnamed array with elements of type char, set up automatically by the compiler with a final 0-valued character to mark the end of the array (printf needs to know this). The \\n is an escape sequence that C translates to a newline character, which on output signifies the end of the current line. The return value of the printf function is of type int, but it is silently discarded since it is not used. (A more careful program might test the return value to determine whether or not the printf function succeeded.) The semicolon ; terminates the statement. The closing curly brace indicates the end of the code for the main function. According to the C99 specification and newer, the main function, unlike any other function, will implicitly return a value of 0 upon reaching the } that terminates the function. (Formerly an explicit return 0; statement was required.) This is interpreted by the run-time system as an exit code indicating successful execution.[27] Data types Main article: C variable types and declarations This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (October 2012) (Learn how and when to remove this template message) The type system in C is static and weakly typed, which makes it similar to the type system of ALGOL descendants such as Pascal.[28] There are built-in types for integers of various sizes, both signed and unsigned, floating-point numbers, and enumerated types (enum). Integer type char is often used for single-byte characters. C99 added a boolean datatype. There are also derived types including arrays, pointers, records (struct), and untagged unions (union). C is often used in low-level systems programming where escapes from the type system may be necessary. The compiler attempts to ensure type correctness of most expressions, but the programmer can override the checks in various ways, either by using a type cast to explicitly convert a value from one type to another, or by using pointers or unions to reinterpret the underlying bits of a data object in some other way. Some find C's declaration syntax unintuitive, particularly for function pointers. (Ritchie's idea was to declare identifiers in contexts resembling their use: \"declaration reflects use\".)[29] C's usual arithmetic conversions allow for efficient code to be generated, but can sometimes produce unexpected results. For example, a comparison of signed and unsigned integers of equal width requires a conversion of the signed value to unsigned. This can generate unexpected results if the signed value is negative. Pointers C supports the use of pointers, a type of reference that records the address or location of an object or function in memory. Pointers can be dereferenced to access data stored at the address pointed to, or to invoke a pointed-to function. Pointers can be manipulated using assignment or pointer arithmetic. The run-time representation of a pointer value is typically a raw memory address (perhaps augmented by an offset-within-word field), but since a pointer's type includes the type of the thing pointed to, expressions including pointers can be type-checked at compile time. Pointer arithmetic is automatically scaled by the size of the pointed-to data type. Pointers are used for many purposes in C. Text strings are commonly manipulated using pointers into arrays of characters. Dynamic memory allocation is performed using pointers. Many data types, such as trees, are commonly implemented as dynamically allocated struct objects linked together using pointers. Pointers to functions are useful for passing functions as arguments to higher-order functions (such as qsort or bsearch) or as callbacks to be invoked by event handlers.[27] A null pointer value explicitly points to no valid location. Dereferencing a null pointer value is undefined, often resulting in a segmentation fault. Null pointer values are useful for indicating special cases such as no \"next\" pointer in the final node of a linked list, or as an error indication from functions returning pointers. In appropriate contexts in source code, such as for assigning to a pointer variable, a null pointer constant can be written as 0, with or without explicit casting to a pointer type, or as the NULL macro defined by several standard headers. In conditional contexts, null pointer values evaluate to false, while all other pointer values evaluate to true. Void pointers (void *) point to objects of unspecified type, and can therefore be used as \"generic\" data pointers. Since the size and type of the pointed-to object is not known, void pointers cannot be dereferenced, nor is pointer arithmetic on them allowed, although they can easily be (and in many contexts implicitly are) converted to and from any other object pointer type.[27] Careless use of pointers is potentially dangerous. Because they are typically unchecked, a pointer variable can be made to point to any arbitrary location, which can cause undesirable effects. Although properly used pointers point to safe places, they can be made to point to unsafe places by using invalid pointer arithmetic; the objects they point to may continue to be used after deallocation (dangling pointers); they may be used without having been initialized (wild pointers); or they may be directly assigned an unsafe value using a cast, union, or through another corrupt pointer. In general, C is permissive in allowing manipulation of and conversion between pointer types, although compilers typically provide options for various levels of checking. Some other programming languages address these problems by using more restrictive reference types. Arrays See also: C string Array types in C are traditionally of a fixed, static size specified at compile time. (The more recent C99 standard also allows a form of variable-length arrays.) However, it is also possible to allocate a block of memory (of arbitrary size) at run-time, using the standard library's malloc function, and treat it as an array. C's unification of arrays and pointers means that declared arrays and these dynamically allocated simulated arrays are virtually interchangeable. Since arrays are always accessed (in effect) via pointers, array accesses are typically not checked against the underlying array size, although some compilers may provide bounds checking as an option.[30] Array bounds violations are therefore possible and rather common in carelessly written code, and can lead to various repercussions, including illegal memory accesses, corruption of data, buffer overruns, and run-time exceptions. If bounds checking is desired, it must be done manually. C does not have a special provision for declaring multi-dimensional arrays, but rather relies on recursion within the type system to declare arrays of arrays, which effectively accomplishes the same thing. The index values of the resulting \"multi-dimensional array\" can be thought of as increasing in row-major order. Multi-dimensional arrays are commonly used in numerical algorithms (mainly from applied linear algebra) to store matrices. The structure of the C array is well suited to this particular task. However, since arrays are passed merely as pointers, the bounds of the array must be known fixed values or else explicitly passed to any subroutine that requires them, and dynamically sized arrays of arrays cannot be accessed using double indexing. (A workaround for this is to allocate the array with an additional \"row vector\" of pointers to the columns.) C99 introduced \"variable-length arrays\" which address some, but not all, of the issues with ordinary C arrays. Array\u2013pointer interchangeability The subscript notation x[i] (where x designates a pointer) is syntactic sugar for *(x+i).[31] Taking advantage of the compiler's knowledge of the pointer type, the address that x + i points to is not the base address (pointed to by x) incremented by i bytes, but rather is defined to be the base address incremented by i multiplied by the size of an element that x points to. Thus, x[i] designates the i+1th element of the array. Furthermore, in most expression contexts (a notable exception is as operand of sizeof), the name of an array is automatically converted to a pointer to the array's first element. This implies that an array is never copied as a whole when named as an argument to a function, but rather only the address of its first element is passed. Therefore, although function calls in C use pass-by-value semantics, arrays are in effect passed by reference. The size of an element can be determined by applying the operator sizeof to any dereferenced element of x, as in n = sizeof *x or n = sizeof x[0], and the number of elements in a declared array A can be determined as sizeof A \/ sizeof A[0]. The latter only applies to array names: variables declared with subscripts (int A[20]). Due to the semantics of C, it is not possible to determine the entire size of arrays through pointers to arrays or those created by dynamic allocation (malloc); code such as sizeof arr \/ sizeof arr[0] (where arr designates a pointer) will not work since the compiler assumes the size of the pointer itself is being requested.[32][33] Since array name arguments to sizeof are not converted to pointers, they do not exhibit such ambiguity. However, arrays created by dynamic allocation are accessed by pointers rather than true array variables, so they suffer from the same sizeof issues as array pointers. Thus, despite this apparent equivalence between array and pointer variables, there is still a distinction to be made between them. Even though the name of an array is, in most expression contexts, converted into a pointer (to its first element), this pointer does not itself occupy any storage; the array name is not an l-value, and its address is a constant, unlike a pointer variable. Consequently, what an array \"points to\" cannot be changed, and it is impossible to assign a new address to an array name. Array contents may be copied, however, by using the memcpy function, or by accessing the individual elements. Memory management One of the most important functions of a programming language is to provide facilities for managing memory and the objects that are stored in memory. C provides three distinct ways to allocate memory for objects:[27] Static memory allocation: space for the object is provided in the binary at compile-time; these objects have an extent (or lifetime) as long as the binary which contains them is loaded into memory. Automatic memory allocation: temporary objects can be stored on the stack, and this space is automatically freed and reusable after the block in which they are declared is exited. Dynamic memory allocation: blocks of memory of arbitrary size can be requested at run-time using library functions such as malloc from a region of memory called the heap; these blocks persist until subsequently freed for reuse by calling the library function realloc or free These three approaches are appropriate in different situations and have various trade-offs. For example, static memory allocation has little allocation overhead, automatic allocation may involve slightly more overhead, and dynamic memory allocation can potentially have a great deal of overhead for both allocation and deallocation. The persistent nature of static objects is useful for maintaining state information across function calls, automatic allocation is easy to use but stack space is typically much more limited and transient than either static memory or heap space, and dynamic memory allocation allows convenient allocation of objects whose size is known only at run-time. Most C programs make extensive use of all three. Where possible, automatic or static allocation is usually simplest because the storage is managed by the compiler, freeing the programmer of the potentially error-prone chore of manually allocating and releasing storage. However, many data structures can change in size at runtime, and since static allocations (and automatic allocations before C99) must have a fixed size at compile-time, there are many situations in which dynamic allocation is necessary.[27] Prior to the C99 standard, variable-sized arrays were a common example of this. (See the article on malloc for an example of dynamically allocated arrays.) Unlike automatic allocation, which can fail at run time with uncontrolled consequences, the dynamic allocation functions return an indication (in the form of a null pointer value) when the required storage cannot be allocated. (Static allocation that is too large is usually detected by the linker or loader, before the program can even begin execution.) Unless otherwise specified, static objects contain zero or null pointer values upon program startup. Automatically and dynamically allocated objects are initialized only if an initial value is explicitly specified; otherwise they initially have indeterminate values (typically, whatever bit pattern happens to be present in the storage, which might not even represent a valid value for that type). If the program attempts to access an uninitialized value, the results are undefined. Many modern compilers try to detect and warn about this problem, but both false positives and false negatives can occur. Another issue is that heap memory allocation has to be synchronized with its actual usage in any program in order for it to be reused as much as possible. For example, if the only pointer to a heap memory allocation goes out of scope or has its value overwritten before free() is called, then that memory cannot be recovered for later reuse and is essentially lost to the program, a phenomenon known as a memory leak. Conversely, it is possible for memory to be freed but continue to be referenced, leading to unpredictable results. Typically, the symptoms will appear in a portion of the program far removed from the actual error, making it difficult to track down the problem. (Such issues are ameliorated in languages with automatic garbage collection.) Libraries The C programming language uses libraries as its primary method of extension. In C, a library is a set of functions contained within a single \"archive\" file. Each library typically has a header file, which contains the prototypes of the functions contained within the library that may be used by a program, and declarations of special data types and macro symbols used with these functions. In order for a program to use a library, it must include the library's header file, and the library must be linked with the program, which in many cases requires compiler flags (e.g., -lm, shorthand for \"link the math library\").[27] The most common C library is the C standard library, which is specified by the ISO and ANSI C standards and comes with every C implementation (implementations which target limited environments such as embedded systems may provide only a subset of the standard library). This library supports stream input and output, memory allocation, mathematics, character strings, and time values. Several separate standard headers (for example, stdio.h) specify the interfaces for these and other standard library facilities. Another common set of C library functions are those used by applications specifically targeted for Unix and Unix-like systems, especially functions which provide an interface to the kernel. These functions are detailed in various standards such as POSIX and the Single UNIX Specification. Since many programs have been written in C, there are a wide variety of other libraries available. Libraries are often written in C because C compilers generate efficient object code; programmers then create interfaces to the library so that the routines can be used from higher-level languages like Java, Perl, and Python.[27] Language tools This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (July 2014) (Learn how and when to remove this template message) A number of tools have been developed to help C programmers find and fix statements with undefined behavior or possibly erroneous expressions, with greater rigor than that provided by the compiler. The tool lint was the first such, leading to many others. Automated source code checking and auditing are beneficial in any language, and for C many such tools exist, such as Lint. A common practice is to use Lint to detect questionable code when a program is first written. Once a program passes Lint, it is then compiled using the C compiler. Also, many compilers can optionally warn about syntactically valid constructs that are likely to actually be errors. MISRA C is a proprietary set of guidelines to avoid such questionable code, developed for embedded systems.[34] There are also compilers, libraries, and operating system level mechanisms for performing actions that are not a standard part of C, such as bounds checking for arrays, detection of buffer overflow, serialization, dynamic memory tracking, and automatic garbage collection. Tools such as Purify or Valgrind and linking with libraries containing special versions of the memory allocation functions can help uncover runtime errors in memory usage. Uses The TIOBE index graph from 2002 to 2015, showing a comparison of the popularity of various programming languages[35] C is widely used for system programming in implementing operating systems and embedded system applications[36], because C code, when written for portability, can be used for most purposes, yet when needed, system-specific code can be used to access specific hardware addresses and to perform type punning to match externally imposed interface requirements, with a low run-time demand on system resources. C can also be used for website programming using CGI as a \"gateway\" for information between the Web application, the server, and the browser.[37] C is often chosen over interpreted languages because of its speed, stability, and near-universal availability.[38] One consequence of C wide availability and efficiency is that compilers, libraries and interpreters of other programming languages are often implemented in C. The reference implementations of Python, Perl and PHP, for example, are all written in C. Because the layer of abstraction is thin and the overhead is low, C enables programmers to create efficient implementations of algorithms and data structures, useful for computationally intense programs. For example, the GNU Multiple Precision Arithmetic Library, the GNU Scientific Library, Mathematica, and MATLAB are completely or partially written in C. C is sometimes used as an intermediate language by implementations of other languages. This approach may be used for portability or convenience; by using C as an intermediate language, additional machine-specific code generators are not necessary. C has some features, such as line-number preprocessor directives and optional superfluous commas at the end of initializer lists, that support compilation of generated code. However, some of C shortcomings have prompted the development of other C-based languages specifically designed for use as intermediate languages, such as C--. C has also been widely used to implement end-user applications. However, such applications can also be written in newer, higher-level languages. Related languages C has both directly and indirectly influenced many later languages such as C#, D, Go, Java, JavaScript, Limbo, LPC, Perl, PHP, Python, and Unix's C shell.[39] The most pervasive influence has been syntactical, all of the languages mentioned combine the statement and (more or less recognizably) expression syntax of C with type systems, data models and\/or large-scale program structures that differ from those of C, sometimes radically. Several C or near-C interpreters exist, including Ch and CINT, which can also be used for scripting. When object-oriented languages became popular, C++ and Objective-C were two different extensions of C that provided object-oriented capabilities. Both languages were originally implemented as source-to-source compilers; source code was translated into C, and then compiled with a C compiler.[40] The C++ programming language was devised by Bjarne Stroustrup as an approach to providing object-oriented functionality with a C-like syntax.[41] C++ adds greater typing strength, scoping, and other tools useful in object-oriented programming, and permits generic programming via templates. Nearly a superset of C, C++ now supports most of C, with a few exceptions. Objective-C was originally a very \"thin\" layer on top of C, and remains a strict superset of C that permits object-oriented programming using a hybrid dynamic\/static typing paradigm. Objective-C derives its syntax from both C and Smalltalk: syntax that involves preprocessing, expressions, function declarations, and function calls is inherited from C, while the syntax for object-oriented features was originally taken from Smalltalk. In addition to C++ and Objective-C, Ch, Cilk and Unified Parallel C are nearly supersets of C. See also Computer programming portal Information technology portal Comparison of Pascal and C Comparison of programming languages International Obfuscated C Code Contest List of C-based programming languages List of C compilers Notes ^ The original example code will compile on most modern compilers that are not in strict standard compliance mode, but it does not fully conform to the requirements of either C89 or C99. In fact, C99 requires that a diagnostic message be produced. ^ The main function actually has two arguments, int argc and char *argv[], respectively, which can be used to handle command line arguments. The ISO C standard (section 5.1.2.2.1) requires both forms of main to be supported, which is special treatment not afforded to any other function. References ^ a b c d e Kernighan, Brian W.; Ritchie, Dennis M. (February 1978). The C Programming Language (1st ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN\u00a00-13-110163-3.\u00a0 Regarded by many to be the authoritative reference on C. ^ Ritchie (1993): \"Thompson had made a brief attempt to produce a system coded in an early version of C\u2014before structures\u2014in 1972, but gave up the effort.\" ^ Ritchie (1993): \"The scheme of type composition adopted by C owes considerable debt to Algol 68, although it did not, perhaps, emerge in a form that Algol's adherents would approve of.\" ^ a b \"Verilog HDL (and C)\" (PDF). The Research School of Computer Science at the Australian National University. 2010-06-03. Retrieved 2013-08-19. 1980s:\u00a0; Verilog first introduced\u00a0; Verilog inspired by the C programming language\u00a0 ^ Ritchie (1993) ^ Lawlis, Patricia K. (August 1997). \"Guidelines for Choosing a Computer Language: Support for the Visionary Organization\". Ada Information Clearinghouse. Retrieved 18 July 2006.\u00a0 ^ \"Programming Language Popularity\". 2009. Retrieved 16 January 2009.\u00a0 ^ \"TIOBE Programming Community Index\". 2009. Retrieved 6 May 2009.\u00a0 ^ Ritchie, Dennis M. (March 1993). \"The Development of the C Language\". ACM SIGPLAN Notices. 28 (3): 201\u2013208. doi:10.1145\/155360.155580.\u00a0 ^ Ulf Bilting & Jan Skansholm \"V\u00e4gen till C\" (Swedish) meaning \"The Road to C\", third edition, Studentlitteratur, year 2000, page 3. ISBN 91-44-01468-6. ^ a b c Johnson, S. C.; Ritchie, D. M. (1978). \"Portability of C Programs and the UNIX System\". Bell System Tech. J. 57 (6): 2021\u20132048. doi:10.1002\/j.1538-7305.1978.tb02141.x. Retrieved 16 December 2012.\u00a0 (Note: this reference is an OCR scan of the original, and contains an OCR glitch rendering \"IBM 370\" as \"IBM 310\".) ^ McIlroy, M. D. (1987). A Research Unix reader: annotated excerpts from the Programmer's Manual, 1971\u20131986 (PDF) (Technical report). CSTR. Bell Labs. p.\u00a010. 139.\u00a0 ^ Stallings, William. \"Operating Systems: Internals and Design Principles\" 5th ed, page 91. Pearson Education, Inc. 2005. ^ a b Kernighan, Brian W.; Ritchie, Dennis M. (March 1988). The C Programming Language (2nd ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN\u00a00-13-110362-8.\u00a0 ^ Stroustrup, Bjarne (2002). Sibling rivalry: C and C++ (PDF) (Report). AT&T Labs.\u00a0 ^ \"JTC1\/SC22\/WG14\u00a0\u2013 C\". Home page. ISO\/IEC. Retrieved 2 June 2011.\u00a0 ^ Andrew Binstock (October 12, 2011). \"Interview with Herb Sutter\". Dr. Dobbs. Retrieved September 7, 2013.\u00a0 ^ \"TR 18037: Embedded C\" (PDF). ISO \/ IEC. Retrieved 26 July 2011.\u00a0 ^ Harbison, Samuel P.; Steele, Guy L. (2002). C: A Reference Manual (5th ed.). Englewood Cliffs, NJ: Prentice Hall. ISBN\u00a00-13-089592-X.\u00a0 Contains a BNF grammar for C. ^ Kernighan, Brian W.; Ritchie, Dennis M. (1996). The C Programming Language (2nd ed.). Prentice Hall. p.\u00a0192. ISBN\u00a07 302 02412 X.\u00a0 ^ Page 3 of the original K&R[1] ^ ISO\/IEC 9899:201x (ISO C11) Committee Draft ^ Kernighan, Brian W.; Ritchie, Dennis M. (1996). The C Programming Language (2nd ed.). Prentice Hall. pp.\u00a0192, 259. ISBN\u00a07 302 02412 X.\u00a0 ^ \"10 Common Programming Mistakes in C++\". Cs.ucr.edu. Retrieved 26 June 2009.\u00a0 ^ Schultz, Thomas (2004). C and the 8051 (3rd ed.). Otsego, MI: PageFree Publishing Inc. p.\u00a020. ISBN\u00a01-58961-237-X. Retrieved 10 February 2012.\u00a0 ^ Page 6 of the original K&R[1] ^ a b c d e f g Klemens, Ben (2013). 21st Century C. O'Reilly Media. ISBN\u00a01-4493-2714-1.\u00a0 ^ Feuer, Alan R.; Gehani, Narain H. (March 1982). \"Comparison of the Programming Languages C and Pascal\". ACM Computing Surveys. 14 (1): 73\u201392. doi:10.1145\/356869.356872. (Subscription required (help)).\u00a0 ^ Page 122 of K&R2[14] ^ For example, gcc provides _FORTIFY_SOURCE. \"Security Features: Compile Time Buffer Checks (FORTIFY_SOURCE)\". fedoraproject.org. Retrieved 2012-08-05.\u00a0 ^ Raymond, Eric S. (11 October 1996). The New Hacker's Dictionary (3rd ed.). MIT Press. p.\u00a0432. ISBN\u00a0978-0-262-68092-9. Retrieved 5 August 2012.\u00a0 ^ Summit, Steve. \"comp.lang.c Frequently Asked Questions 6.23\". Retrieved March 6, 2013.\u00a0 ^ Summit, Steve. \"comp.lang.c Frequently Asked Questions 7.28\". Retrieved March 6, 2013.\u00a0 ^ \"Man Page for lint (freebsd Section 1)\". unix.com. 2001-05-24. Retrieved 2014-07-15.\u00a0 ^ McMillan, Robert (2013-08-01). \"Is Java Losing Its Mojo?\". Wired.\u00a0 ^ Chip., Weems, (2014). Programming and problem solving with C++\u00a0: brief, sixth edition. Jones & Bartlett Learning. ISBN\u00a01449694284. OCLC\u00a0894992484.\u00a0 ^ Dr. Dobb's Sourcebook. U.S.A.: Miller Freeman, Inc. November\u2013December 1995.\u00a0 ^ \"Using C for CGI Programming\". linuxjournal.com. 1 March 2005. Retrieved 4 January 2010.\u00a0 ^ Gerard),, O'Regan, Gerard (Cornelius. Pillars of computing\u00a0: a compendium of select, pivotal technology firms. ISBN\u00a03319214640. OCLC\u00a0922324121.\u00a0 ^ Lawrence., Rauchwerger, (2004). Languages and compilers for parallel computing\u00a0: 16th international workshop, LCPC 2003, College Station, TX, USA, October 2-4, 2003\u00a0: revised papers. Springer. ISBN\u00a03540246444. OCLC\u00a057965544.\u00a0 ^ Stroustrup, Bjarne (1993). \"A History of C++: 1979\u22121991\" (PDF). Retrieved 9 June 2011.\u00a0 Sources Ritchie, Dennis M. (1993). The Development of the C Language. The second ACM SIGPLAN History of Programming Languages Conference (HOPL-II). Cambridge, MA, USA \u2014 April 20\u201323, 1993: ACM. pp.\u00a0201\u2013208. ISBN\u00a00-89791-570-4. doi:10.1145\/154766.155580. Retrieved 2014-11-04.\u00a0 Further reading Banahan, M.; Brady, D.; Doran, M. (1991). The C Book (2nd ed.). Addison-Wesley.\u00a0 King, K. N. (April 2008). C Programming: A Modern Approach (2nd ed.). Norton. ISBN\u00a0978-0-393-97950-3.\u00a0 Thompson, Ken. \"A New C Compiler\" (PDF). Murray Hill, New Jersey: AT&T Bell Laboratories.\u00a0 Feuer, Alan R. (1998). The C Puzzle Book (1st, revised printing ed.). Addison-Wesley. ISBN\u00a0978-0-201-60461-0.\u00a0 External links Find more aboutC (programming language)at Wikipedia's sister projects Media from Commons News from Wikinews Quotations from Wikiquote Textbooks from Wikibooks Learning resources from Wikiversity ISO C Working Group official website comp.lang.c Frequently Asked Questions ISO\/IEC 9899, publicly available official C documents, including the C99 Rationale \"C99 with Technical corrigenda TC1, TC2, and TC3 included\" (PDF).\u00a0\u00a0(3.61\u00a0MB) A History of C, by Dennis Richie v t e C programming language ANSI C C89 and C90 C99 C11 Embedded C MISRA C Features Functions Header files Libraries Operators String Syntax Preprocessor Data types Standard library functions Char (ctype.h) File I\/O (stdio.h) Math (math.h) Dynamic memory (stdlib.h) String (string.h) Time (time.h) Variadic (stdarg.h) POSIX Standard libraries Bionic libhybris dietlibc EGLIBC glibc klibc Microsoft Run-time Library musl Newlib uClibc BSD libc Compilers Comparison of compilers ACK Borland Turbo C Clang GCC ICC LCC Pelles C PCC SDCC TCC Microsoft Visual Studio \/ Express \/ C++ Watcom C\/C++ IDEs Comparison of IDEs Anjuta Code::Blocks CodeLite Eclipse Geany Microsoft Visual Studio NetBeans Comparison with other languages Compatibility of C and C++ Comparison with Embedded C Comparison with Pascal Comparison of programming languages Descendant languages C++ C# D Objective-C Alef Limbo Go Vala Category v t e Integrated development environments C and C++ Open source Android Studio Anjuta Code::Blocks CodeLite Dev-C++ Eclipse Geany GNAT Programming Studio GNOME Builder KDevelop Kuzya MonoDevelop NetBeans QDevelop Qt Creator SharpDevelop Ultimate++ OpenWatcom Freeware Pelles C Philasmicos Entwickler Studio Oracle Developer Studio Visual Studio Community Xcode Retail C++Builder Eclipse-based CodeWarrior MyEclipse Visual Studio By JetBrains IntelliJ IDEA AppCode CLion LabWindows\/CVI LccWin32 IBM Rational Software Architect Understand Discontinued IBM VisualAge Java Open source BlueJ DrJava Eclipse Geany Greenfoot IntelliJ IDEA Community Edition Android Studio NetBeans Servoy Community Edition Freeware jGRASP JDeveloper Xcode Retail JBuilder JCreator MyEclipse IBM Rational Application Developer WebSphere Integration Developer JetBrains IntelliJ IDEA Servoy Business Application Platform Edition Understand Discontinued Metrowerks CodeWarrior Pro for Java Sun Java Studio Creator (superseded by NetBeans) Visual Age (superseded by Eclipse) Visual Caf\u00e9 (aka Espresso, superseded by JBuilder) Visual J++ Xelfi (became NetBeans) CLI MonoDevelop SharpDevelop Visual Studio Visual Studio Code PascalABC.NET Flash Adobe Flash Builder FlashDevelop Powerflasher FDT PHP Aptana NetBeans PhpStorm KDevelop Python Eric IntelliJ IDEA Light Table Ninja-IDE PyCharm PyDev Wing IDE KDevelop Pascal Delphi IDE Lazarus Category Comparison v t e Programming languages Comparison Timeline History Assembly BASIC C C++ C# COBOL Fortran Go Haskell Java JavaScript (JS) Lisp Lua Objective-C Pascal Perl PHP Python Ruby Shell Smalltalk Swift Visual Basic .NET (VB.NET) more... Category Comparison Lists Alphabetical Categorical Generational Non-English-based Authority control LCCN: sh85018532 GND: 4113195-2 SUDOC: 027672441 BNF: cb119665180 (data) Retrieved from \"https:\/\/en.wikipedia.org\/w\/index.php?title=C_(programming_language)&oldid=790717489\" Categories: American inventionsC (programming language)C programming language familyCross-platform softwareLow-level programming languagesProcedural programming languagesProgramming languages created in 1972Programming languages with an ISO standardStatically typed programming languagesSystems programming languagesHidden categories: Pages containing links to subscription-only contentWikipedia semi-protected pagesAll articles with unsourced statementsArticles with unsourced statements from July 2017Articles with unsourced statements from April 2015Articles needing additional references from October 2012All articles needing additional referencesArticles needing additional references from July 2014Wikipedia articles with LCCN identifiersWikipedia articles with GND identifiersWikipedia articles with BNF identifiersArticles with example code Navigation menu Personal tools Not logged inTalkContributionsCreate accountLog in Namespaces Article Talk Variants Views Read View source View history More Search Navigation Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store Interaction HelpAbout WikipediaCommunity portalRecent changesContact page Tools What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page Print\/export Create a bookDownload as PDFPrintable version In other projects Wikimedia CommonsWikibooksWikiquoteWikiversity Languages AfrikaansAlemannisch\u12a0\u121b\u122d\u129b\u0627\u0644\u0639\u0631\u0628\u064a\u0629Aragon\u00e9s\u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09beAsturianuAz\u0259rbaycanca\u062a\u06c6\u0631\u06a9\u062c\u0647\u09ac\u09be\u0982\u09b2\u09beB\u00e2n-l\u00e2m-g\u00fa\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430)\u200e\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438BosanskiBrezhonegCatal\u00e0\u0427\u04d1\u0432\u0430\u0448\u043b\u0430\u010ce\u0161tinaCorsuCymraegDanskDeutschEesti\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03acEspa\u00f1olEsperantoEuskara\u0641\u0627\u0631\u0633\u06ccFran\u00e7aisGaeilgeGalego\u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0\u5ba2\u5bb6\u8a9e\/Hak-k\u00e2-ng\u00ee\ud55c\uad6d\uc5b4\u0540\u0561\u0575\u0565\u0580\u0565\u0576\u0939\u093f\u0928\u094d\u0926\u0940HrvatskiBahasa IndonesiaInterlinguaIsiXhosa\u00cdslenskaItaliano\u05e2\u05d1\u05e8\u05d9\u05eaBasa Jawa\u0c95\u0ca8\u0ccd\u0ca8\u0ca1\u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8\u049a\u0430\u0437\u0430\u049b\u0448\u0430Kurd\u00ee\u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430\u0ea5\u0eb2\u0ea7LatinaLatvie\u0161uLietuvi\u0173LumbaartMagyar\u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438Malagasy\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02\u092e\u0930\u093e\u0920\u0940Bahasa MelayuM\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304\u041c\u043e\u043d\u0433\u043e\u043b\u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102cNederlands\u0928\u0947\u092a\u093e\u0932\u0940\u65e5\u672c\u8a9eNorsk bokm\u00e5lNorsk nynorskOccitan\u0b13\u0b21\u0b3c\u0b3f\u0b06O\u02bbzbekcha\/\u045e\u0437\u0431\u0435\u043a\u0447\u0430\u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40\u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179aPolskiPortugu\u00easRom\u00e2n\u0103\u0420\u0443\u0441\u0441\u043a\u0438\u0439\u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430ScotsShqip\u0dc3\u0dd2\u0d82\u0dc4\u0dbdSimple EnglishSloven\u010dinaSloven\u0161\u010dina\u0421\u0440\u043f\u0441\u043a\u0438 \/ srpskiSrpskohrvatski \/ \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438SuomiSvenskaTagalog\u0ba4\u0bae\u0bbf\u0bb4\u0bcdTaqbaylit\u0422\u0430\u0442\u0430\u0440\u0447\u0430\/tatar\u00e7a\u0c24\u0c46\u0c32\u0c41\u0c17\u0c41\u0e44\u0e17\u0e22T\u00fcrk\u00e7e\u1a05\u1a14 \u1a15\u1a18\u1a01\u1a17\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u0627\u0631\u062f\u0648Ti\u1ebfng Vi\u1ec7tWinaray\u5434\u8bed\u05d9\u05d9\u05b4\u05d3\u05d9\u05e9\u7cb5\u8a9e\u017demait\u0117\u0161ka\u4e2d\u6587 Edit links This page was last edited on 15 July 2017, at 16:46. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view (window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"0.852\",\"walltime\":\"1.069\",\"ppvisitednodes\":{\"value\":4596,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":0,\"limit\":1500000},\"postexpandincludesize\":{\"value\":163085,\"limit\":2097152},\"templateargumentsize\":{\"value\":7891,\"limit\":2097152},\"expansiondepth\":{\"value\":24,\"limit\":40},\"expensivefunctioncount\":{\"value\":9,\"limit\":500},\"entityaccesscount\":{\"value\":1,\"limit\":400},\"timingprofile\":[\"100.00% 845.366 1 -total\",\" 34.47% 291.365 2 Template:Reflist\",\" 14.97% 126.536 2 Template:Infobox\",\" 12.75% 107.759 15 Template:Cite_book\",\" 12.44% 105.160 1 Template:Infobox_programming_language\",\" 9.54% 80.650 1 Template:Pp-protect\",\" 8.54% 72.232 16 Template:Cite_web\",\" 6.94% 58.687 3 Template:Fix\",\" 5.84% 49.370 5 Template:Navbox\",\" 5.04% 42.632 2 Template:Cn\"]},\"scribunto\":{\"limitreport-timeusage\":{\"value\":\"0.385\",\"limit\":\"10.000\"},\"limitreport-memusage\":{\"value\":7405769,\"limit\":52428800}},\"cachereport\":{\"origin\":\"mw1200\",\"timestamp\":\"20170715164613\",\"ttl\":86400,\"transientcontent\":true}}});});(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgBackendResponseTime\":95,\"wgHostname\":\"mw1262\"});});","tags":"","url":"https:\/\/en.wikipedia.org\/wiki\/C_(programming_language)"},{"title":"GNU General Public License - Wikipedia","text":"GNU General Public License From Wikipedia, the free encyclopedia Jump to: navigation, search \"GPL\" redirects here. For other uses, see GPL (disambiguation). GNU General Public License Author Richard Stallman Latest version 3 Publisher Free Software Foundation Published 29 June 2007 DFSG compatible Yes[1] FSF approved Yes[2] OSI approved Yes[3] Copyleft Yes[2][4] Linking from code with a different license No (except for software licensed under GPLv3 compatible licenses)[5] Website gnu.org\/licenses\/gpl.html The GNU General Public License (GNU GPL or GPL) is a widely used free software license, which guarantees end users the freedom to run, study, share and modify the software.[6] The license was originally written by Richard Stallman of the Free Software Foundation (FSF) for the GNU Project, and grants the recipients of a computer program the rights of the Free Software Definition.[7] The GPL is a copyleft license, which means that derivative work can only be distributed under the same license terms. This is in distinction to permissive free software licenses, of which the BSD licenses and the MIT License are widely used examples. GPL was the first copyleft license for general use. Historically, the GPL license family has been one of the most popular software licenses in the free and open-source software domain.[6][8][9][10][11][12][13] Prominent free software programs licensed under the GPL include the Linux kernel and the GNU Compiler Collection (GCC). David A. Wheeler argues that the copyleft provided by the GPL was crucial to the success of Linux-based systems, giving the programmers who contributed to the kernel the assurance that their work would benefit the whole world and remain free, rather than being exploited by software companies that would not have to give anything back to the community.[14] In 2007, the third version of the license (GNU GPLv3) was released to address some perceived problems with the second version (GNU GPLv2) that were discovered during its long-time usage. To keep the license up to date, the GPL license includes an optional \"any later version\" clause, allowing users to choose between the original terms or the terms in new versions as updated by the FSF. Developers can omit it when licensing their software; for instance the Linux kernel is licensed under GPLv2 without the \"any later version\" clause.[15][16] Contents 1 History 1.1 Version 1 1.2 Version 2 1.3 Version 3 2 Terms and conditions 2.1 Use of licensed software 2.2 Copyleft 2.3 License versus contract 3 Derivations 4 Linking and derived works 4.1 Libraries 4.1.1 Point of view: dynamic and static linking violate GPL 4.1.2 Point of view: static linking violates GPL but unclear as of dynamic linking 4.1.3 Point of view: linking is irrelevant 4.2 Communicating and bundling with non-GPL programs 5 Legal status 6 Compatibility and multi-licensing 7 Text and other media 8 Adoption 9 Reception 9.1 Legal barrier to app stores 9.2 Microsoft 9.2.1 \"Viral\" nature 9.3 Barrier to commercialization 9.4 Open-source criticism 9.5 GPLv3 criticism 10 See also 11 References 12 External links History[edit] The GPL was written by Richard Stallman in 1989, for use with programs released as part of the GNU project. The original GPL was based on a unification of similar licenses used for early versions of GNU Emacs (1985),[17] the GNU Debugger and the GNU C Compiler.[18] These licenses contained similar provisions to the modern GPL, but were specific to each program, rendering them incompatible, despite being the same license.[19] Stallman's goal was to produce one license that could be used for any project, thus making it possible for many projects to share code. The second version of the license, version 2, was released in 1991. Over the following 15 years, members of the free software community became concerned over problems in the GPLv2 license that could let someone exploit GPL-licensed software in ways contrary to the license's intent.[20] These problems included tivoization (the inclusion of GPL-licensed software in hardware that refuses to run modified versions of its software), compatibility issues similar to those of the Affero General Public License\u2014and patent deals between Microsoft and distributors of free and open source software, which some viewed as an attempt to use patents as a weapon against the free software community. Version 3 was developed to attempt to address these concerns and was officially released on 29 June 2007.[21] Version 1[edit] Version 1 of the GNU GPL,[22] released on 25 February 1989,[23] prevented what were then the two main ways that software distributors restricted the freedoms that define free software. The first problem was that distributors may publish binary files only\u2014executable, but not readable or modifiable by humans. To prevent this, GPLv1 stated that copying and distributing copies or any portion of the program must also make the human-readable source code available under the same licensing terms.[24] The second problem was that distributors might add restrictions, either to the license, or by combining the software with other software that had other restrictions on distribution. The union of two sets of restrictions would apply to the combined work, thus adding unacceptable restrictions. To prevent this, GPLv1 stated that modified versions, as a whole, had to be distributed under the terms in GPLv1.[25] Therefore, software distributed under the terms of GPLv1 could be combined with software under more permissive terms, as this would not change the terms under which the whole could be distributed. However, software distributed under GPLv1 could not be combined with software distributed under a more restrictive license, as this would conflict with the requirement that the whole be distributable under the terms of GPLv1. Version 2[edit] According to Richard Stallman, the major change in GPLv2 was the \"Liberty or Death\" clause, as he calls it[19] \u2013 Section 7. The section says that licensees may distribute a GPL-covered work only if they can satisfy all of the license's obligations, despite any other legal obligations they might have. In other words, the obligations of the license may not be severed due to conflicting obligations. This provision is intended to discourage any party from using a patent infringement claim or other litigation to impair users' freedom under the license.[19] By 1990, it was becoming apparent that a less restrictive license would be strategically useful for the C library and for software libraries that essentially did the job of existing proprietary ones;[26] when version 2 of the GPL (GPLv2) was released in June 1991, therefore, a second license \u2013 the Library General Public License \u2013 was introduced at the same time and numbered with version 2 to show that both were complementary. The version numbers diverged in 1999 when version 2.1 of the LGPL was released, which renamed it the GNU Lesser General Public License to reflect its place in the philosophy. Most commonly \"GPLv2 or any later version\" is stated by users of the license, to allow upgrading to GPLv3. Version 3[edit] Richard Stallman at the launch of the first draft of the GNU GPLv3 at MIT, Cambridge, Massachusetts, USA. To his right is Columbia Law Professor Eben Moglen, chairman of the Software Freedom Law Center. In late 2005, the Free Software Foundation (FSF) announced work on version 3 of the GPL (GPLv3). On 16 January 2006, the first \"discussion draft\" of GPLv3 was published, and the public consultation began. The public consultation was originally planned for nine to fifteen months but finally stretched to eighteen months with four drafts being published. The official GPLv3 was released by FSF on 29 June 2007. GPLv3 was written by Richard Stallman, with legal counsel from Eben Moglen and the Software Freedom Law Center.[27] According to Stallman, the most important changes are in relation to software patents, free software license compatibility, the definition of \"source code\", and hardware restrictions on software modification (\"tivoization\").[27][28] Other changes relate to internationalization, how license violations are handled, and how additional permissions can be granted by the copyright holder. It also adds a provision that \"strips\" Digital Rights Management (DRM) of its legal value, so people can break anything a court might recognize as DRM on GPL software without breaking laws like the DMCA.[29] The public consultation process was coordinated by the Free Software Foundation with assistance from Software Freedom Law Center, Free Software Foundation Europe,[30] and other free software groups. Comments were collected from the public via the gplv3.fsf.org web portal,[31] using purpose-written software called stet. During the public consultation process, 962 comments were submitted for the first draft.[32] By the end, a total of 2,636 comments had been submitted.[33][34][35] The third draft was released on 28 March 2007.[36] This draft included language intended to prevent patent-related agreements such as the controversial Microsoft-Novell patent agreement and restricts the anti-tivoization clauses to a legal definition of a \"User\" or \"consumer product\". It also explicitly removed the section on \"Geographical Limitations\", whose probable removal had been announced at the launch of the public consultation. The fourth discussion draft,[37] which was the last, was released on 31 May 2007. It introduced Apache License version 2.0 compatibility (prior versions are incompatible), clarified the role of outside contractors, and made an exception to avoid the perceived problems of a Microsoft\u2013Novell style agreement, saying in Section 11 paragraph 6 that: You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license\u00a0... This aims to make future such deals ineffective. The license is also meant to cause Microsoft to extend the patent licenses it grants to Novell customers for the use of GPLv3 software to all users of that GPLv3 software; this is possible only if Microsoft is legally a \"conveyor\" of the GPLv3 software.[38][39] Also, early drafts of GPLv3 let licensors add an Affero-like requirement that would have plugged the ASP loophole in the GPL.[40][41] As there were concerns expressed about the administrative costs of checking code for this additional requirement, it was decided to keep the GPL and the Affero license separated.[42] Others, notably some high-profile developers of the Linux kernel, for instance Linus Torvalds, Greg Kroah-Hartman and Andrew Morton, commented to the mass media and made public statements about their objections to parts of discussion drafts 1 and 2.[43] The kernel developers referred to GPLv3 draft clauses regarding DRM\/Tivoization, patents and \"additional restrictions\" and warned a Balkanisation of the \"Open Source Universe\".[43][44] Linus Torvalds, who decided to not adopt the GPLv3 for the Linux kernel,[15] reiterated his criticism even years later.[45][46] GPLv3 improves compatibility with several open source software licenses such as Apache License, version 2.0, and the GNU Affero General Public License, which GPLv2 could not be combined with.[47] However, GPLv3 software can only be combined and share code with GPLv2 software if the used GPLv2 license has the optional \"or later\" clause and the software is upgraded to GPLv3. While the \"GPLv2 or any later version\" clause is considered by FSF as the most common form of licensing GPLv2 software,[48] for example Toybox developer Rob Landley described it as a lifeboat clause.[49][50] Software projects licensed with the optional \"or later\" clause include the GNU Project, while a prominent example without the clause is the Linux kernel.[15] The final version of the license text was published on 29 June 2007.[51] Terms and conditions[edit] The terms and conditions of the GPL must be made available to anybody receiving a copy of the work that has a GPL applied to it (\"the licensee\"). Any licensee who adheres to the terms and conditions is given permission to modify the work, as well as to copy and redistribute the work or any derivative version. The licensee is allowed to charge a fee for this service, or do this free of charge. This latter point distinguishes the GPL from software licenses that prohibit commercial redistribution. The FSF argues that free software should not place restrictions on commercial use,[52] and the GPL explicitly states that GPL works may be sold at any price. The GPL additionally states that a distributor may not impose \"further restrictions on the rights granted by the GPL\". This forbids activities such as distributing of the software under a non-disclosure agreement or contract. The fourth section for version 2 of the license and the seventh section of version 3 require that programs distributed as pre-compiled binaries be accompanied by a copy of the source code, a written offer to distribute the source code via the same mechanism as the pre-compiled binary, or the written offer to obtain the source code that the user got when they received the pre-compiled binary under the GPL. The second section of version 2 and the fifth section of version 3 also require giving \"all recipients a copy of this License along with the Program\". Version 3 of the license allows making the source code available in additional ways in fulfillment of the seventh section. These include downloading source code from an adjacent network server or by peer-to-peer transmission, provided that is how the compiled code was available and there are \"clear directions\" on where to find the source code. The FSF does not hold the copyright for a work released under the GPL, unless an author explicitly assigns copyrights to the FSF (which seldom happens except for programs that are part of the GNU project). Only the individual copyright holders have the authority to sue when a license violation is suspected. Printed GPL statements for consumer entertainment devices which incorporate GPL components The file above's purpose is being discussed and\/or is being considered for deletion. Consult image description page for details. Use of licensed software[edit] Software under the GPL may be run for all purposes, including commercial purposes and even as a tool for creating proprietary software, for example when using GPL-licensed compilers.[53] Users or companies who distribute GPL-licensed works (e.g. software), may charge a fee for copies or give them free of charge. This distinguishes the GPL from shareware software licenses that allow copying for personal use but prohibit commercial distribution, or proprietary licenses where copying is prohibited by copyright law. The FSF argues that freedom-respecting free software should also not restrict commercial use and distribution (including redistribution):[52] the GPL explicitly states that GPL works may be sold at any price. In purely private (or internal) use\u2014with no sales and no distribution\u2014the software code may be modified and parts reused without requiring the source code to be released. For sales or distribution, the entire source code need to be made available to end users, including any code changes and additions\u2014in that case, copyleft is applied to ensure that end users retain the freedoms defined above.[54] However, software running as an application program under a GPL-licensed operating system such as Linux is not required to be licensed under GPL or to be distributed with source-code availability\u2014the licensing depends only on the used libraries and software components and not on the underlying platform.[55] For example, if a program consists only of own original custom software, or is combined with source code from other software components,[56] then the own custom software components need not be licensed under GPL and need not make their code available; even if the underlying operating system used is licensed under the GPL, applications running on it are not considered derivative works.[55] Only if GPLed parts are used in a program (and the program is distributed), then all other source code of the program needs to be made available under the same license terms. The GNU Lesser General Public license (LGPL) was created to have a weaker copyleft than the GPL, in that it does not require own custom-developed source code (distinct from the LGPLed parts) to be made available under the same license terms. Copyleft[edit] Main article: Copyleft The distribution rights granted by the GPL for modified versions of the work are not unconditional. When someone distributes a GPL'd work plus his\/her own modifications, the requirements for distributing the whole work cannot be any greater than the requirements that are in the GPL. This requirement is known as copyleft. It earns its legal power from the use of copyright on software programs. Because a GPL work is copyrighted, a licensee has no right to redistribute it, not even in modified form (barring fair use), except under the terms of the license. One is only required to adhere to the terms of the GPL if one wishes to exercise rights normally restricted by copyright law, such as redistribution. Conversely, if one distributes copies of the work without abiding by the terms of the GPL (for instance, by keeping the source code secret), he or she can be sued by the original author under copyright law. Copyleft thus uses copyright law to accomplish the opposite of its usual purpose: instead of imposing restrictions, it grants rights to other people, in a way that ensures the rights cannot subsequently be taken away. It also ensures that unlimited redistribution rights are not granted, should any legal flaw be found in the copyleft statement.[citation needed] Many distributors of GPL'ed programs bundle the source code with the executables. An alternative method of satisfying the copyleft is to provide a written offer to provide the source code on a physical medium (such as a CD) upon request. In practice, many GPL'ed programs are distributed over the Internet, and the source code is made available over FTP or HTTP. For Internet distribution, this complies with the license. Copyleft applies only when a person seeks to redistribute the program. Developers may make private modified versions with no obligation to divulge the modifications, as long as they do not distribute the modified software to anyone else. Note that copyleft applies only to the software, and not to its output (unless that output is itself a derivative work of the program[57]). For example, a public web portal running a modified derivative of a GPL'ed content management system is not required to distribute its changes to the underlying software, because its output is not a derivative. There has been debate on whether it is a violation of the GPL to release the source code in obfuscated form, such as in cases in which the author is less willing to make the source code available. The consensus was that while unethical, it was not considered a violation. The issue was clarified when the license was altered with v2 to require that the \"preferred\" version of the source code be made available.[58] License versus contract[edit] The GPL was designed as a license, rather than a contract.[59][60] In some Common Law jurisdictions, the legal distinction between a license and a contract is an important one: contracts are enforceable by contract law, whereas licenses are enforced under copyright law. However, this distinction is not useful in the many jurisdictions where there are no differences between contracts and licenses, such as Civil Law systems.[61] Those who do not accept the GPL's terms and conditions do not have permission, under copyright law, to copy or distribute GPL licensed software or derivative works. However, if they do not redistribute the GPL'd program, they may still use the software within their organization however they like, and works (including programs) constructed by the use of the program are not required to be covered by this license. Allison Randal argued that the GPLv3 as a license is unnecessarily confusing for lay readers, and could be simplified while retaining the same conditions and legal force.[62] In April 2017 a US federal court ruled that an open-source license is an enforceable contract.[63] Derivations[edit] The text of the GPL is itself copyrighted, and the copyright is held by the Free Software Foundation. The FSF permits people to create new licenses based on the GPL, as long as the derived licenses do not use the GPL preamble without permission. This is discouraged, however, since such a license might be incompatible with the GPL[64] and causes a perceived license proliferation. Other licenses created by the GNU project include the GNU Lesser General Public License, the GNU Free Documentation License and Affero General Public License. The text of the GPL is not itself under the GPL. The license's copyright disallows modification of the license. Copying and distributing the license is allowed since the GPL requires recipients to get \"a copy of this License along with the Program\".[65] According to the GPL FAQ, anyone can make a new license using a modified version of the GPL as long as he or she uses a different name for the license, does not mention \"GNU\", and removes the preamble, though the preamble can be used in a modified license if permission to use it is obtained from the Free Software Foundation (FSF).[66] Linking and derived works[edit] Libraries[edit] According to the FSF, \"The GPL does not require you to release your modified version, or any part of it. You are free to make modifications and use them privately, without ever releasing them.\"[67] However, if one releases a GPL-licensed entity to the public, there is an issue regarding linking: namely, whether a proprietary program that uses a GPL library is in violation of the GPL. This key dispute is whether non-GPL software can legally statically link or dynamically link to GPL libraries. Different opinions exist on this issue. The GPL is clear in requiring that all derivative works of code under the GPL must themselves be under the GPL. Ambiguity arises with regards to using GPL libraries, and bundling GPL software into a larger package (perhaps mixed into a binary via static linking). This is ultimately a question not of the GPL per se, but of how copyright law defines derivative works. The following points of view exist: Point of view: dynamic and static linking violate GPL[edit] The Free Software Foundation (which holds the copyright of several notable GPL-licensed software products and of the license text itself) asserts that an executable which uses a dynamically linked library is indeed a derivative work. This does not however apply to separate programs communicating with one another.[68] The Free Software Foundation also created the LGPL, which is nearly identical to the GPL, but with additional permissions to allow linking for the purposes of \"using the library\". Richard Stallman and the FSF specifically encourage library-writers to license under the GPL so that proprietary programs cannot use the libraries, in an effort to protect the free-software world by giving it more tools than the proprietary world.[69] Point of view: static linking violates GPL but unclear as of dynamic linking[edit] Some people believe that while static linking produces derivative works, it is not clear whether an executable that dynamically links to a GPL code should be considered a derivative work (see Weak copyleft). Linux author Linus Torvalds agrees that dynamic linking can create derived works but disagrees over the circumstances.[70] A Novell lawyer has written that dynamic linking not being derivative \"makes sense\" but is not \"clear-cut\", and that evidence for good-intentioned dynamic linking can be seen by the existence of proprietary Linux kernel drivers.[71] In Galoob v. Nintendo the United States Ninth Circuit Court of Appeals defined a derivative work as having \"'form' or permanence\" and noted that \"the infringing work must incorporate a portion of the copyrighted work in some form\",[72] but there have been no clear court decisions to resolve this particular conflict. Point of view: linking is irrelevant[edit] According to an article in the Linux Journal, Lawrence Rosen (a one-time Open Source Initiative general counsel) argues that the method of linking is mostly irrelevant to the question about whether a piece of software is a derivative work; more important is the question about whether the software was intended to interface with client software and\/or libraries.[73] He states, \"The primary indication of whether a new program is a derivative work is whether the source code of the original program was used [in a copy-paste sense], modified, translated or otherwise changed in any way to create the new program. If not, then I would argue that it is not a derivative work,\"[73] and lists numerous other points regarding intent, bundling, and linkage mechanism. He further argues on his firm's website[74] that such \"market-based\" factors are more important than the linking technique. There is also the specific issue of whether a plugin or module (such as the NVidia or ATI graphics card kernel modules) must also be GPL, if it could reasonably be considered its own work. This point of view suggests that reasonably separate plugins, or plugins for software designed to use plugins, could be licensed under an arbitrary license if the work is GPLv2. Of particular interest is the GPLv2 paragraph: You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:\u00a0... b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.\u00a0... These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. The GPLv3 has a different clause: You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of Section 4, provided that you also meet all of these conditions:\u00a0... c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable Section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it.\u00a0... A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. As a case study, some supposedly proprietary plugins and themes\/skins for GPLv2 CMS software such as Drupal and WordPress have come under fire, with both sides of the argument taken.[75][76] The FSF differentiates on how the plugin is being invoked. If the plugin is invoked through dynamic linkage and it performs function calls to the GPL program then it is most likely a derivative work.[77] Communicating and bundling with non-GPL programs[edit] The mere act of communicating with other programs does not, by itself, require all software to be GPL; nor does distributing GPL software with non-GPL software. However, minor conditions must be followed that ensures the rights of GPL software is not restricted. The following is a quote from the gnu.org GPL FAQ, which describes to what extent software is allowed to communicate with and be-bundled-with GPL programs:[78] What is the difference between an \"aggregate\" and other kinds of \"modified versions\"? An \"aggregate\" consists of a number of separate programs, distributed together on the same CD-ROM or other media. The GPL permits you to create and distribute an aggregate, even when the licenses of the other software are non-free or GPL-incompatible. The only condition is that you cannot release the aggregate under a license that prohibits users from exercising rights that each program's individual license would grant them. Where's the line between two separate programs, and one program with two parts? This is a legal question, which ultimately judges will decide. We believe that a proper criterion depends both on the mechanism of communication (exec, pipes, rpc, function calls within a shared address space, etc.) and the semantics of the communication (what kinds of information are interchanged). If the modules are included in the same executable file, they are definitely combined in one program. If modules are designed to run linked together in a shared address space, that almost surely means combining them into one program. By contrast, pipes, sockets and command-line arguments are communication mechanisms normally used between two separate programs. So when they are used for communication, the modules normally are separate programs. But if the semantics of the communication are intimate enough, exchanging complex internal data structures, that too could be a basis to consider the two parts as combined into a larger program. The FSF thus draws the line between \"library\" and \"other program\" via 1) \"complexity\" and \"intimacy\" of information exchange, and 2) mechanism (rather than semantics), but resigns that the question is not clear-cut and that in complex situations, case law will decide. Legal status[edit] The first known violation of the GPL was in 1989, when NeXT extended the GCC compiler to support Objective-C, but did not publicly release the changes.[79] After an inquiry they created a public patch. There was no lawsuit filed for this violation.[80] In 2002, MySQL AB sued Progress NuSphere for copyright and trademark infringement in United States district court. NuSphere had allegedly violated MySQL's copyright by linking MySQL's GPL'ed code with NuSphere Gemini table without being in compliance with the license. After a preliminary hearing before Judge Patti Saris on 27 February 2002, the parties entered settlement talks and eventually settled.[81] After the hearing, FSF commented that \"Judge Saris made clear that she sees the GNU GPL to be an enforceable and binding license.\"[82] In August 2003, the SCO Group stated that they believed the GPL to have no legal validity, and that they intended to pursue lawsuits over sections of code supposedly copied from SCO Unix into the Linux kernel. This was a problematic stand for them, as they had distributed Linux and other GPL'ed code in their Caldera OpenLinux distribution, and there is little evidence that they had any legal right to do so except under the terms of the GPL. For more information, see SCO-Linux controversies and SCO v. IBM. In April 2004, the netfilter\/iptables project was granted a preliminary injunction against Sitecom Germany by Munich District Court after Sitecom refused to desist from distributing Netfilter's GPL'ed software in violation of the terms of the GPL. Harald Welte, of Netfilter, was represented by ifrOSS co-founder Till Jaeger. In July 2004, the German court confirmed this injunction as a final ruling against Sitecom.[83] The court's justification was that: Defendant has infringed on the copyright of plaintiff by offering the software 'netfilter\/iptables' for download and by advertising its distribution, without adhering to the license conditions of the GPL. Said actions would only be permissible if defendant had a license grant.\u00a0... This is independent of the questions whether the licensing conditions of the GPL have been effectively agreed upon between plaintiff and defendant or not. If the GPL were not agreed upon by the parties, defendant would notwithstanding lack the necessary rights to copy, distribute, and make the software 'netfilter\/iptables' publicly available. This exactly mirrored the predictions given previously by the FSF's Eben Moglen. This ruling was important because it was the first time that a court had confirmed that violating terms of the GPL could be a copyright violation and established jurisprudence as to the enforceability of the GPL version 2 under German law.[84] In May 2005, Daniel Wallace filed suit against the Free Software Foundation in the Southern District of Indiana, contending that the GPL is an illegal attempt to fix prices (at zero). The suit was dismissed in March 2006, on the grounds that Wallace had failed to state a valid anti-trust claim; the court noted that \"the GPL encourages, rather than discourages, free competition and the distribution of computer operating systems, the benefits of which directly pass to consumers\".[85] Wallace was denied the possibility of further amending his complaint, and was ordered to pay the FSF's legal expenses. On 8 September 2005, the Seoul Central District Court ruled that the GPL was not material to a case dealing with trade secrets derived from GPL-licensed work.[86] Defendants argued that since it is impossible to maintain trade secrets while being compliant with GPL and distributing the work, they are not in breach of trade secrets. This argument was considered without ground. On 6 September 2006, the gpl-violations.org project prevailed in court litigation against D-Link Germany GmbH regarding D-Link's copyright-infringing use of parts of the Linux Kernel in storage devices they distributed.[87] The judgment stated that the GPL is valid, legally binding, and stands in German court.[88] In late 2007, the BusyBox developers and the Software Freedom Law Center embarked upon a program to gain GPL compliance from distributors of BusyBox in embedded systems, suing those who would not comply. These were claimed to be the first US uses of courts for enforcement of GPL obligations. See BusyBox GPL lawsuits. On 11 December 2008, the Free Software Foundation sued Cisco Systems, Inc. for copyright violations by its Linksys division, of the FSF's GPL-licensed coreutils, readline, Parted, Wget, GNU Compiler Collection, binutils, and GNU Debugger software packages, which Linksys distributes in the Linux firmware[89] of its WRT54G wireless routers, as well as numerous other devices including DSL and Cable modems, Network Attached Storage devices, Voice-Over-IP gateways, virtual private network devices and a home theater\/media player device.[90] After six years of repeated complaints to Cisco by the FSF, claims by Cisco that they would correct, or were correcting, their compliance problems (not providing complete copies of all source code and their modifications), of repeated new violations being discovered and reported with more products, and lack of action by Linksys (a process described on the FSF blog as a \"five-years-running game of Whack-a-Mole\"[90]) the FSF took them to court. Cisco settled the case six months later by agreeing \"to appoint a Free Software Director for Linksys\" to ensure compliance, \"to notify previous recipients of Linksys products containing FSF programs of their rights under the GPL,\" to make source code of FSF programs freely available on its website, and to make a monetary contribution to the FSF.[91] In 2011 it was noticed that GNU Emacs had violated its GPL license for the previous two years, by distributing binaries, but not the source code.[92][93][94] Richard Stallman described this incident as a very bad mistake.[95] No lawsuit was filed and the mistake was promptly resolved. Compatibility and multi-licensing[edit] Quick guide of license compatibility with GPLv3 according to the FSF. Dashed line indicates that the GPLv2 is only compatible with the GPLv3 with the clause \"or any later version\". Code licensed under several other licenses can be combined with a program under the GPL without conflict, as long as the combination of restrictions on the work as a whole does not put any additional restrictions beyond what GPL allows.[96] In addition to the regular terms of the GPL, there are additional restrictions and permissions one can apply: If a user wants to combine code licensed under different versions of GPL, then this is only allowed if the code with the older GPL version includes an \"any later version\" statement.[97] For instance, the GPLv3 licensed GNU LibreDWG library can't be used anymore by LibreCAD and FreeCAD who have GPLv2 only dependencies.[98][99] Code licensed under LGPL is permitted to be linked with any other code no matter what license that code has,[100] though the LGPL does add additional requirements for the combined work. LGPLv3 and GPLv2-only can thus commonly not be linked, as the combined Code work would add additional LGPLv3 requirements on top of the GPLv2-only licensed software. Code licensed under LGPLv2.x without the \"any later version\" statement can be relicensed if the whole combined work is licensed to GPLv2 or GPLv3.[101] FSF maintains a list[102] of GPL-compatible free software licenses[103][104] containing many of the most common free software licenses, such as the original MIT\/X license, the BSD license (in its current 3-clause form) and the Artistic License 2.0.[105] David A. Wheeler has advocated that free\/open source software developers use only GPL-compatible licenses, because doing otherwise makes it difficult for others to participate and contribute code.[106] As a specific example of license incompatibility, Sun Microsystems' ZFS cannot be included in the GPL-licensed Linux kernel, because it is licensed under the GPL-incompatible Common Development and Distribution License. Furthermore, ZFS is protected by patents, so distributing an independently developed GPL-ed implementation would still require Oracle's permission.[107] A number of businesses use multi-licensing to distribute a GPL version and sell a proprietary license to companies wishing to combine the package with proprietary code, using dynamic linking or not. Examples of such companies include MySQL AB, Digia PLC (Qt framework, before 2011 from Nokia), Red Hat (Cygwin) and Riverbank Computing (PyQt). Other companies, like the Mozilla Foundation (products include Mozilla Application Suite, Mozilla Thunderbird and Mozilla Firefox), used multi-licensing to distribute versions under the GPL and some other open-source licenses. Text and other media[edit] It is possible to use the GPL for text documents instead of computer programs, or more generally for all kinds of media, if it is clear what constitutes the source code (defined as \"the preferred form of the work for making changes in it\").[108] For manuals and textbooks, though, the FSF recommends the GNU Free Documentation License (GFDL) instead, which it created for this purpose.[109] Nevertheless, the Debian developers recommended (in a resolution adopted in 2006) to license documentation for their project under the GPL, because of the incompatibility of the GFDL with the GPL (text licensed under the GFDL cannot be incorporated into GPL software).[110][111] Also, the FLOSS Manuals foundation, an organization devoted to creating manuals for free software, decided to eschew the GFDL in favor of the GPL for its texts in 2007.[112] If the GPL is used for fonts, any documents or images made with such fonts might also have to be distributed under the terms of the GPL. This is not the case in countries like the US and Canada where copyright law is inapplicable to the appearance of fonts, though program code inside a font file may still be covered\u2014which can complicate font embedding (since the document could be considered 'linked' to the font). FSF provides an exception for cases where this is not desired.[113][114] Adoption[edit] Historically, the GPL license family has been one of the most popular software licenses in the FOSS domain.[6][8][9][10][11][13] A 1997 survey of MetaLab, then the largest free software archive, showed that the GPL accounted for about half of the software licensed therein.[8] Similarly, a 2000 survey of Red Hat Linux 7.1 found that 53% of the source code was licensed under the GPL.[9] As of 2003[update], about 68% of all projects and 82.1% of the open source industry certified licensed projects listed on SourceForge.net were from the GPL license family.[115] As of August 2008[update], the GPL family accounted for 70.9% of the 44,927 free software projects listed on Freecode.[10] After the release of the GPLv3 in June 2007, adoption of this new GPL version was much discussed[116] and some projects decided against upgrading. For instance the Linux kernel,[15][46] MySQL,[117] BusyBox,[118][119] AdvFS,[120] Blender,[121][122] and VLC media player[123] decided against adopting GPLv3. On the other hand, in 2009, two years after the release of GPLv3, Google open-source programs office manager Chris DiBona reported that the number of open-source project licensed software that had moved from GPLv2 to GPLv3 was 50%, counting the projects hosted at Google Code.[11] In 2011, four years after the release of the GPLv3, 6.5% of all open-source license projects are GPLv3 while 42.5% are GPLv2 according to Black Duck Software data.[124][125] Following in 2011 451 Group analyst Matthew Aslett argued in a blog post that copyleft licenses went into decline and permissive licenses increased, based on statistics from Black Duck Software.[126][127] Similarly, in February 2012 Jon Buys reported that among the top 50 projects on GitHub five projects were under a GPL license, including dual licensed and AGPL projects.[128] GPL usage statistics from 2009 to 2013 was extracted from Freecode data by Walter van Holst while analyzing license proliferation.[12] Usage of GPL family licenses in\u00a0% on Freecode[12] 2009 2010 2011 2012 2013 2014-06-18[129][130] 72% 63% 61% 59% 58% approx. 54% In August 2013, according to Black Duck Software, the website's data shows that the GPL license family is used by 54% of open-source projects, with a breakdown of the individual licenses shown in the following table.[13] However, a later study in 2013 showed that software licensed under the GPL license family has increased, and that even the data from Black Duck Software has shown a total increase of software projects licensed under GPL. The study used public information gathered from repositories of the Debian Project, and the study criticized Black Duck Software for not publishing their methodology used in collecting statistics.[131] Daniel German, Professor in the Department of Computer Science at the University of Victoria in Canada, presented a talk in 2013 about the methodological challenges in determining which are the most widely used free software licenses, and showed how he could not replicate the result from Black Duck Software.[132] In 2015, according to Black Duck, GPLv2 lost its first position to the MIT license and is now second, the GPLv3 dropped to fourth place while the Apache license kept its third position.[6] Usage of GPL family licenses in the FOSS domain in\u00a0% according to Black Duck Software License 2008-05-08[133] 2009-03-11[134] 2011-11-22[124] 2013-08-12[13] 2015-11-19[6] 2016-06-06[135] 2017-01-02[136] GPLv2 58.69% 52.2% 42.5% 33% 23% 21% 19% GPLv3 1.64% 4.15% 6.5% 12% 9% 9% 8% LGPL 2.1 11.39% 9.84% \u00a0? 6% 5% 4% 4% LGPL 3.0 \u00a0? (","tags":"","url":"https:\/\/en.wikipedia.org\/wiki\/GNU_General_Public_License"},{"title":"Linux - Wikipedia","text":"Linux From Wikipedia, the free encyclopedia This is the latest accepted revision, reviewed on 16 July 2017. Jump to: navigation, search This article is about the operating system. For the kernel, see Linux kernel. For other uses, see Linux (disambiguation). Linux Tux the penguin, mascot of Linux[1] Developer Community Written in Primarily C and assembly OS family Unix-like Working state Current Source model Mainly open-source, proprietary software is also available. Initial release September\u00a017, 1991; 25 years ago\u00a0(1991-09-17) Marketing target Personal computers, mobile devices, embedded devices, servers, mainframes, supercomputers Available in Multilingual Platforms Alpha, ARC, ARM, AVR32, Blackfin, C6x, ETRAX CRIS, FR-V, H8\/300, Hexagon, Itanium, M32R, m68k, META, Microblaze, MIPS, MN103, Nios II, OpenRISC, PA-RISC, PowerPC, s390, S+core, SuperH, SPARC, TILE64, Unicore32, x86, Xtensa Kernel type Monolithic (Linux kernel) Userland GNU and various others[a] Default user interface Many License GPLv2[7] and other free and open-source licenses, except for the \"Linux\" trademark[b] Linux (pronounced \/\u02c8l\u026an\u0259ks\/\u00a0(\u00a0listen) LIN-\u0259ks[9][10] or, less frequently, \/\u02c8la\u026an\u0259ks\/ LYN-\u0259ks[10][11]) is a Unix-like computer operating system assembled under the model of free and open-source software development and distribution. The defining component of Linux is the Linux kernel,[12] an operating system kernel first released on September 17, 1991 by Linus Torvalds.[13][14][15] The Free Software Foundation uses the name GNU\/Linux to describe the operating system, which has led to some controversy.[16][17] Linux was originally developed for personal computers based on the Intel x86 architecture, but has since been ported to more platforms than any other operating system.[18] Because of the dominance of the Linux kernel-based Android OS on smartphones, Linux has the largest installed base of all general-purpose operating systems.[19] Linux is also the leading operating system on servers and other big iron systems such as mainframe computers, and is used on 99.6% of the TOP500 supercomputers.[20][21] It is used by around 2.3% of desktop computers.[22][23] The Chromebook, which runs the Linux kernel-based Chrome\u00a0OS, dominates the US K\u201312 education market and represents nearly 20% of the sub-$300 notebook sales in the US.[24] Linux also runs on embedded systems \u2013 devices whose operating system is typically built into the firmware and is highly tailored to the system. This includes TiVo and similar DVR devices, network routers, facility automation controls, televisions,[25][26] video game consoles and smartwatches.[27] Many smartphones and tablet computers run Android and other Linux derivatives.[28] The development of Linux is one of the most prominent examples of free and open-source software collaboration. The underlying source code may be used, modified and distributed\u200d\u2014\u200ccommercially or non-commercially\u200d\u2014\u200cby anyone under the terms of its respective licenses, such as the GNU General Public License. Typically, Linux is packaged in a form known as a Linux distribution (or distro for short) for both desktop and server use. Some of the most popular mainstream Linux distributions[29][30][31] are Arch Linux, CentOS, Debian, Fedora, Gentoo Linux, Linux Mint, Mageia, openSUSE and Ubuntu, together with commercial distributions such as Red Hat Enterprise Linux and SUSE Linux Enterprise Server. Distributions include the Linux kernel, supporting utilities and libraries, many of which are provided by the GNU Project, and usually a large amount of application software to fulfil the distribution's intended use. Desktop Linux distributions include a windowing system, such as X11, Mir or a Wayland implementation, and an accompanying desktop environment such as GNOME or the KDE Software Compilation; some distributions may also include a less resource-intensive desktop, such as LXDE or Xfce. Distributions intended to run on servers may omit all graphical environments from the standard install, and instead include other software to set up and operate a solution stack such as LAMP. Because Linux is freely redistributable, anyone may create a distribution for any intended use. Contents 1 History 1.1 Antecedents 1.2 Creation 1.3 Naming 1.4 Commercial and popular uptake 1.5 Current development 2 Design 2.1 User interface 2.2 Video input infrastructure 3 Development 3.1 Community 3.2 Programming on Linux 4 Hardware support 5 Uses 5.1 Desktop 5.1.1 Performance and applications 5.1.2 Components and installation 5.2 Netbooks 5.3 Servers, mainframes and supercomputers 5.4 Smart devices 5.5 Embedded devices 5.6 Gaming 5.7 Specialized uses 5.7.1 Home theater PC 5.7.2 Digital security 5.7.3 System rescue 5.7.4 In space 5.7.5 Education 5.7.6 Others 6 Market share and uptake 7 Copyright, trademark, and naming 8 See also 9 Notes 10 References 11 External links History[edit] Main article: History of Linux Antecedents[edit] Linus Torvalds, principal author of the Linux kernel The Unix operating system was conceived and implemented in 1969 at AT&T's Bell Laboratories in the United States by Ken Thompson, Dennis Ritchie, Douglas McIlroy, and Joe Ossanna.[32] First released in 1971, Unix was written entirely in assembly language, as was common practice at the time. Later, in a key pioneering approach in 1973, it was rewritten in the C programming language by Dennis Ritchie (with the exception of some hardware and I\/O routines). The availability of a high-level language implementation of Unix made its porting to different computer platforms easier. Due to an earlier antitrust case forbidding it from entering the computer business, AT&T was required to license the operating system's source code to anyone who asked.[33] As a result, Unix grew quickly and became widely adopted by academic institutions and businesses. In 1984, AT&T divested itself of Bell Labs; freed of the legal obligation requiring free licensing, Bell Labs began selling Unix as a proprietary product. The GNU Project, started in 1983 by Richard Stallman, has the goal of creating a \"complete Unix-compatible software system\" composed entirely of free software. Work began in 1984.[34] Later, in 1985, Stallman started the Free Software Foundation and wrote the GNU General Public License (GNU GPL) in 1989. By the early 1990s, many of the programs required in an operating system (such as libraries, compilers, text editors, a Unix shell, and a windowing system) were completed, although low-level elements such as device drivers, daemons, and the kernel were stalled and incomplete.[35][not in citation given] Linus Torvalds has stated that if the GNU kernel had been available at the time (1991), he would not have decided to write his own.[36] Although not released until 1992 due to legal complications, development of 386BSD, from which NetBSD, OpenBSD and FreeBSD descended, predated that of Linux. Torvalds has also stated that if 386BSD had been available at the time, he probably would not have created Linux.[37] MINIX was created by Andrew S. Tanenbaum, a computer science professor, and released in 1987 as a minimal Unix-like operating system targeted at students and others who wanted to learn the operating system principles. Although the complete source code of MINIX was freely available, the licensing terms prevented it from being free software until the licensing changed in April 2000.[38] Creation[edit] In 1991, while attending the University of Helsinki, Torvalds became curious about operating systems[39] and frustrated by the licensing of MINIX, which at the time limited it to educational use only.[38] He began to work on his own operating system kernel, which eventually became the Linux kernel. Torvalds began the development of the Linux kernel on MINIX and applications written for MINIX were also used on Linux. Later, Linux matured and further Linux kernel development took place on Linux systems.[40] GNU applications also replaced all MINIX components, because it was advantageous to use the freely available code from the GNU Project with the fledgling operating system; code licensed under the GNU GPL can be reused in other computer programs as long as they also are released under the same or a compatible license. Torvalds initiated a switch from his original license, which prohibited commercial redistribution, to the GNU GPL.[41] Developers worked to integrate GNU components with the Linux kernel, making a fully functional and free operating system.[35] Naming[edit] 5.25-inch floppy disks holding a very early version of Linux Linus Torvalds had wanted to call his invention \"Freax\", a portmanteau of \"free\", \"freak\", and \"x\" (as an allusion to Unix). During the start of his work on the system, some of the project's makefiles included the name \"Freax\" for about half a year. Torvalds had already considered the name \"Linux\", but initially dismissed it as too egotistical.[42] In order to facilitate development, the files were uploaded to the FTP server (ftp.funet.fi) of FUNET in September 1991. Ari Lemmke, Torvalds' coworker at the Helsinki University of Technology (HUT), who was one of the volunteer administrators for the FTP server at the time, did not think that \"Freax\" was a good name. So, he named the project \"Linux\" on the server without consulting Torvalds.[42] Later, however, Torvalds consented to \"Linux\". To demonstrate how the word \"Linux\" should be pronounced (\/\u02c8l\u026an\u0259ks\/\u00a0(\u00a0listen) LIN-\u0259ks[9][10]), Torvalds included an audio guide (\u00a0listen\u00a0(help\u00b7info)) with the kernel source code.[43] Another variant of pronunciation is \/\u02c8la\u026an\u0259ks\/ LYN-\u0259ks.[10][11] Commercial and popular uptake[edit] Main article: Linux adoption Ubuntu, a popular Linux distribution Nexus 5X running Android Adoption of Linux in production environments, rather than being used only by hobbyists, started to take off first in the mid-1990s in the supercomputing community, where organizations such as NASA started to replace their increasingly expensive machines with clusters of inexpensive commodity computers running Linux. Commercial use followed when Dell and IBM, followed by Hewlett-Packard, started offering Linux support to escape Microsoft's monopoly in the desktop operating system market.[44] Today, Linux systems are used throughout computing, from embedded systems to supercomputers,[21][45] and have secured a place in server installations such as the popular LAMP application stack.[46] Use of Linux distributions in home and enterprise desktops has been growing.[47][48][49][50][51][52][53] Linux distributions have also become popular in the netbook market, with many devices shipping with customized Linux distributions installed, and Google releasing their own Chrome\u00a0OS designed for netbooks. Linux's greatest success in the consumer market is perhaps the mobile device market, with Android being one of the most dominant operating systems on smartphones and very popular on tablets and, more recently, on wearables. Linux gaming is also on the rise with Valve showing its support for Linux and rolling out its own gaming oriented Linux distribution. Linux distributions have also gained popularity with various local and national governments, such as the federal government of Brazil.[54] Current development[edit] Torvalds continues to direct the development of the kernel.[55] Stallman heads the Free Software Foundation,[56] which in turn supports the GNU components.[57] Finally, individuals and corporations develop third-party non-GNU components. These third-party components comprise a vast body of work and may include both kernel modules and user applications and libraries. Linux vendors and communities combine and distribute the kernel, GNU components, and non-GNU components, with additional package management software in the form of Linux distributions. Design[edit] A Linux-based system is a modular Unix-like operating system, deriving much of its basic design from principles established in Unix during the 1970s and 1980s. Such a system uses a monolithic kernel, the Linux kernel, which handles process control, networking, access to the peripherals, and file systems. Device drivers are either integrated directly with the kernel, or added as modules that are loaded while the system is running.[58] Separate projects that interface with the kernel provide much of the system's higher-level functionality. The GNU userland is an important part of most Linux-based systems, providing the most common implementation of the C library, a popular CLI shell, and many of the common Unix tools which carry out many basic operating system tasks. The graphical user interface (or GUI) used by most Linux systems is built on top of an implementation of the X Window System.[59] More recently, the Linux community seeks to advance to Wayland as the new display server protocol in place of X11. Various layers within Linux, also showing separation between the userland and kernel space User mode User applications For example, bash, LibreOffice, GIMP, Blender, 0 A.D., Mozilla Firefox, etc. Low-level system components: System daemons: systemd, runit, logind, networkd, PulseAudio, ... Windowing system: X11, Wayland, Mir, SurfaceFlinger (Android) Other libraries: GTK+, Qt, EFL, SDL, SFML, FLTK, GNUstep, etc. Graphics: Mesa, AMD Catalyst, ... C standard library open(), exec(), sbrk(), socket(), fopen(), calloc(), ... (up to 2000 subroutines) glibc aims to be POSIX\/SUS-compatible, uClibc targets embedded systems, bionic written for Android, etc. Kernel mode Linux kernel stat, splice, dup, read, open, ioctl, write, mmap, close, exit, etc. (about 380 system calls) The Linux kernel System Call Interface (SCI, aims to be POSIX\/SUS-compatible) Process scheduling subsystem IPC subsystem Memory management subsystem Virtual files subsystem Network subsystem Other components: ALSA, DRI, evdev, LVM, device mapper, Linux Network Scheduler, Netfilter Linux Security Modules: SELinux, TOMOYO, AppArmor, Smack Hardware (CPU, main memory, data storage devices, etc.) Installed components of a Linux system include the following:[59][60] A bootloader, for example GNU GRUB, LILO, SYSLINUX, or Gummiboot. This is a program that loads the Linux kernel into the computer's main memory, by being executed by the computer when it is turned on and after the firmware initialization is performed. An init program, such as the traditional sysvinit and the newer systemd, OpenRC and Upstart. This is the first process launched by the Linux kernel, and is at the root of the process tree: in other terms, all processes are launched through init. It starts processes such as system services and login prompts (whether graphical or in terminal mode). Software libraries, which contain code that can be used by running processes. On Linux systems using ELF-format executable files, the dynamic linker that manages use of dynamic libraries is known as ld-linux.so. If the system is set up for the user to compile software themselves, header files will also be included to describe the interface of installed libraries. Besides the most commonly used software library on Linux systems, the GNU C Library (glibc), there are numerous other libraries. C standard library is the library needed to run standard C programs on a computer system, with the GNU C Library being the most commonly used. Several alternatives are available, such as the EGLIBC (which was used by Debian for some time) and uClibc (which was designed for uClinux). Widget toolkits are the libraries used to build graphical user interfaces (GUIs) for software applications. Numerous widget toolkits are available, including GTK+ and Clutter developed by the GNOME project, Qt developed by the Qt Project and led by Digia, and Enlightenment Foundation Libraries (EFL) developed primarily by the Enlightenment team. User interface programs such as command shells or windowing environments. User interface[edit] The user interface, also known as the shell, is either a command-line interface (CLI), a graphical user interface (GUI), or through controls attached to the associated hardware, which is common for embedded systems. For desktop systems, the default mode is usually a graphical user interface, although the CLI is available through terminal emulator windows or on a separate virtual console. CLI shells are text-based user interfaces, which use text for both input and output. The dominant shell used in Linux is the Bourne-Again Shell (bash), originally developed for the GNU project. Most low-level Linux components, including various parts of the userland, use the CLI exclusively. The CLI is particularly suited for automation of repetitive or delayed tasks, and provides very simple inter-process communication. On desktop systems, the most popular user interfaces are the GUI shells, packaged together with extensive desktop environments, such as the K Desktop Environment (KDE), GNOME, MATE, Cinnamon, Unity, LXDE, Pantheon and Xfce, though a variety of additional user interfaces exist. Most popular user interfaces are based on the X Window System, often simply called \"X\". It provides network transparency and permits a graphical application running on one system to be displayed on another where a user may interact with the application; however, certain extensions of the X Window System are not capable of working over the network.[61] Several X display servers exist, with the reference implementation, X.Org Server, being the most popular. Several types of window managers exist for X11, including tiling, dynamic, stacking and compositing. Window managers provide means to control the placement and appearance of individual application windows, and interact with the X Window System. Simpler X window managers such as dwm or ratpoison provide a minimalist functionality, while more elaborate window managers such as FVWM, Enlightenment or Window Maker provide more features such as a built-in taskbar and themes, but are still lightweight when compared to desktop environments. Desktop environments include window managers as part of their standard installations, such as Mutter (GNOME), KWin (KDE) or Xfwm (xfce), although users may choose to use a different window manager if preferred. Wayland is a display server protocol intended as a replacement for the X11 protocol; as of 2014[update], it has not received wider adoption. Unlike X11, Wayland does not need an external window manager and compositing manager. Therefore, a Wayland compositor takes the role of the display server, window manager and compositing manager. Weston is the reference implementation of Wayland, while GNOME's Mutter and KDE's KWin are being ported to Wayland as standalone display servers. Enlightenment has already been successfully ported since version 19. Video input infrastructure[edit] Main article: Video4Linux Linux currently has two modern kernel-userspace APIs for handing video input devices: V4L2 API for video streams and radio, and DVB API for digital TV reception.[62] Due to the complexity and diversity of different devices, and due to the large amount of formats and standards handled by those APIs, this infrastructure needs to evolve to better fit other devices. Also, a good userspace device library is the key of the success for having userspace applications to be able to work with all formats supported by those devices.[63][64] Development[edit] Simplified history of Unix-like operating systems. Linux shares similar architecture and concepts (as part of the POSIX standard) but does not share non-free source code with the original Unix or MINIX. Main articles: Linux distribution and Free software The primary difference between Linux and many other popular contemporary operating systems is that the Linux kernel and other components are free and open-source software. Linux is not the only such operating system, although it is by far the most widely used.[65] Some free and open-source software licenses are based on the principle of copyleft, a kind of reciprocity: any work derived from a copyleft piece of software must also be copyleft itself. The most common free software license, the GNU General Public License (GPL), is a form of copyleft, and is used for the Linux kernel and many of the components from the GNU Project. Linux based distributions are intended by developers for interoperability with other operating systems and established computing standards. Linux systems adhere to POSIX,[66] SUS,[67] LSB, ISO, and ANSI standards where possible, although to date only one Linux distribution has been POSIX.1 certified, Linux-FT.[68][69] Free software projects, although developed through collaboration, are often produced independently of each other. The fact that the software licenses explicitly permit redistribution, however, provides a basis for larger scale projects that collect the software produced by stand-alone projects and make it available all at once in the form of a Linux distribution. Many Linux distributions, or \"distros\", manage a remote collection of system software and application software packages available for download and installation through a network connection. This allows users to adapt the operating system to their specific needs. Distributions are maintained by individuals, loose-knit teams, volunteer organizations, and commercial entities. A distribution is responsible for the default configuration of the installed Linux kernel, general system security, and more generally integration of the different software packages into a coherent whole. Distributions typically use a package manager such as apt, yum, zypper, pacman or portage to install, remove, and update all of a system's software from one central location. Community[edit] See also: Free software community and Linux User Group A distribution is largely driven by its developer and user communities. Some vendors develop and fund their distributions on a volunteer basis, Debian being a well-known example. Others maintain a community version of their commercial distributions, as Red Hat does with Fedora, and SUSE does with openSUSE. In many cities and regions, local associations known as Linux User Groups (LUGs) seek to promote their preferred distribution and by extension free software. They hold meetings and provide free demonstrations, training, technical support, and operating system installation to new users. Many Internet communities also provide support to Linux users and developers. Most distributions and free software \/ open-source projects have IRC chatrooms or newsgroups. Online forums are another means for support, with notable examples being LinuxQuestions.org and the various distribution specific support and community forums, such as ones for Ubuntu, Fedora, and Gentoo. Linux distributions host mailing lists; commonly there will be a specific topic such as usage or development for a given list. There are several technology websites with a Linux focus. Print magazines on Linux often bundle cover disks that carry software or even complete Linux distributions.[70][71] Although Linux distributions are generally available without charge, several large corporations sell, support, and contribute to the development of the components of the system and of free software. An analysis of the Linux kernel showed 75 percent of the code from December 2008 to January 2010 was developed by programmers working for corporations, leaving about 18 percent to volunteers and 7% unclassified.[72] Major corporations that provide contributions include Dell, IBM, HP, Oracle, Sun Microsystems (now part of Oracle) and Nokia. A number of corporations, notably Red Hat, Canonical and SUSE, have built a significant business around Linux distributions. The free software licenses, on which the various software packages of a distribution built on the Linux kernel are based, explicitly accommodate and encourage commercialization; the relationship between a Linux distribution as a whole and individual vendors may be seen as symbiotic. One common business model of commercial suppliers is charging for support, especially for business users. A number of companies also offer a specialized business version of their distribution, which adds proprietary support packages and tools to administer higher numbers of installations or to simplify administrative tasks. Another business model is to give away the software in order to sell hardware. This used to be the norm in the computer industry, with operating systems such as CP\/M, Apple DOS and versions of Mac OS prior to 7.6 freely copyable (but not modifiable). As computer hardware standardized throughout the 1980s, it became more difficult for hardware manufacturers to profit from this tactic, as the OS would run on any manufacturer's computer that shared the same architecture. Programming on Linux[edit] Linux distributions support dozens of programming languages. The original development tools used for building both Linux applications and operating system programs are found within the GNU toolchain, which includes the GNU Compiler Collection (GCC) and the GNU Build System. Amongst others, GCC provides compilers for Ada, C, C++, Go and Fortran. Many programming languages have a cross-platform reference implementation that supports Linux, for example PHP, Perl, Ruby, Python, Java, Go, Rust and Haskell. First released in 2003, the LLVM project provides an alternative cross-platform open-source compiler for many languages. Proprietary compilers for Linux include the Intel C++ Compiler, Sun Studio, and IBM XL C\/C++ Compiler. BASIC in the form of Visual Basic is supported in such forms as Gambas, FreeBASIC, and XBasic, and in terms of terminal programming or QuickBASIC or Turbo BASIC programming in the form of QB64. A common feature of Unix-like systems, Linux includes traditional specific-purpose programming languages targeted at scripting, text processing and system configuration and management in general. Linux distributions support shell scripts, awk, sed and make. Many programs also have an embedded programming language to support configuring or programming themselves. For example, regular expressions are supported in programs like grep and locate, the traditional Unix MTA Sendmail contains its own Turing complete scripting system, and the advanced text editor GNU Emacs is built around a general purpose Lisp interpreter. Most distributions also include support for PHP, Perl, Ruby, Python and other dynamic languages. While not as common, Linux also supports C# (via Mono), Vala, and Scheme. Guile Scheme acts as an extension language targeting the GNU system utilities, seeking to make the conventionally small, static, compiled C programs of Unix design rapidly and dynamically extensible via an elegant, functional high-level scripting system; many GNU programs can be compiled with optional Guile bindings to this end. A number of Java Virtual Machines and development kits run on Linux, including the original Sun Microsystems JVM (HotSpot), and IBM's J2SE RE, as well as many open-source projects like Kaffe and JikesRVM. GNOME and KDE are popular desktop environments and provide a framework for developing applications. These projects are based on the GTK+ and Qt widget toolkits, respectively, which can also be used independently of the larger framework. Both support a wide variety of languages. There are a number of Integrated development environments available including Anjuta, Code::Blocks, CodeLite, Eclipse, Geany, ActiveState Komodo, KDevelop, Lazarus, MonoDevelop, NetBeans, and Qt Creator, while the long-established editors Vim, nano and Emacs remain popular.[73] Hardware support[edit] Linux is ubiquitously found on various types of hardware. See also: List of Linux-supported computer architectures The Linux kernel is a widely ported operating system kernel, available for devices ranging from mobile phones to supercomputers; it runs on a highly diverse range of computer architectures, including the hand-held ARM-based iPAQ and the IBM mainframes System z9 or System z10.[74] Specialized distributions and kernel forks exist for less mainstream architectures; for example, the ELKS kernel fork can run on Intel 8086 or Intel 80286 16-bit microprocessors, while the \u00b5Clinux kernel fork may run on systems without a memory management unit. The kernel also runs on architectures that were only ever intended to use a manufacturer-created operating system, such as Macintosh computers (with both PowerPC and Intel processors), PDAs, video game consoles, portable music players, and mobile phones. There are several industry associations and hardware conferences devoted to maintaining and improving support for diverse hardware under Linux, such as FreedomHEC. Over time, support for different hardware has improved in Linux, resulting in any off-the-shelf purchase having a \"good chance\" of being compatible.[75] Uses[edit] See also: Linux range of use Beside the Linux distributions designed for general-purpose use on desktops and servers, distributions may be specialized for different purposes including: computer architecture support, embedded systems, stability, security, localization to a specific region or language, targeting of specific user groups, support for real-time applications, or commitment to a given desktop environment. Furthermore, some distributions deliberately include only free software. As of 2015[update], over four hundred Linux distributions are actively developed, with about a dozen distributions being most popular for general-purpose use.[76] Desktop[edit] Visible software components of the Linux desktop stack include the display server, widget engines, and some of the more widespread widget toolkits. There are also components not directly visible to end users, including D-Bus and PulseAudio. See also: Desktop environment and Linux adoption: Measuring desktop adoption The popularity of Linux on standard desktop computers and laptops has been increasing over the years.[77] Most modern distributions include a graphical user environment, with, as of February 2015[update], the two most popular environments being the KDE Plasma Desktop and Xfce.[78] No single official Linux desktop exists: rather desktop environments and Linux distributions select components from a pool of free and open-source software with which they construct a GUI implementing some more or less strict design guide. GNOME, for example, has its human interface guidelines as a design guide, which gives the human\u2013machine interface an important role, not just when doing the graphical design, but also when considering people with disabilities, and even when focusing on security.[79] The collaborative nature of free software development allows distributed teams to perform language localization of some Linux distributions for use in locales where localizing proprietary systems would not be cost-effective. For example, the Sinhalese language version of the Knoppix distribution became available significantly before Microsoft translated Windows XP into Sinhalese.[80] In this case the Lanka Linux User Group played a major part in developing the localized system by combining the knowledge of university professors, linguists, and local developers. Performance and applications[edit] The performance of Linux on the desktop has been a controversial topic;[citation needed] for example in 2007 Con Kolivas accused the Linux community of favoring performance on servers. He quit Linux kernel development out of frustration with this lack of focus on the desktop, and then gave a \"tell all\" interview on the topic.[81] Since then a significant amount of development has focused on improving the desktop experience. Projects such as Upstart and systemd aim for a faster boot time; the Wayland and Mir projects aim at replacing X11 while enhancing desktop performance, security and appearance.[82] Many popular applications are available for a wide variety of operating systems. For example, Mozilla Firefox, OpenOffice.org\/LibreOffice and Blender have downloadable versions for all major operating systems. Furthermore, some applications initially developed for Linux, such as Pidgin, and GIMP, were ported to other operating systems (including Windows and Mac OS X) due to their popularity. In addition, a growing number of proprietary desktop applications are also supported on Linux,[83] such as Autodesk Maya, Softimage XSI and Apple Shake in the high-end field of animation and visual effects; see the list of proprietary software for Linux for more details. There are also several companies that have ported their own or other companies' games to Linux, with Linux also being a supported platform on both the popular Steam and Desura digital-distribution services.[84] Many other types of applications available for Microsoft Windows and Mac OS X also run on Linux. Commonly, either a free software application will exist which does the functions of an application found on another operating system, or that application will have a version that works on Linux, such as with Skype and some video games like Dota 2 and Team Fortress 2. Furthermore, the Wine project provides a Windows compatibility layer to run unmodified Windows applications on Linux. It is sponsored by commercial interests including CodeWeavers, which produces a commercial version of the software. Since 2009, Google has also provided funding to the Wine project.[85][86] CrossOver, a proprietary solution based on the open-source Wine project, supports running Windows versions of Microsoft Office, Intuit applications such as Quicken and QuickBooks, Adobe Photoshop versions through CS2, and many popular games such as World of Warcraft. In other cases, where there is no Linux port of some software in areas such as desktop publishing[87] and professional audio,[88][89][90] there is equivalent software available on Linux. It is also possible to run applications written for Android on other versions of Linux using Anbox.[91] Components and installation[edit] Besides externally visible components, such as X window managers, a non-obvious but quite central role is played by the programs hosted by freedesktop.org, such as D-Bus or PulseAudio; both major desktop environments (GNOME and KDE) include them, each offering graphical front-ends written using the corresponding toolkit (GTK+ or Qt). A display server is another component, which for the longest time has been communicating in the X11 display server protocol with its clients; prominent software talking X11 includes the X.Org Server and Xlib. Frustration over the cumbersome X11 core protocol, and especially over its numerous extensions, has led to the creation of a new display server protocol, Wayland. Installing, updating and removing software in Linux is typically done through the use of package managers such as the Synaptic Package Manager, PackageKit, and Yum Extender. While most major Linux distributions have extensive repositories, often containing tens of thousands of packages, not all the software that can run on Linux is available from the official repositories. Alternatively, users can install packages from unofficial repositories, download pre-compiled packages directly from websites, or compile the source code by themselves. All these methods come with different degrees of difficulty; compiling the source code is in general considered a challenging process for new Linux users, but it is hardly needed in modern distributions and is not a method specific to Linux. Samples of graphical desktop interfaces Unity Cinnamon GNOME Enlightenment KDE Plasma LXDE LXQt Mate Pantheon Fluxbox Sugar Trinity Xfce i3-gaps Budgie Netbooks[edit] Linux distributions have also become popular in the netbook market, with many devices such as the Asus Eee PC and Acer Aspire One shipping with customized Linux distributions installed.[92] In 2009, Google announced its Chrome\u00a0OS as a minimal Linux-based operating system, using the Chrome browser as the main user interface. Chrome\u00a0OS does not run any non-web applications, except for the bundled file manager and media player (a certain level of support for Android applications was added in later versions).[93] The netbooks that shipped with the operating system, termed Chromebooks, started appearing on the market in June 2011.[94] Servers, mainframes and supercomputers[edit] Broad overview of the LAMP software bundle, displayed here together with Squid. A high-performance and high-availability web server solution providing security in a hostile environment. Linux distributions have long been used as server operating systems, and have risen to prominence in that area; Netcraft reported in September 2006, that eight of the ten most reliable internet hosting companies ran Linux distributions on their web servers.[95] In June 2008, Linux distributions represented five of the top ten, FreeBSD three of ten, and Microsoft two of ten;[96] since February 2010, Linux distributions represented six of the top ten, FreeBSD two of ten, and Microsoft one of ten.[97] Linux distributions are the cornerstone of the LAMP server-software combination (Linux, Apache, MariaDB\/MySQL, Perl\/PHP\/Python) which has achieved popularity among developers, and which is one of the more common platforms for website hosting.[98] Linux distributions have become increasingly popular on mainframes, partly due to pricing and the open-source model.[99] In December 2009, computer giant IBM reported that it would predominantly market and sell mainframe-based Enterprise Linux Server.[100] At LinuxCon North America 2015, IBM announced LinuxONE, a series of mainframes specifically designed to run Linux and open-source software.[101][102] Linux distributions are also most commonly used as operating systems for supercomputers;[21] in the decade since the Earth Simulator supercomputer, all the fastest supercomputers have used Linux. As of November 2016[update], 99.6% of the world's 500 fastest supercomputers run some variant of Linux,[103] (the only exceptions, are ranked 386th and 387th and they run AIX Unix).[104] Linux is also dominant on the Green500 list. Smart devices[edit] Android smartphones Several operating systems for smart devices, such as smartphones, tablet computers, smart TVs, and in-vehicle infotainment (IVI) systems, are based on Linux. Major platforms for such systems include Android, Firefox\u00a0OS, Mer and Tizen. Android has become the dominant mobile operating system for smartphones, running on 79.3% of units sold worldwide during the second quarter of 2013.[105] Android is also a popular operating system for tablets, and Android smart TVs and in-vehicle infotainment systems have also appeared in the market. Cellphones and PDAs running Linux on open-source platforms became more common from 2007; examples include the Nokia N810, Openmoko's Neo1973, and the Motorola ROKR E8. Continuing the trend, Palm (later acquired by HP) produced a new Linux-derived operating system, webOS, which is built into its line of Palm Pre smartphones. Nokia's Maemo, one of the earliest mobile operating systems, was based on Debian.[106] It was later merged with Intel's Moblin, another Linux-based operating system, to form MeeGo.[107] The project was later terminated in favor of Tizen, an operating system targeted at mobile devices as well as IVI. Tizen is a project within The Linux Foundation. Several Samsung products are already running Tizen, Samsung Gear 2 being the most significant example.[108] Samsung Z smartphones will use Tizen instead of Android.[109] As a result of MeeGo's termination, the Mer project forked the MeeGo codebase to create a basis for mobile-oriented operating systems.[110] In July 2012, Jolla announced Sailfish OS, their own mobile operating system built upon Mer technology. Mozilla's Firefox\u00a0OS consists of the Linux kernel, a hardware abstraction layer, a web-standards-based runtime environment and user interface, and an integrated web browser.[111] Canonical has released Ubuntu Touch, aiming to bring convergence to the user experience on this mobile operating system and its desktop counterpart, Ubuntu. The operating system also provides a full Ubuntu desktop when connected to an external monitor.[112] Embedded devices[edit] See also: Embedded Linux and Linux devices The Jolla Phone has the Linux-based Sailfish OS In-car entertainment system of the Tesla Model S is based on Ubuntu[113] Nokia\u00a0X, a smartphone that runs Linux kernel Due to its low cost and ease of customization, Linux is often used in embedded systems. In the non-mobile telecommunications equipment sector, the majority of customer-premises equipment (CPE) hardware runs some Linux-based operating system. OpenWrt is a community driven example upon which many of the OEM firmwares are based. For example, the popular TiVo digital video recorder also uses a customized Linux,[114] as do several network firewalls and routers from such makers as Cisco\/Linksys. The Korg OASYS, the Korg KRONOS, the Yamaha Motif XS\/Motif XF music workstations,[115] Yamaha S90XS\/S70XS, Yamaha MOX6\/MOX8 synthesizers, Yamaha Motif-Rack XS tone generator module, and Roland RD-700GX digital piano also run Linux. Linux is also used in stage lighting control systems, such as the WholeHogIII console.[116] Gaming[edit] Main article: Linux gaming In the past, not many games were available for Linux, but in the recent years, more games have been released with support for Linux. Nowadays, many games support Linux (especially Indie games), except for a few AAA title games. On the other hand, as a popular mobile platform, Android (which uses the Linux kernel) has gained much developer interest and is one of the main platforms for mobile game development along with iOS operating system by Apple for iPhone and iPad devices. On February 14, 2013, Valve released a Linux version of Steam, a popular game distribution platform on PC.[117] Many Steam games were ported to Linux.[118] On December 13, 2013, Valve released SteamOS, a gaming oriented OS based on Debian, for beta testing, and has plans to ship Steam Machines as a gaming and entertainment platform.[119] Valve has also developed VOGL, an OpenGL debugger intended to aid video game development,[120] as well as porting its Source game engine to desktop Linux.[121] As a result of Valve's effort, several prominent games such as DotA 2, Team Fortress 2, Portal, Portal 2 and Left 4 Dead 2 are now natively available on desktop Linux. On July 31, 2013, Nvidia released Shield as an attempt to use Android as a specialized gaming platform.[122] Some Linux users play Windows games through Wine or CrossOver Linux. Specialized uses[edit] Due to the flexibility, customizability and free and open-source nature of Linux, it becomes possible to highly tune Linux for a specific purpose. There are two main methods for creating a specialized Linux distribution: building from scratch or from a general-purpose distribution as a base. The distributions often used for this purpose include Debian, Fedora, Ubuntu (which is itself based on Debian), Arch Linux, Gentoo, and Slackware. In contrast, Linux distributions built from scratch do not have general-purpose bases; instead, they focus on the JeOS philosophy by including only necessary components and avoiding resource overhead caused by components considered redundant in the distribution's use cases. Home theater PC[edit] A home theater PC (HTPC) is a PC that is mainly used as an entertainment system, especially a Home theater system. It is normally connected to a television, and often an additional audio system. OpenELEC, a Linux distribution that incorporates the media center software Kodi, is an OS tuned specifically for an HTPC. Having been built from the ground up adhering to the JeOS principle, the OS is very lightweight and very suitable for the confined usage range of an HTPC. There are also special editions of Linux distributions that include the MythTV media center software, such as Mythbuntu, a special edition of Ubuntu. Digital security[edit] Kali Linux is a Debian-based Linux distribution designed for digital forensics and penetration testing. It comes preinstalled with several software applications for penetration testing and identifying security exploits.[123] The Ubuntu derivative BackBox provides pre-installed security and network analysis tools for ethical hacking. There are many Linux distributions created with privacy, secrecy, network anonymity and information security in mind, including Tails, Tin Hat Linux and Tinfoil Hat Linux. Lightweight Portable Security is a distribution based on Arch Linux and developed by the United States Department of Defense. Tor-ramdisk is a minimal distribution created solely to host the network anonymity software Tor. System rescue[edit] Linux Live CD sessions have long been used as a tool for recovering data from a broken computer system and for repairing the system. Building upon that idea, several Linux distributions tailored for this purpose have emerged, most of which use GParted as a partition editor, with additional data recovery and system repair software: GParted Live\u00a0\u2013 a Debian-based distribution developed by the GParted project. Parted Magic\u00a0\u2013 a commercial Linux distribution. SystemRescueCD\u00a0\u2013 a Gentoo-based distribution with support for editing Windows registry. In space[edit] SpaceX uses multiple redundant flight computers in a fault-tolerant design in the Falcon\u00a09 rocket. Each Merlin engine is controlled by three voting computers, with two physical processors per computer that constantly check each other's operation. Linux is not inherently fault-tolerant (no operating system is, as it is a function of the whole system including the hardware), but the flight computer software makes it so for its purpose.[124] For flexibility, commercial off-the-shelf parts and system-wide \"radiation-tolerant\" design are used instead of radiation hardened parts.[124] As of June 2015[update], SpaceX has made 19 launches of the Falcon\u00a09 since 2010, out of which 18 have successfully delivered their primary payloads to Earth orbit, including some support missions for the International Space Station. In addition, Windows was used as an operating system on non-mission critical systems\u200d\u2014\u200claptops used on board the space station, for example\u200d\u2014\u200cbut it has been replaced with Linux; the first Linux-powered humanoid robot is also undergoing in-flight testing.[125] The Jet Propulsion Laboratory has used Linux for a number of years \"to help with projects relating to the construction of unmanned space flight and deep space exploration\"; NASA uses Linux in robotics in the Mars rover, and Ubuntu Linux to \"save data from satellites\".[126] Education[edit] Linux distributions have been created to provide hands-on experience with coding and source code to students, on devices such as the Raspberry Pi. In addition to producing a practical device, the intention is to show students \"how things work under the hood\". The Ubuntu derivatives Edubuntu and The Linux Schools Project, as well as the Debian derivative Skolelinux, provide education-oriented software packages. They also include tools for administering and building school computer labs and computer-based classrooms, such as the Linux Terminal Server Project (LTSP). Others[edit] Instant WebKiosk and Webconverger are browser-based Linux distributions often used in web kiosks and digital signage. Thinstation is a minimalist distribution designed for thin clients. Rocks Cluster Distribution is tailored for high-performance computing clusters. There are general-purpose Linux distributions that target a specific audience, such as users of a specific language or geographical area. Such examples include Ubuntu Kylin for Chinese language users and BlankOn targeted at Indonesians. Profession-specific distributions include Ubuntu Studio for media creation and DNALinux for bioinformatics. There is also a Muslim-oriented distribution of the name Sabily, as well as an Arabic-focused distribution called Ojuba Linux that consequently also provides some Islamic tools. Certain organizations use slightly specialized Linux distributions internally, including GendBuntu used by the French National Gendarmerie, Goobuntu used internally by Google, and Astra Linux developed specifically for the Russian army. Market share and uptake[edit] Main article: Linux adoption See also: Usage share of operating systems Many quantitative studies of free\/open-source software focus on topics including market share and reliability, with numerous studies specifically examining Linux.[127] The Linux market is growing rapidly, and the revenue of servers, desktops, and packaged software running Linux was expected to[needs update] exceed $35.7 billion by 2008.[128] Analysts and proponents attribute the relative success of Linux to its security, reliability, low cost, and freedom from vendor lock-in.[129][130] Desktops and laptops According to web server statistics, as of June 2016[update], the estimated market share of Linux on desktop computers is around 1.8%. In comparison, Microsoft Windows has a market share of around 89.7%, while Mac OS covers around 8.5%.[22] Web servers W3Cook publishes stats that use the top 1,000,000 Alexa domains,[131] which as of May 2015[update] estimate that 96.55% of web servers run Linux, 1.73% run Windows, and 1.72% run FreeBSD.[132] W3Techs publishes stats that use the top 10,000,000 Alexa domains, updated monthly[133] and as of November 2016[update] estimate that 66.7% of web servers run Linux\/Unix, and 33.4% run Microsoft Windows.[134] In September 2008, Microsoft's CEO Steve Ballmer stated that 60% of web servers ran Linux, versus 40% that ran Windows Server.[135] IDC's Q1 2007 report indicated that Linux held 12.7% of the overall server market at that time;[136] this estimate was based on the number of Linux servers sold by various companies, and did not include server hardware purchased separately that had Linux installed on it later. Mobile devices Android, which is based on the Linux kernel, has become the dominant operating system for smartphones. During the second quarter of 2013, 79.3% of smartphones sold worldwide used Android.[105] Android is also a popular operating system for tablets, being responsible for more than 60% of tablet sales as of 2013.[137] According to web server statistics, as of December 2014[update] Android has a market share of about 46%, with iOS holding 45%, and the remaining 9% attributed to various niche platforms.[138] Film production For years Linux has been the platform of choice in the film industry. The first major film produced on Linux servers was 1997's Titanic.[139][140] Since then major studios including DreamWorks Animation, Pixar, Weta Digital, and Industrial Light & Magic have migrated to Linux.[141][142][143] According to the Linux Movies Group, more than 95% of the servers and desktops at large animation and visual effects companies use Linux.[144] Use in government Linux distributions have also gained popularity with various local and national governments. The federal government of Brazil is well known for its support for Linux.[145][146] News of the Russian military creating its own Linux distribution has also surfaced, and has come to fruition as the G.H.ost Project.[147] The Indian state of Kerala has gone to the extent of mandating that all state high schools run Linux on their computers.[148][149] China uses Linux exclusively as the operating system for its Loongson processor family to achieve technology independence.[150] In Spain, some regions have developed their own Linux distributions, which are widely used in education and official institutions, like gnuLinEx in Extremadura and Guadalinex in Andalusia. France and Germany have also taken steps toward the adoption of Linux.[151] North Korea's Red Star OS, developed since 2002, is based on a version of Fedora Linux.[152] Copyright, trademark, and naming[edit] See also: GNU\/Linux naming controversy and SCO-Linux controversies Linux kernel is licensed under the GNU General Public License (GPL), version 2. The GPL requires that anyone who distributes software based on source code under this license, must make the originating source code (and any modifications) available to the recipient under the same terms.[153] Other key components of a typical Linux distribution are also mainly licensed under the GPL, but they may use other licenses; many libraries use the GNU Lesser General Public License (LGPL), a more permissive variant of the GPL, and the X.org implementation of the X Window System uses the MIT License. Torvalds states that the Linux kernel will not move from version 2 of the GPL to version 3.[154][155] He specifically dislikes some provisions in the new license which prohibit the use of the software in digital rights management.[156] It would also be impractical to obtain permission from all the copyright holders, who number in the thousands.[157] A 2001 study of Red Hat Linux 7.1 found that this distribution contained 30 million source lines of code.[158] Using the Constructive Cost Model, the study estimated that this distribution required about eight thousand man-years of development time. According to the study, if all this software had been developed by conventional proprietary means, it would have cost about $1.5\u00a0billion (2017 US dollars) to develop in the United States.[158] Most of the source code (71%) was written in the C programming language, but many other languages were used, including C++, Lisp, assembly language, Perl, Python, Fortran, and various shell scripting languages. Slightly over half of all lines of code were licensed under the GPL. The Linux kernel itself was 2.4 million lines of code, or 8% of the total.[158] In a later study, the same analysis was performed for Debian version 4.0 (etch, which was released in 2007).[159] This distribution contained close to 283 million source lines of code, and the study estimated that it would have required about seventy three thousand man-years and cost US$8.28\u00a0billion (in 2017 dollars) to develop by conventional means. The name \"Linux\" is also used for a laundry detergent made by Swiss company R\u00f6sch.[160] In the United States, the name Linux is a trademark registered to Linus Torvalds.[8] Initially, nobody registered it, but on August 15, 1994, William R. Della Croce, Jr. filed for the trademark Linux, and then demanded royalties from Linux distributors. In 1996, Torvalds and some affected organizations sued him to have the trademark assigned to Torvalds, and, in 1997, the case was settled.[161] The licensing of the trademark has since been handled by the Linux Mark Institute (LMI). Torvalds has stated that he trademarked the name only to prevent someone else from using it. LMI originally charged a nominal sublicensing fee for use of the Linux name as part of trademarks,[162] but later changed this in favor of offering a free, perpetual worldwide sublicense.[163] The Free Software Foundation (FSF) prefers GNU\/Linux as the name when referring to the operating system as a whole, because it considers Linux distributions to be variants of the GNU operating system initiated in 1983 by Richard Stallman, president of the FSF.[16][17] They explicitly take no issue over the name Android for the Android OS, which is also an operating system based on the Linux kernel, as GNU is not a part of it. However, they object to it on grounds of including proprietary components. The FSF holds this stance for any operating system with proprietary components, including Linux operating systems such as Red Hat Linux.[citation needed] A minority of public figures and software projects other than Stallman and the FSF, notably Debian (which had been sponsored by the FSF up to 1996),[164] also use GNU\/Linux when referring to the operating system as a whole.[114][165][166] Most media and common usage, however, refers to this family of operating systems simply as Linux, as do many large Linux distributions (for example, SUSE Linux and Red Hat Enterprise Linux). In contrast Linux distributions containing only free software use \"GNU\/Linux\" or simply \"GNU\", such as Trisquel GNU\/Linux, Parabola GNU\/Linux-libre, BLAG Linux and GNU, and gNewSense. As of May 2011[update], about 8% to 13% of a modern Linux distribution is made of GNU components (the range depending on whether GNOME is considered part of GNU), as determined by counting lines of source code making up Ubuntu's \"Natty\" release; meanwhile, 6% is taken by the Linux kernel, and 9% by the Linux kernel and its direct dependencies.[167] See also[edit] Free software portal Linux portal Open-source software portal Comparison of Linux distributions Comparison of open source and closed source Comparison of operating systems Comparison of X Window System desktop environments Criticism of Linux Linux Documentation Project Linux Foundation List of Linux distributions List of games released on Linux List of operating systems Loadable kernel module Usage share of operating systems Notes[edit] ^ GNU is the primary userland used in nearly all Linux distros.[2][3][4] The GNU userland contains system daemons, user applications, the GUI, and various libraries. GNU Core utilities are an essential part of most distros. Most Linux distributions use the X Window system.[5] Other components of the userland, such as the widget toolkit, vary with the specific distribution, desktop environment, and user configuration.[6] ^ \"Linux\" trademark is owned by Linus Torvalds[8] and administered by the Linux Mark Institute. References[edit] ^ Linux Online (2008). \"Linux Logos and Mascots\". Archived from the original on August 15, 2010. Retrieved August 11, 2009.\u00a0 ^ \"GNU Userland\". Archived from the original on March 8, 2016.\u00a0 ^ \"Unix Fundamentals \u2014 System Administration for Cyborgs\". Archived from the original on October 5, 2016.\u00a0 ^ \"Operating Systems \u2014 Introduction to Information and Communication Technology\".\u00a0 ^ \"The X Window System\".\u00a0 ^ \"PCLinuxOS Magazine - HTML\".\u00a0 ^ \"The Linux Kernel Archives: Frequently asked questions\". kernel.org. September 2, 2014. Retrieved September 4, 2015.\u00a0 ^ a b \"U.S. Reg No: 1916230\". United States Patent and Trademark Office. Retrieved April 1, 2006.\u00a0 ^ a b \"Re: How to pronounce Linux?\". Newsgroup:\u00a0comp.os.linux. April 23, 1992. Usenet:\u00a01992Apr23.123216.22024@klaava.Helsinki.FI. Retrieved January 9, 2007.\u00a0 ^ a b c d Free On-Line Dictionary of Computing (June 2006). \"Linux\". Retrieved September 15, 2009.\u00a0 ^ a b Safalra (April 14, 2007). \"Pronunciation of 'Linux'\". Safalra's Website. Retrieved September 15, 2009.\u00a0 ^ Eckert, Jason W. (2012). Linux+ Guide to Linux Certification (Third ed.). Boston, Massachusetts: Cengage Learning. p.\u00a033. ISBN\u00a0978-1111541538. Retrieved April 14, 2013. The shared commonality of the kernel is what defines Linux; the differing OSS applications that can interact with the common kernel are what differentiate Linux distributions.\u00a0 ^ \"Twenty Years of Linux according to Linus Torvalds\". ZDNet. April 13, 2011. Retrieved 2016-09-19.\u00a0 ^ Linus Benedict Torvalds (October 5, 1991). \"Free minix-like kernel sources for 386-AT\". Newsgroup:\u00a0comp.os.minix. Retrieved September 30, 2011.\u00a0 ^ \"What Is Linux: An Overview of the Linux Operating System\". Linux Foundation. April 3, 2009. Retrieved August 15, 2011.\u00a0 ^ a b \"GNU\/Linux FAQ\". Gnu.org. Retrieved September 1, 2013.\u00a0 ^ a b \"Linux and the GNU System\". Gnu.org. Retrieved September 1, 2013.\u00a0 ^ Barry Levine (August 26, 2013). \"Linux' 22th [sic] Birthday Is Commemorated - Subtly - by Creator\". Simpler Media Group, Inc. Retrieved May 10, 2015. Originally developed for Intel x86-based PCs, Torvalds' \"hobby\" has now been released for more hardware platforms than any other OS in history.\u00a0 ^ \"NetMarketShare:Mobile\/Tablet Operating System Market Share\".\u00a0 ^ Thibodeau, Patrick (2009). \"IBM's newest mainframe is all Linux\". Computerworld (published December 9, 2009). Archived from the original on November 11, 2016. Retrieved February 22, 2009.\u00a0 ^ a b c Lyons, Daniel (March 15, 2005). \"Linux rules supercomputers\". Forbes. Retrieved February 22, 2007.\u00a0 ^ a b \"Desktop Operating System Market Share\". Netmarketshare.com. Retrieved August 12, 2016.\u00a0 ^ http:\/\/gs.statcounter.com\/chart.php?bar=1&device=Desktop&device_hidden=desktop&multi-device=true&statType_hidden=os&region_hidden=ww&granularity=monthly&statType=Operating%20System&region=Worldwide&fromInt=201510&toInt=201510&fromMonthYear=2015-10&toMonthYear=2015-10&csv=1 ^ Steven J. Vaughan-Nichols. \"Chromebook shipments leap by 67 percent\". ZDNet. Retrieved September 29, 2015.\u00a0 ^ \"Sony Open Source Code Distribution Service\". Sony Electronics. Retrieved October 8, 2011.\u00a0 ^ \"Sharp Liquid Crystal Television Instruction Manual\" (PDF). Sharp Electronics. p.\u00a024. Retrieved October 8, 2011.\u00a0 ^ IBM (October 2001). \"Linux Watch (WatchPad)\". Retrieved June 18, 2015.\u00a0 ^ Linux Devices (November 28, 2006). \"Trolltech rolls \"complete\" Linux smartphone stack\". Archived from the original on May 25, 2012. Retrieved January 12, 2017.\u00a0 ^ DistroWatch. \"DistroWatch.com: Put the fun back into computing. Use Linux, BSD.\". distrowatch.com. Archived from the original on April 2, 2013. Retrieved 2016-12-30.\u00a0 ^ Bhartiya, Swapnil. \"Best Linux distros of 2016: Something for everyone\". CIO. Retrieved 2016-12-30.\u00a0 ^ \"10 Top Most Popular Linux Distributions of 2016\". www.tecmint.com. Retrieved 2016-12-30.\u00a0 ^ Ritchie, D.M. (October 1984), \"The UNIX System: The Evolution of the UNIX Time-sharing System\", AT&T Bell Laboratories Technical Journal, 63 (8): 1577, However, UNIX was born in 1969 ...\u00a0 ^ \"Origins and History of Unix, 1969\u20131995\". Faqs.org. Retrieved November 9, 2010.\u00a0 ^ \"About the GNU Project \u2013 Initial Announcement\". Gnu.org. June 23, 2008. Retrieved March 9, 2009.\u00a0 ^ a b \"Overview of the GNU System\". Gnu.org. Retrieved March 9, 2009.\u00a0 ^ \"Linus vs. Tanenbaum debate\". Archived from the original on October 3, 2012. Retrieved February 19, 2014.\u00a0 ^ Linksvayer, Mike (1993). \"The Choice of a GNU Generation \u2013 An Interview With Linus Torvalds\". Meta magazine. Retrieved January 20, 2009.\u00a0 ^ a b \"MINIX is now available under the BSD license\", April 9, 2000, minix1.woodhull.com ^ Torvalds, Linus. \"What would you like to see most in minix?\". Newsgroup:\u00a0comp.os.minix. Usenet:\u00a01991Aug25.205708.9541@klaava.Helsinki.FI. Retrieved September 9, 2006.\u00a0 ^ Linus Torvalds (October 14, 1992). \"Chicken and egg: How was the first linux gcc binary created??\". Newsgroup:\u00a0comp.os.minix. Usenet:\u00a01992Oct12.100843.26287@klaava.Helsinki.FI. Retrieved August 17, 2013.\u00a0 ^ Torvalds, Linus (January 5, 1992). \"Release notes for Linux v0.12\". Linux Kernel Archives. Archived from the original on August 19, 2007. Retrieved July 23, 2007. The Linux copyright will change: I've had a couple of requests to make it compatible with the GNU copyleft, removing the \u201cyou may not distribute it for money\u201d condition. I agree. I propose that the copyright be changed so that it confirms to GNU \u2500 pending approval of the persons who have helped write code. I assume this is going to be no problem for anybody: If you have grievances (\"I wrote that code assuming the copyright would stay the same\") mail me. Otherwise The GNU copyleft takes effect since the first of February. If you do not know the gist of the GNU copyright \u2500 read it.\u00a0 ^ a b Torvalds, Linus and Diamond, David, Just for Fun: The Story of an Accidental Revolutionary, 2001, ISBN 0-06-662072-4 ^ Torvalds, Linus (March 1994). \"Index of \/pub\/linux\/kernel\/SillySounds\". Retrieved August 3, 2009.\u00a0 ^ Garfinkel, Simson; Spafford, Gene; Schwartz, Alan (2003). Practical UNIX and Internet Security. O'Reilly. p.\u00a021.\u00a0 ^ Santhanam, Anand; Vishal Kulkarni (March 1, 2002). \"Linux system development on an embedded device\". DeveloperWorks. IBM. Archived from the original on March 29, 2007. Retrieved July 26, 2007.\u00a0 ^ Schrecker, Michael. \"Turn on Web Interactivity with LAMP\".\u00a0 ^ Galli, Peter (August 8, 2007). \"Vista Aiding Linux Desktop, Strategist Says\". eWEEK. Ziff Davis Enterprise Inc. Retrieved November 19, 2007.\u00a0 ^ Paul, Ryan (September 3, 2007). \"Linux market share set to surpass Win 98, OS X still ahead of Vista\". Ars Technica. Ars Technica, LLC. Retrieved November 19, 2007.\u00a0 ^ Beer, Stan (January 23, 2007). \"Vista to play second fiddle to XP until 2009: Gartner\". iTWire. iTWire. Archived from the original on December 3, 2008. Retrieved November 19, 2007.\u00a0 ^ \"Operating System Marketshare for Year 2007\". Market Share. Net Applications. November 19, 2007. Retrieved November 19, 2007.\u00a0 ^ \"Vista slowly continues its growth; Linux more aggressive than Mac OS during the summer\". XiTiMonitor. AT Internet\/XiTi.com. September 24, 2007. Archived from the original on December 14, 2007. Retrieved November 19, 2007.\u00a0 ^ \"Global Web Stats\". W3Counter. Awio Web Services LLC. November 10, 2007. Retrieved November 19, 2007.\u00a0 ^ \"June 2004 Zeitgeist\". Google Press Center. Google Inc. August 12, 2004. Retrieved November 19, 2007.\u00a0 ^ McMillan, Robert. \"IBM, Brazilian government launch Linux effort\". www.infoworld.com. IDG News Service. Retrieved February 16, 2015.\u00a0 ^ \"The Linux Foundation; Staff\". Archived from the original on April 19, 2009. Retrieved November 10, 2011.\u00a0 ^ \"The Free Software Foundation Management\". Retrieved November 10, 2011.\u00a0 ^ \"Free software is a matter of liberty, not price \u2014 Free Software Foundation \u2014 working together for free software\". Fsf.org. Retrieved July 12, 2012.\u00a0 ^ \"Why is Linux called a monolithic kernel?\". stackoverflow.com. 2009. Retrieved October 16, 2013.\u00a0 ^ a b \"Anatomy of a Linux System\" (PDF). O'Reilly. 2001. Retrieved October 16, 2013.\u00a0 ^ M. Tim Jones (May 31, 2006). \"Inside the Linux boot process\". IBM Developer Works. Archived from the original on October 17, 2013. Retrieved October 16, 2013.\u00a0 ^ Jake Edge (June 8, 2013). \"The Wayland Situation: Facts About X vs. Wayland (Phoronix)\". LWN.net. Retrieved October 11, 2013.\u00a0 ^ \"Linux TV: Television with Linux\". linuxtv.org. Retrieved October 16, 2013.\u00a0 ^ Jonathan Corbet (October 11, 2006). \"The Video4Linux2 API: an introduction\". LWN.net. Retrieved October 16, 2013.\u00a0 ^ \"Part I. Video for Linux Two API Specification\". Chapter 7. Changes. linuxtv.org. Retrieved October 16, 2013.\u00a0 ^ Operating System Market Share (November 2009). \"Operating System Market Share\". Retrieved December 11, 2009.\u00a0 ^ \"POSIX.1 (FIPS 151-2) Certification\".\u00a0 ^ \"How source code compatible is Debian with other Unix systems?\". Debian FAQ. the Debian project.\u00a0 ^ Eissfeldt, Heiko (August 1, 1996). \"Certifying Linux\". Linux Journal. Archived from the original on April 4, 2016.\u00a0 ^ \"The Debian GNU\/Linux FAQ \u2013 Compatibility issues\". Archived from the original on October 10, 2011. Retrieved September 17, 2011.\u00a0 ^ Linux Format. \"Linux Format DVD contents\". Archived from the original on August 8, 2008. Retrieved January 17, 2008.\u00a0 ^ linux-magazine.com. \"Current Issue\". Retrieved January 17, 2008.\u00a0 ^ \"75% of Linux code now written by paid developers\". APC. Retrieved January 22, 2010.\u00a0 ^ Brockmeier, Joe. \"A survey of Linux Web development tools\". Retrieved December 16, 2006.\u00a0 ^ Advani, Prakash (February 8, 2004). \"If I could re-write Linux\". freeos.com. Retrieved January 23, 2007.\u00a0 ^ Bruce Byfield (August 14, 2007). \"Is my hardware Linux-compatible? Find out here\". Linux.com. Retrieved September 4, 2015.\u00a0 ^ \"The LWN.net Linux Distribution List\". LWN.net. Retrieved March 18, 2015.\u00a0 ^ What is Linux. Archived at Wayback Engine. Retrieved August 26, 2013. ^ \"Survey says: KDE Plasma is the most popular desktop Linux environment\".\u00a0 ^ Nathan Willis (August 14, 2013). \"Prompt-free security for GNOME\". LWN.net. Retrieved November 14, 2013.\u00a0 ^ \"Introducing sinhala linux\". Retrieved November 23, 2015.\u00a0 ^ \"Why I quit: kernel developer Con Kolivas\". APC Magazine. ACP Magazines. July 24, 2007. Archived from the original on July 7, 2011. Retrieved August 15, 2011.\u00a0 ^ \"Wayland Architecture\". freedesktop.org. Retrieved January 5, 2013.\u00a0 ^ \"The Global Desktop Project, Building Technology and Communities\". Retrieved May 7, 2006.\u00a0 ^ Dawe, Liam (January 1, 2013). \"A 2012 review and what's in store for 2013?\". GamingOnLinux. Retrieved January 2, 2013.\u00a0 ^ Kegel, Dan (February 14, 2008). \"Google's support for Wine in 2007\". wine-devel (Mailing list). Retrieved January 3, 2009.\u00a0 ^ \"Open Source Patches: Wine\". Google. Retrieved September 7, 2008.\u00a0 ^ Advani, Prakash (October 27, 2000). \"Microsoft Office for Linux?\". FreeOS. FreeOS Technologies (I) Pvt. Ltd. Retrieved February 3, 2008.\u00a0 ^ Smith-Heisters, Ian (October 11, 2005). \"Editing audio in Linux\". Ars Technica. Ars Technica, LLC. Retrieved February 3, 2008.\u00a0 ^ Lumma, Carl (April 2007). \"Linux: It's Not Just For Computer Geeks Anymore\". Keyboard Magazine. New Bay Media, LLC. Retrieved February 3, 2008.\u00a0 ^ James, Daniel (February 2004). \"Using Linux For Recording & Mastering\". Sound On Sound. SOS Publications Group. Retrieved February 3, 2008.\u00a0 ^ \"Anbox lets you run Android apps natively in Ubuntu, other GNU\/Linux distros - Liliputing\". liliputing.com. April 11, 2017. Retrieved May 12, 2017.\u00a0 ^ Schofield, Jack (May 28, 2009). \"Are netbooks losing their shine?\". The Guardian. London. Retrieved June 2, 2010.\u00a0 ^ \"Introducing the Google Chrome OS\". Official Google Blog. Blogger. July 7, 2009. Retrieved June 12, 2014.\u00a0 ^ Stein, Scott (May 11, 2011). \"First Take: Samsung Series 5 Chromebook, the future of Netbooks?\". Journal. CNET. Retrieved June 12, 2014.\u00a0 ^ \"Rackspace Most Reliable Hoster in September\". Netcraft. October 7, 2006. Retrieved November 1, 2006.\u00a0 ^ \"Aplus.Net is the Most Reliable Hosting Company Site in June 2008\". Netcraft. July 7, 2008. Retrieved July 28, 2008.\u00a0 ^ \"Most Reliable Hosting Company Sites in February 2010\". Netcraft. March 1, 2010. Retrieved March 23, 2010.\u00a0 ^ SecuritySpace (June 1, 2010). \"Web Server Survey\". SecuritySpace. Retrieved June 27, 2010.\u00a0 ^ Danner, David (3 April 2012). \"How CIOs Can Use Linux on the Mainframe to Maximize Savings and Lower TCO\". Enterprise Executive. Enterprise Systems Media. Archived from the original on July 8, 2016. Retrieved 8 July 2016.\u00a0 ^ Timothy Prickett Morgan (December 11, 2009). \"IBM punts Linux-only mainframes Big MIPS, deep discounts\". The Register. Retrieved July 2, 2009.\u00a0 ^ Babcock, Charles (18 August 2015). \"IBM's LinuxONE Mainframe: What's Old Is New Again\". InformationWeek. InformationWeek. Archived from the original on July 8, 2016. Retrieved 8 July 2016.\u00a0 ^ Hoffman, Dale; Mitran, Marcel (17 August 2015). \"Open Source & ISV Ecosystem Enablement for LinuxONE and IBM z\" (PDF). Linux Foundation. IBM. Archived from the original (PDF) on September 5, 2015. Retrieved 8 July 2016.\u00a0 ^ \"TOP500 Supercomputer Sites: Operating system Family \/ Linux\". Top500.org. Retrieved July 1, 2016.\u00a0 ^ \"Sublist Generator\". Top500.org. Retrieved November 27, 2016.\u00a0 ^ a b \"Android Nears 80% Market Share In Global Smartphone Shipments, As iOS And BlackBerry Share Slides, Per IDC\".\u00a0 ^ \"Chapter 3 - maemo Platform Overview\". Wayback Machine. Archived from the original on June 16, 2008. Retrieved June 12, 2012.\u00a0 ^ Grabham, Dan (February 15, 2010). \"Inter and Nokia merge Moblin and Maemo to form MeeGo\". Retrieved June 12, 2014.\u00a0 ^ Whitwam, Ryan (February 22, 2014). \"Samsung Announces Gear 2 and Gear 2 Neo Smart Watches Running Tizen, Available Worldwide In April\". Retrieved June 12, 2014.\u00a0 ^ Gibbs, Samuel (June 2, 2014). \"Samsung Z smartphone ditches Android for Tizen software\". Retrieved June 12, 2014.\u00a0 ^ \"Mer Project\". Mer Project. Retrieved June 12, 2014.\u00a0 ^ \"Firefox OS architecture\". Mozilla Developer Network. Mozilla. Retrieved June 13, 2014.\u00a0 ^ \"App ecosystem\". Ubuntu. Canonical Ltd. Retrieved June 13, 2014.\u00a0 ^ \"Tesla Model S Ethernet Network Explored\".\u00a0 ^ a b \"TiVo \u2500 GNU\/Linux Source Code\". Archived from the original on May 19, 2007. Retrieved December 12, 2006.\u00a0 ^ \"Case Study: How MontaVista Linux helped Yamaha developers make a great product greater\" (PDF). Archived from the original (PDF) on September 25, 2007. Retrieved August 26, 2007.\u00a0 ^ \"Embedded Linux: FlyingPigs the WholeHogIII runs on Linux\". Archived from the original on October 13, 2005.\u00a0 ^ Cifaldi, Frank (February 14, 2013). \"Steam Box phase one complete: Steam's Linux client is out now\". Retrieved June 12, 2014.\u00a0 ^ Larabel, Michael (June 5, 2014). \"There's Now 500 Games On Steam For Linux\". Journal. Phoronix. Retrieved June 12, 2014.\u00a0 ^ \"SteamOS\". Steam. Valve. Retrieved June 12, 2014.\u00a0 ^ Larabel, Michael (January 16, 2014). \"Valve's VOGL OpenGL Debugger Should Be Great\". Journal. Phoronix. Retrieved June 12, 2014.\u00a0 ^ Mattas, Jeff (April 25, 2012). \"Steam and Source Engine being ported to Linux\". Retrieved June 13, 2014.\u00a0 ^ Buckley, Sean (July 21, 2014). \"NVIDIA Shield\". Engadget. Retrieved June 13, 2014.\u00a0 ^ \"What is Kali Linux?\". Kali Linux. Retrieved June 13, 2014.\u00a0 ^ a b Svitak, Amy (November 18, 2012). \"Dragon's \"Radiation-Tolerant\" Design\". Aviation Week. Archived from the original on December 3, 2013. Retrieved November 22, 2012.\u00a0 ^ Steven J. Vaughan-Nichols (May 6, 2013). \"To the space station and beyond with Linux\". Retrieved November 14, 2014.\u00a0 ^ \"Five Ways NASA is Using Linux OS to Run its Space Program\". Retrieved November 14, 2014.\u00a0 ^ Wheeler, David A. \"Why Open Source Software\/Free Software (OSS\/FS)? Look at the Numbers!\". Retrieved April 1, 2006.\u00a0 ^ \"Linux To Ring Up $35 Billion By 2008\". Retrieved April 1, 2006.\u00a0 ^ \"The rise and rise of Linux\". Computer Associates International. October 10, 2005. Archived from the original on February 17, 2007.\u00a0 ^ Jeffrey S. Smith. \"Why customers are flocking to Linux\". IBM. Archived from the original on June 3, 2008.\u00a0 ^ \"W3Cook FAQ\". W3Cook.com. Retrieved June 30, 2015.\u00a0 ^ \"OS Market Share and Usage Trends\". W3Cook.com. Retrieved June 30, 2015.\u00a0 ^ \"Technologies Overview - methodology information\". W3Techs.com. Retrieved June 30, 2015.\u00a0 ^ \"Usage of operating systems for websites\". W3Techs.com. Retrieved November 20, 2015.\u00a0 ^ Niccolai, James (September 2008). \"Ballmer Still Searching for an Answer to Google\". Retrieved June 4, 2009.\u00a0 ^ \"\u2500 IDC Q1 2007 report\". Linux-watch.com. May 29, 2007. Retrieved March 9, 2009.\u00a0 ^ Egham (March 3, 2014). \"Gartner Says Worldwide Tablet Sales Grew 68 Percent in 2013, With Android Capturing 62 Percent of the Market\". Retrieved June 13, 2014.\u00a0 ^ \"Mobile\/Tablet Operating System Market Share\". Netmarketshare.com. Retrieved December 7, 2014.\u00a0 ^ Strauss, Daryll. \"Linux Helps Bring Titanic to Life\". Retrieved July 28, 2011.\u00a0 ^ Rowe, Robin. \"Linux and Star Trek\". Retrieved July 28, 2011.\u00a0 ^ \"Industry of Change: Linux Storms Hollywood\". Retrieved March 11, 2009.\u00a0 ^ \"Tux with Shades, Linux in Hollywood\". Retrieved March 11, 2009.\u00a0 ^ \"Weta Digital \u2013 Jobs\". Retrieved November 17, 2010.\u00a0 ^ \"LinuxMovies.org \u2013 Advancing Linux Motion Picture Technology\". Retrieved March 16, 2012.\u00a0 ^ \"Brazil's love of Linux\". Retrieved February 21, 2009.\u00a0 ^ Ashurst, Mark (February 1, 2004). \"Brazil falls in love with Linux\". BBC News. Retrieved February 21, 2009.\u00a0 ^ \"LV: Minister: \"Open standards improve efficiency and transparency\"\". Retrieved February 21, 2009.\u00a0 ^ \"Linux Spreads its Wings in India\". Retrieved February 21, 2009.\u00a0 ^ \"Kerala shuts windows, schools to use only Linux\". Retrieved June 22, 2009.\u00a0 ^ \"China's Microprocessor Dilemma\". Microprocessor Report. Archived from the original on September 18, 2009. Retrieved April 15, 2009.\u00a0 ^ Krane, Jim (November 30, 2001). \"Some countries are choosing Linux systems over Microsoft\". Seattle Post-Intelligencer. Retrieved February 21, 2009.\u00a0 ^ \"North Korea's 'paranoid' computer operating system revealed\". The Guardian. December 27, 2015. Retrieved December 31, 2015.\u00a0 ^ \"GNU General Public License, version 2\". GNU Project. June 2, 1991. Retrieved December 5, 2013.\u00a0 ^ Torvalds, Linus (January 26, 2006). \"Re: GPL V3 and Linux \u2500 Dead Copyright Holders\". Linux Kernel Mailing List.\u00a0 ^ Torvalds, Linus (September 25, 2006). \"Re: GPLv3 Position Statement\". Linux Kernel Mailing List.\u00a0 ^ Brett Smith (July 29, 2013). \"Neutralizing Laws That Prohibit Free Software \u2014 But Not Forbidding DRM\". A Quick Guide to GPLv3. GNU Project. Retrieved December 5, 2013.\u00a0 ^ \"Keeping an Eye on the Penguin\". Linux-watch.com. February 7, 2006. Retrieved November 9, 2010.\u00a0 ^ a b c Wheeler, David A (July 29, 2002). \"More Than a Gigabuck: Estimating GNU\/Linux's Size\". Retrieved May 11, 2006.\u00a0 ^ Amor, Juan Jos\u00e9; et al. (June 17, 2007). \"Measuring Etch: the size of Debian 4.0\". Retrieved September 16, 2007.\u00a0 ^ \"There Is a Linux Detergent Out There and It's Trademarked\". Linux.com. June 19, 2015. Retrieved January 31, 2016.\u00a0 ^ \"Linux Timeline\". Linux Journal. May 31, 2006.\u00a0 ^ Neil McAllister (September 5, 2005). \"Linus gets tough on Linux trademark\". InfoWorld. Archived from the original on April 12, 2008. Retrieved February 24, 2008.\u00a0 ^ \"Linux Mark Institute\". Retrieved February 24, 2008. LMI has restructured its sublicensing program. Our new sublicense agreement is: Free \u2013 approved sublicense holders pay no fees; Perpetual \u2013 sublicense terminates only in breach of the agreement or when your organization ceases to use its mark; Worldwide \u2013 one sublicense covers your use of the mark anywhere in the world\u00a0 ^ Richard Stallman (April 28, 1996). \"The FSF is no longer sponsoring Debian\". tech-insider.org. Retrieved February 8, 2014.\u00a0 ^ \"About Debian\". debian.org. December 8, 2013. Retrieved January 30, 2014.\u00a0 ^ Andrew D. Balsa; Coauthors. \"The linux-kernel mailing list FAQ\". The Linux Kernel Archives. Kernel.org. Archived from the original on October 1, 2012. Retrieved June 13, 2013. ...we have tried to use the word \"Linux\" or the expression \"Linux kernel\" to designate the kernel, and GNU\/Linux to designate the entire body of GNU\/GPL'ed OS software,... ...many people forget that the linux kernel mailing list is a forum for discussion of kernel-related matters, not GNU\/Linux in general...\u00a0 ^ C\u00f4rte-Real, Pedro (May 31, 2011). \"How much GNU is there in GNU\/Linux?\". Split Perspective. Retrieved January 28, 2014.\u00a0 (self-published data) External links[edit] Find more aboutLinuxat Wikipedia's sister projects Definitions from Wiktionary Media from Commons News from Wikinews Quotations from Wikiquote Texts from Wikisource Textbooks from Wikibooks Learning resources from Wikiversity Linux at DMOZ Graphical map of Linux Internals Linux kernel website and archives The History of Linux in GIT Repository Format 1992\u20132010 v t e Linux Linux kernel History Kernel Linus's Law Linux-libre Linux startup process Linux kernel oops Tux more\u2026 Controversies Criticism of Linux Criticism of desktop Linux GNU\/Linux naming controversy Tanenbaum\u2013Torvalds debate SCO and Linux Distributions General comparison Distributions list Netbook-specific comparison Distributions that run from RAM Lightweight Proprietary software for Linux Package manager Package format List of software package managers Organizations Linux Foundation Linux Mark Institute Linux User Group (LUG) Linux Documentation Project LinuxChix Linux Counter Adoption Desktop Embedded Gaming Linux range of use List of Linux adopters Media Free Software Magazine Linux.com Linux Format Open Source For You Linux Gazette Linux Journal Linux Magazine LinuxUser Ubuntu User Linux Outlaws Linux Voice LugRadio LWN.net Phoronix Revolution OS The Code People Alan Cox Allison Randal Andrew Morton Benjamin Mako Hill Bradley Kuhn Bruce Perens Daniel Robbins David S. Miller Greg Kroah-Hartman Ian Murdock Jon \"maddog\" Hall Jono Bacon Karen Sandler Linus Torvalds Eric S. Raymond Mark Shuttleworth Pamela Jones Patrick Volkerding Richard Stallman Theodore Ts'o William John Sullivan Linux Linux kernel features Portal:Linux WikiProject Linux v t e Unix and Unix-like operating systems BSD 386BSD FreeBSD NetBSD OpenBSD DragonFly BSD NeXTSTEP Darwin macOS iOS SunOS Ultrix Coherent GNU Linux Android Chrome OS LynxOS MINIX Plan 9 QNX BlackBerry 10 Research Unix System V A\/UX AIX AMIX HP-UX illumos IRIX OpenServer Solaris Tru64 UNIX UnixWare Xenix more... Category Commons Book v t e Free and open-source software General Alternative terms for free software Comparison of open-source and closed-source software Comparison of source code hosting facilities Free software Free software project directories Gratis versus libre Long-term support Open-source software Open-source software development Outline Software packages Audio Bioinformatics Codecs Collaboration Configuration management Device drivers Graphics Wireless Geophysics Health Mathematics Operating systems Programming languages Routing Statistics Television Video games Web applications Content management systems E-commerce Word processors Android apps iOS apps Commercial Trademarked Formerly proprietary Community Free software movement History Open-source software movement Organizations Events Licenses AFL Apache APSL Artistic Beerware Boost BSD CC0 CDDL EPL GNU GPL GNU LGPL ISC MIT MPL Ms-PL\/RL Sleepycat Unlicense WTFPL zlib License types and standards Comparison of free and open-source software licenses Contributor License Agreement Copyfree Copyleft Debian Free Software Guidelines Definition of Free Cultural Works Free license The Free Software Definition The Open Source Definition Open-source license Permissive software licence Public domain Viral license Challenges Binary blob Digital rights management Hardware restrictions License proliferation Mozilla software rebranding Proprietary software SCO\/Linux controversies Secure boot Software patents Software security Trusted Computing Related topics The Cathedral and the Bazaar Forking Microsoft Open Specification Promise Revolution OS Book Category Commons Portal v t e Operating systems General Advocacy Comparison Forensic engineering History Hobbyist development List Timeline Usage share Kernel Architectures Exokernel Hybrid Microkernel Monolithic Rump kernel Unikernel Components Device driver Loadable kernel module Microkernel User space Process management Concepts Context switch Interrupt IPC Process Process control block Real-time Thread Time-sharing Scheduling algorithms Computer multitasking Fixed-priority preemptive Multilevel feedback queue Preemptive Round-robin Shortest job next Memory management and resource protection Bus error General protection fault Memory protection Paging Protection ring Segmentation fault Virtual memory Storage access and file systems Boot loader Defragmentation Device file File attribute Inode Journal Partition Virtual file system Virtual tape library List AmigaOS Android BeOS BSD Chrome OS CP\/M DOS GNU Haiku illumos iOS Linux Macintosh Classic Mac OS macOS MINIX MorphOS MUSIC\/SP Nemesis NOS OpenVMS ORVYL OS\/2 OSv Pick QNX ReactOS RISC OS RSTS\/E RSX-11 RT-11 Solaris TOPS-10\/TOPS-20 TPF Unix Visi On VM\/CMS VS\/9 Windows Xinu z\/OS Miscellaneous concepts API Computer network HAL Live CD Live USB OS shell CLI GUI TUI VUI PXE v t e Linux distributions Arch Antergos ArchBang Chakra Manjaro Linux Parabola GNU\/Linux-libre Debian antiX Astra Linux Bharat Operating System Solutions Elive Devuan gNewSense HandyLinux Kali Linux Knoppix SparkyLinux SteamOS Tails Ubuntu Official: Edubuntu Kubuntu Lubuntu Ubuntu GNOME Ubuntu Kylin Ubuntu MATE Ubuntu Budgie Xubuntu Other: Bodhi Linux elementary OS Linux Mint Trisquel Asturix Fedora BLAG Linux and GNU Korora Red Hat CentOS ClearOS Linpus Linux Oracle Linux Qubes OS Rocks Cluster Distribution Scientific Linux SME Server Gentoo Calculate Linux Chromium OS Chrome OS Funtoo Linux Sabayon Linux Other Frugalware Linux Mandriva Linux Mageia OpenMandriva Lx ROSA Linux openSUSE SUSE Linux Enterprise Server PCLinuxOS Puppy Linux Slackware Porteus Salix OS VectorLinux Source Mage Solus Void Linux Category Comparison List Commons Authority control WorldCat Identities VIAF: 185985901 LCCN: n94087892 GND: 4337730-0 Retrieved from \"https:\/\/en.wikipedia.org\/w\/index.php?title=Linux&oldid=790824497\" Categories: Linux1991 softwareComputing platformsCross-platform softwareFinnish inventionsLinus TorvaldsUnix variantsHidden categories: Wikipedia pending changes protected pages (level 1)Wikipedia indefinitely move-protected pagesUse mdy dates from June 2016Articles with hAudio microformatsArticles including recorded pronunciationsAll articles with failed verificationArticles with failed verification from January 2016Articles containing potentially dated statements from 2014All articles containing potentially dated statementsArticles containing potentially dated statements from 2015Articles containing potentially dated statements from February 2015All articles with unsourced statementsArticles with unsourced statements from February 2014Articles containing potentially dated statements from November 2016Articles containing potentially dated statements from June 2015Wikipedia articles in need of updating from December 2015All Wikipedia articles in need of updatingArticles containing potentially dated statements from June 2016Articles containing potentially dated statements from May 2015Articles containing potentially dated statements from December 2014Articles with unsourced statements from December 2016Articles containing potentially dated statements from May 2011Articles with DMOZ linksWikipedia articles with VIAF identifiersWikipedia articles with LCCN identifiersWikipedia articles with GND identifiers Navigation menu Personal tools Not logged inTalkContributionsCreate accountLog in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store Interaction HelpAbout WikipediaCommunity portalRecent changesContact page Tools What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page Print\/export Create a bookDownload as PDFPrintable version In other projects Wikimedia CommonsWikibooksWikinewsWikiquoteWikiversity Languages AfrikaansAlemannisch\u12a0\u121b\u122d\u129b\u0627\u0644\u0639\u0631\u0628\u064a\u0629Aragon\u00e9s\u0710\u072a\u0721\u071d\u0710\u0985\u09b8\u09ae\u09c0\u09af\u09bc\u09beAsturianuAz\u0259rbaycanca\u062a\u06c6\u0631\u06a9\u062c\u0647\u09ac\u09be\u0982\u09b2\u09beB\u00e2n-l\u00e2m-g\u00faBasa Banyumasan\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430)\u200e\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438BoarischBosanskiBrezhonegCatal\u00e0Cebuano\u010ce\u0161tinaCorsuCymraegDanskDeutschDolnoserbskiEesti\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03acEsperantoEuskara\u0641\u0627\u0631\u0633\u06ccFran\u00e7aisGaeilgeGalego\u5ba2\u5bb6\u8a9e\/Hak-k\u00e2-ng\u00ee\ud55c\uad6d\uc5b4\u0540\u0561\u0575\u0565\u0580\u0565\u0576\u0939\u093f\u0928\u094d\u0926\u0940HornjoserbsceHrvatskiIdoBahasa IndonesiaInterlingua\u0418\u0440\u043e\u043d\u00cdslenskaItaliano\u05e2\u05d1\u05e8\u05d9\u05eaBasa Jawa\u0c95\u0ca8\u0ccd\u0ca8\u0ca1\u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8Kasz\u00ebbsczi\u049a\u0430\u0437\u0430\u049b\u0448\u0430Krey\u00f2l ayisyenKurd\u00ee\u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430\u0ea5\u0eb2\u0ea7LatinaLatvie\u0161uL\u00ebtzebuergeschLietuvi\u0173Ling\u00e1laLa .lojban.LumbaartMagyar\u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438Malagasy\u092e\u0930\u093e\u0920\u0940\u10db\u10d0\u10e0\u10d2\u10d0\u10da\u10e3\u10e0\u10d8\u0645\u0635\u0631\u0649Bahasa MelayuM\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304\u041c\u043e\u043d\u0433\u043e\u043b\u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102cNederlandsNedersaksies\u0928\u0947\u092a\u093e\u0932\u0940\u0928\u0947\u092a\u093e\u0932 \u092d\u093e\u0937\u093e\u65e5\u672c\u8a9eNorsk nynorskOccitan\u0b13\u0b21\u0b3c\u0b3f\u0b06\u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40\u067e\u0646\u062c\u0627\u0628\u06cc\u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179aPlattd\u00fc\u00fctschPolskiPortugu\u00easQaraqalpaqshaRipoarischRom\u00e2n\u0103Runa Simi\u0420\u0443\u0441\u0438\u043d\u044c\u0441\u043a\u044b\u0439\u0420\u0443\u0441\u0441\u043a\u0438\u0439\u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430SarduScotsSeelterskShqipSicilianu\u0dc3\u0dd2\u0d82\u0dc4\u0dbdSimple EnglishSloven\u010dinaSloven\u0161\u010dina\u015al\u016fnskiSoomaaliga\u06a9\u0648\u0631\u062f\u06cc\u0421\u0440\u043f\u0441\u043a\u0438 \/ srpskiSrpskohrvatski \/ \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438SuomiSvenskaTagalog\u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u0422\u0430\u0442\u0430\u0440\u0447\u0430\/tatar\u00e7a\u0c24\u0c46\u0c32\u0c41\u0c17\u0c41Tetun\u0e44\u0e17\u0e22T\u00fcrk\u00e7e\u0423\u0434\u043c\u0443\u0440\u0442\u1a05\u1a14 \u1a15\u1a18\u1a01\u1a17\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u0627\u0631\u062f\u0648V\u00e8netoVeps\u00e4n kel\u2019Ti\u1ebfng Vi\u1ec7tV\u00f5roWalon\u6587\u8a00West-VlamsWinarayWolof\u5434\u8bed\u05d9\u05d9\u05b4\u05d3\u05d9\u05e9Yor\u00f9b\u00e1\u7cb5\u8a9eZe\u00eauws\u017demait\u0117\u0161ka\u4e2d\u6587 Edit links This page was last edited on 16 July 2017, at 10:01. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view (window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"1.488\",\"walltime\":\"1.733\",\"ppvisitednodes\":{\"value\":12883,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":0,\"limit\":1500000},\"postexpandincludesize\":{\"value\":386585,\"limit\":2097152},\"templateargumentsize\":{\"value\":10469,\"limit\":2097152},\"expansiondepth\":{\"value\":24,\"limit\":40},\"expensivefunctioncount\":{\"value\":21,\"limit\":500},\"entityaccesscount\":{\"value\":1,\"limit\":400},\"timingprofile\":[\"100.00% 1412.385 1 -total\",\" 51.97% 734.076 2 Template:Reflist\",\" 31.03% 438.202 129 Template:Cite_web\",\" 6.75% 95.339 26 Template:Cite_news\",\" 5.12% 72.339 1 Template:Infobox_OS\",\" 4.85% 68.444 9 Template:Navbox\",\" 4.51% 63.712 1 Template:Infobox\",\" 3.92% 55.350 4 Template:Fix\",\" 3.89% 54.950 1 Template:Pp-pc1\",\" 3.51% 49.572 12 Template:DMCA\"]},\"scribunto\":{\"limitreport-timeusage\":{\"value\":\"0.705\",\"limit\":\"10.000\"},\"limitreport-memusage\":{\"value\":8732671,\"limit\":52428800}},\"cachereport\":{\"origin\":\"mw1184\",\"timestamp\":\"20170718062809\",\"ttl\":86400,\"transientcontent\":true}}});});(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgBackendResponseTime\":99,\"wgHostname\":\"mw1257\"});});","tags":"","url":"https:\/\/en.wikipedia.org\/wiki\/Linux"},{"title":"Debian - Wikipedia","text":"Debian From Wikipedia, the free encyclopedia Jump to: navigation, search Debian Debian GNU\/Linux 8.2 with GNOME and some free software applications Developer Debian Project (Software in the Public Interest) OS family Unix-like Working state Current Source model Open source Initial release September\u00a01993; 23\u00a0years ago\u00a0(1993-09) Latest release 9.0 (Stretch) (June\u00a017, 2017; 31 days ago\u00a0(2017-06-17)[1]) [\u00b1] Available in 75 languages Update method APT (several front-ends available) Package manager dpkg Platforms ARM64, armel (ARM little-endian), armhf, MIPS, mipsel, PowerPC, PPC64le, x86-32, x86-64, z\/Architecture[2] Kernel type Monolithic: * Linux * kFreeBSD (in development) Micro: * GNU Hurd (in development)[3] Userland GNU Default user interface GNOME(Xfce on non-Linux ports) License DFSG-compliant (free software licenses) Official website www.debian.org Debian (\/\u02c8d\u025bbi\u0259n\/[4] or \/\u02c8de\u026abi\u0259n\/)[5]) is a Unix-like computer operating system that is composed entirely of free software, most of which is under the GNU General Public License and packaged by a group of individuals participating in the Debian Project. The Debian Project was first announced in 1993 by Ian Murdock, Debian 0.01 was released on September 15, 1993,[6] and the first stable release was made in 1996.[7] The Debian stable release branch is one of the most popular for personal computers and network servers, and has been used as a base for many other distributions. The project's work is carried out over the Internet by a team of volunteers guided by the Debian Project Leader and three foundational documents: the Debian Social Contract, the Debian Constitution, and the Debian Free Software Guidelines. New distributions are updated continually, and the next candidate is released after a time-based freeze. As one of the earliest operating systems based on the Linux kernel, it was decided that Debian was to be developed openly and freely distributed in the spirit of the GNU Project. This decision drew the attention and support of the Free Software Foundation, which sponsored the project for one year from November 1994 to November 1995.[8] Upon the ending of the sponsorship, the Debian Project formed the non-profit organisation Software in the Public Interest. While Debian's main port, Debian GNU\/Linux, uses the Linux kernel and GNU programs, other ports exist based on BSD kernels and the GNU HURD microkernel. All use the GNU userland and the GNU C library (glibc). Contents 1 Features 2 Kernels 3 Installation and Live images 4 History 4.1 Founding (1993\u201398) 4.2 Leader election (1999\u20132005) 4.3 Sarge and later releases (2005\u201315) 5 Releases 6 Desktop environments 7 Debian Live 8 Package management 8.1 APT tools 8.2 GDebi and other front-ends 9 Branches 9.1 Numbering scheme 9.2 Code names 9.3 Blends 10 Logo 11 Archive areas 12 Multimedia support 13 Hardware support 13.1 Hardware requirements 13.2 Architecture ports 13.2.1 Official ports 13.2.2 Unofficial ports 13.3 Embedded systems 14 Support for communities 14.1 Localization 14.2 Virtual communities 15 Policies 15.1 Organization 15.2 Developer recruitment, motivation, and resignation 16 Development procedures 16.1 Security 16.1.1 2008 OpenSSL vulnerability 17 Cost of development 18 Derivatives 19 See also 20 References 20.1 Citations 20.2 Sources 21 External links Features[edit] Debian 7 installation menu Text version of the Debian Installer Graphical version of the Debian Installer Debian console login and welcome message Debian has access to online repositories that contain over 50,000 software packages[9] making it the largest software compilation.[10] Debian officially contains only free software, but non-free software can be downloaded and installed from the Debian repositories.[11] Debian includes popular free programs such as LibreOffice,[12] Firefox web browser, Evolution mail, K3b disc burner, VLC media player, GIMP image editor, and Evince document viewer.[11] Debian is a popular choice for web servers (cf. LAMP).[13][14] Kernels[edit] Debian supports Linux officially, offered kFreeBSD for version 7 but not 8,[15] and GNU Hurd unofficially.[16] GNU\/kFreeBSD was released as a technology preview for IA-32 and x86-64 architectures,[15] and lacked the amount of software available in Debian's Linux distribution.[17] Official support for kFreeBSD was removed for version 8, which did not provide a kFreeBSD-based distribution. Several flavors of the Linux kernel exist for each port. For example, the i386 port has flavors for IA-32 PCs supporting Physical Address Extension and real-time computing, for older PCs, and for x86-64 PCs.[18] The Linux kernel does not officially contain firmware without sources, although such firmware is available in non-free packages and alternative installation media.[19][20] Installation and Live images[edit] Debian offers DVD and CD images for installation that can be downloaded using BitTorrent or jigdo. Physical disks can also be bought from retailers.[21] The full sets are made up of several discs (the amd64 port consists of 13 DVDs or 84 CDs),[22] but only the first disc is required for installation, as the installer can retrieve software not contained in the first disc image from online repositories.[23] Debian offers different network installation methods. A minimal install of Debian is available via the netinst CD, whereby Debian is installed with just a base and later added software can be downloaded from the Internet. Another option is to boot the installer from the network.[24] Installation images are hybrid on some architectures and can be used to create a bootable USB drive (Live USB).[25] The default bootstrap loader is GNU GRUB version 2, though the package name is simply grub, while version 1 was renamed to grub-legacy. This conflicts with e.g. Fedora, where grub version 2 is named grub2. The default desktop may be chosen from the DVD boot menu among GNOME, KDE Software Compilation, Xfce and LXDE, and from special disc 1 CDs.[26][27] History[edit] Founding (1993\u201398)[edit] Debian was first announced on August 16, 1993, by Ian Murdock, who initially called the system \"the Debian Linux Release\".[28][29] The word \"Debian\" was formed as a portmanteau of the first name of his then-girlfriend Debra Lynn and his own first name.[30] Before Debian's release, the Softlanding Linux System (SLS) had been a popular Linux distribution and the basis for Slackware.[31] The perceived poor maintenance and prevalence of bugs in SLS motivated Murdock to launch a new distribution.[32] Debian 0.01, released on September 15, 1993, was the first of several internal releases.[6] Version 0.90 was the first public release,[6] providing support through mailing lists hosted at Pixar.[33] The release included the Debian Linux Manifesto, outlining Murdock's view for the new operating system. In it he called for the creation of a distribution to be maintained openly, in the spirit of Linux and GNU.[34] The Debian project released the 0.9x versions in 1994 and 1995.[35] During this time it was sponsored by the Free Software Foundation for one year.[36] Ian Murdock delegated the base system, the core packages of Debian, to Bruce Perens and Murdock focused on the management of the growing project.[37] The first ports to non-IA-32 architectures began in 1995, and Debian 1.1 was released in 1996.[38] By that time and thanks to Ian Jackson, the dpkg package manager was already an essential part of Debian.[39] In 1996, Bruce Perens assumed the project leadership. Perens was a controversial leader, regarded as authoritarian and strongly attached to Debian.[40] He drafted a social contract and edited suggestions from a month-long discussion into the Debian Social Contract and the Debian Free Software Guidelines.[41] After the FSF withdrew their sponsorship in the midst of the free software vs. open source debate,[42] Perens initiated the creation of the legal umbrella organization Software in the Public Interest instead of seeking renewed involvement with the FSF.[38] He led the conversion of the project from a.out to ELF.[43] He created the BusyBox program to make it possible to run a Debian installer on a single floppy, and wrote a new installer.[44] By the time Debian 1.2 was released, the project had grown to nearly two hundred volunteers.[43] Perens left the project in 1998.[45] Ian Jackson became the leader in 1998.[46] Debian 2.0 introduced the second official port, m68k.[35] During this time the first port to a non-Linux kernel, Debian GNU\/Hurd, was started.[47] On December 2, the first Debian Constitution was ratified.[48] Leader election (1999\u20132005)[edit] From 1999, the project leader was elected yearly.[49] The Advanced Packaging Tool was deployed with Debian 2.1.[35] The amount of applicants was overwhelming and the project established the new member process.[50][51] The first Debian derivatives, namely Libranet,[52] Corel Linux and Stormix's Storm Linux, were started in 1999.[38] The 2.2 release in 2000 was dedicated to Joel Klecker, a developer who died of Duchenne muscular dystrophy.[53] In late 2000, the project reorganized the archive with new package \"pools\" and created the Testing distribution, made up of packages considered stable, to reduce the freeze for the next release.[38] In the same year, developers began holding an annual conference called DebConf with talks and workshops for developers and technical users.[54] In May 2001, Hewlett-Packard announced plans to base its Linux development on Debian.[55] In July 2002, the project released version 3.0, code-named Woody, the first release to include cryptographic software, a free licensed KDE and internationalization.[56] During these last release cycles, the Debian project drew considerable criticism from the free software community because of the long time between stable releases.[57][58][59] Some events disturbed the project while working on Sarge, as Debian servers were attacked by fire and hackers.[38][60] One of the most memorable was the Vancouver prospectus.[61][62][63] After a meeting held in Vancouver, release manager Steve Langasek announced a plan to reduce the number of supported ports to four in order to shorten future release cycles.[64] There was a large reaction because the proposal looked more like a decision and because such a drop would damage Debian's aim to be \"the universal operating system\".[65][66][67] Sarge and later releases (2005\u201315)[edit] Debian 4.0 Etch (2007) The 3.1 Sarge release was made in June 2005. This release updated 73% of the software and included over 9,000 new packages. A new installer with a modular design, Debian-Installer, allowed installations with RAID, XFS and LVM support, improved hardware detection, made installations easier for novice users, and was translated into almost forty languages. An installation manual and release notes were in ten and fifteen languages respectively. The efforts of Skolelinux, Debian-Med and Debian-Accessibility raised the number of packages that were educational, had a medical affiliation, and ones made for people with disabilities.[38][68] Iceweasel logo In 2006, as a result of a much-publicized dispute, Mozilla software was rebranded in Debian, with Firefox forked as Iceweasel and Thunderbird as Icedove. The Mozilla Corporation stated that software with unapproved modifications could not be distributed under the Firefox trademark. Two reasons that Debian modifies the Firefox software are to change the non-free artwork and to provide security patches.[69][70] In February 2016, it was announced that Mozilla and Debian had reached agreement and Iceweasel would revert to the name Firefox; similar agreement was anticipated for Icedove\/Thunderbird.[71] A fund-raising experiment, Dunc-Tank, was created to solve the release cycle problem and release managers were paid to work full-time;[72] in response, unpaid developers slowed down their work and the release was delayed.[73] Debian 4.0 (Etch) was released in April 2007, featuring the x86-64 port and a graphical installer.[35] Debian 5.0 (Lenny) was released in February 2009, supporting Marvell's Orion platform and netbooks such as the Asus Eee PC.[74] The release was dedicated to Thiemo Seufer, a developer who died in a car crash.[75] Debian 6.0 Squeeze (2011) In July 2009, the policy of time-based development freezes on a two-year cycle was announced. Time-based freezes are intended to blend the predictability of time based releases with Debian's policy of feature based releases, and to reduce overall freeze time.[76] The Squeeze cycle was going to be especially short; however, this initial schedule was abandoned.[77] In September 2010, the backports service became official, providing more recent versions of some software for the stable release.[78] Debian 6.0 (Squeeze) was released in February 2011, introduced Debian GNU\/kFreeBSD as a technology preview, featured a dependency-based boot system, and moved problematic firmware to the non-free area.[79] Debian 7.0 (Wheezy) was released in May 2013, featuring multiarch support[80] and Debian 8.0 (Jessie) was released in April 2015, using systemd as the new init system.[81] Debian 9.0 (Stretch) was released in June 2017.[82] At present[update], Debian is still in development and new packages are uploaded to unstable every day.[83] Throughout Debian's lifetime, both the Debian distribution and its website have won various awards from different organizations,[84] including Server Distribution of the Year 2011,[85] The best Linux distro of 2011,[86] and a Best of the Net award for October 1998.[87] On December 2, 2015, Microsoft announced that they would offer Debian GNU\/Linux as an endorsed distribution on the Azure cloud platform.[88][89] Releases[edit] Main article: Debian version history Desktop environments[edit] Debian offers CD images specifically built for GNOME (the default desktop), KDE Software Compilation, Xfce and LXDE.[79] MATE is officially supported,[90] while Cinnamon support was added with Debian 8.0 Jessie.[91] Less common window managers such as Enlightenment, Openbox, Fluxbox, IceWM, Window Maker and others are available.[92] The default desktop environment of version 7.0 Wheezy was temporarily switched to Xfce, because GNOME 3 did not fit on the first CD of the set.[93] The default for the version 8.0 Jessie was changed again to Xfce in November 2013,[94] and back to GNOME in September 2014.[95] Debian Live[edit] Debian releases live install images for CDs, DVDs and USB thumb drives, for IA-32 and x86-64 architectures, and with a choice of desktop environments. These Debian Live images allow users to boot from removable media and run Debian without affecting the contents of their computer. A full install of Debian to the computer's hard drive can be initiated from the live image environment.[96] Personalized images can be built with the live-build tool for discs, USB drives and for network booting purposes.[97] Package management[edit] Package management operations can be performed with different tools available on Debian, from the lowest level command dpkg to graphical front-ends like Synaptic. The recommended standard for administering packages on a Debian system is the apt toolset.[98] dpkg provides the low-level infrastructure for package management.[99] The dpkg database contains the list of installed software on the current system. The dpkg command tool does not know about repositories. The command can work with local .deb package files, and information from the dpkg database.[100] APT tools[edit] Using Aptitude to view Debian package details Package installed with Aptitude An Advanced Packaging Tool (APT) tool allows administering an installed Debian system to retrieve and resolve package dependencies from repositories. APT tools share dependency information and cached packages.[98] Aptitude is a command line tool that also offers a text-based user interface. The program comes with enhancements such as better search on package metadata.[98] apt-get and apt-cache are command tools of the standard apt package. apt-get installs and removes packages, and apt-cache is used for searching packages and displaying package information.[98] GDebi and other front-ends[edit] GDebi is an APT tool which can be used in command-line and on the GUI.[101] GDebi can install a local .deb file via the command line like the dpkg command, but with access to repositories to resolve dependencies.[102] Other graphical front-ends for APT include Software Center,[103] Synaptic[104] and Apper.[105] GNOME Software is a graphical front-end for PackageKit, which itself can work on top of various software packaging systems. Branches[edit] A Debian 4.0 Etch box cover Three branches of Debian (also called releases, distributions or suites) are regularly maintained:[106] Stable is the current release and targets stable and well-tested software needs.[107] Stable is made by freezing Testing for a few months where bugs are fixed and packages with too many bugs are removed; then the resulting system is released as stable. It is updated only if major security or usability fixes are incorporated.[108] This branch has an optional backports service that provides more recent versions of some software.[78] Stable's CDs and DVDs can be found in the Debian website.[22] Testing is the preview branch that will eventually become the next major release. The packages included in this branch have had some testing in unstable but they may not be fit for release yet. It contains newer packages than stable but older than unstable. This branch is updated continually until it is frozen.[108] Testing's CDs and DVDs can be found on the Debian website.[22] Unstable, always codenamed sid, is the trunk. Packages are accepted without checking the distribution as a whole.[108] This branch is usually run by software developers who participate in a project and need the latest libraries available, and by those who prefer bleeding-edge software.[106] Debian does not provide Sid installation discs. This branch can be installed through a system upgrade from testing.[109] Other branches in Debian: Oldstable is the prior stable release.[108] It is supported by the Debian Security Team until one year after a new stable is released, and since the release of Debian 6, for another 2 years through the Long Term Support project.[110] Eventually, oldstable is moved to a repository for archived releases.[108] Oldoldstable is the prior oldstable release. It is supported by the Long Term Support community. Eventually, oldoldstable is moved to a repository for archived releases. Experimental is a temporary staging area of highly experimental software that is likely to break the system. It is not a full distribution and missing dependencies are commonly found in unstable, where new software without the damage chance is normally uploaded.[108] The snapshot archive provides older versions of the branches. They may be used to install a specific older version of some software.[111] Numbering scheme[edit] Stable and oldstable get minor updates, called point releases; as of June 2017[update], the stable release is version 9.0,[112] and the oldstable release is version 8.8.[113] The numbering scheme for the point releases up to Debian 4.0 was to include the letter r (for revision)[114] after the main version number and then the number of the point release; for example, the latest point release of version 4.0 is 4.0r9.[115] This scheme was chosen because a new dotted version would make the old one look obsolete and vendors would have trouble selling their CDs.[116] From Debian 5.0, the numbering scheme of point releases was changed, conforming to the GNU version numbering standard;[117] the first point release of Debian 5.0 was 5.0.1 instead of 5.0r1.[118] The numbering scheme was once again changed for the first Debian 7 update, which was version 7.1.[119] The r scheme is no longer in use, but point release announcements include a note about not throwing away old CDs.[120] Code names[edit] The code names of Debian releases are names of characters from the Toy Story films. Debian 9 was named after the toy rubber octopus in Toy Story 3. Debian 8 was named Jessie, after the cowgirl in Toy Story 2 and Toy Story 3. The Testing branch is currently named Buster, [121] which is the real (not the toy) dog seen in Toy Story 2 and 3. Debian 11 will be called \"Bullseye\".[122] The unstable trunk is permanently nicknamed Sid, after the emotionally unstable boy next door who regularly destroyed toys.[123] This naming tradition came about because Bruce Perens was involved in the early development of Debian while working at Pixar.[40] Blends[edit] Debian Pure Blends are subsets of a Debian release configured out-of-the-box for users with particular skills and interests.[124] For example, Debian Jr. is made for children, while Debian Science is for researchers and scientists.[125] The complete Debian distribution includes all available Debian Pure Blends.[124] \"Debian Blend\" (without \"Pure\") is a term for a Debian-based distribution that strives to become part of mainstream Debian, and have its extra features included in future releases.[126] Logo[edit] The Debian \"swirl\" logo was designed by Raul Silva[127][128] in 1999 as part of a contest to replace the semi-official logo that had been used.[129] The winner of the contest received an @debian.org email address, and a set of Debian 2.1 install CDs for the architecture of their choice. There has been no official statement from the Debian project on the logo's meaning, but at the time of the logo's selection, it was suggested that the logo represented the magic smoke that made computers work.[130][131] One theory about the origin of the Debian logo is that Buzz Lightyear, the chosen character for the first named Debian release, has a swirl in his chin.[132][133] Stefano Zacchiroli also suggested that this swirl is the Debian one.[134] Archive areas[edit] The Debian Free Software Guidelines (DFSG) define the distinctive meaning of the word \"free\" as in \"free and open-source software\".[135] Packages which comply with these guidelines, usually under the GNU General Public License, Modified BSD License or Artistic License,[136] are included inside the main area;[108] otherwise, they are included inside the non-free and contrib areas. These last two areas are not distributed within the official installation media, but they can be adopted manually.[135] Non-free includes packages which do not comply with the DFSG,[137] such as documentation with invariant sections and proprietary software,[138][139] and legally questionable packages.[137] Contrib includes packages which do comply with the DFSG but fail other requirements. For example, they may depend on packages which are in non-free or requires such for building them.[137] Richard Stallman and the Free Software Foundation have criticized the Debian project for hosting the non-free repository and because the contrib and non-free areas are easily accessible,[140][141] an opinion echoed by some in Debian including the former project leader Wichert Akkerman.[142] The internal dissent in the Debian project regarding the non-free section has persisted,[143] but the last time it came to a vote in 2004, the majority decided to keep it.[144] Multimedia support[edit] Multimedia support has been problematic in Debian regarding codecs threatened by possible patent infringements, without sources or under too restrictive licenses,[145] and regarding technologies such as Adobe Flash.[74] Even though packages with problems related to their distribution could go into the non-free area, software such as libdvdcss is not hosted at Debian.[146] A notable third party repository exists, formerly named debian-multimedia.org,[147][148][149] providing software not present in Debian such as Windows codecs, libdvdcss and the Adobe Flash Player.[150] Even though this repository is maintained by Christian Marillat, a Debian developer, it is not part of the project and is not hosted on a Debian server. The repository provides packages already included in Debian, interfering with the official maintenance. Eventually, project leader Stefano Zacchiroli asked Marillat to either settle an agreement about the packaging or to stop using the \"Debian\" name.[151] Marillat chose the latter and renamed the repository to deb-multimedia.org. The repository was so popular that the switchover was announced by the official blog of the Debian project.[152] Hardware support[edit] Hardware requirements[edit] Hardware requirements are at least those of the kernel and the GNU toolsets.[153] Debian's recommended system requirements depend on the level of installation, which corresponds to increased numbers of installed components:[154] Type Minimum RAM size Recommended RAM size Minimum processor clock speed (IA-32) Hard drive capacity Non desktop 128\u00a0MB 512\u00a0MB 2\u00a0GB Desktop 256\u00a0MB 1\u00a0GB 1\u00a0GHz 10\u00a0GB The real minimum memory requirements depend on the architecture and may be much less than the numbers listed in this table. It is possible to install Debian with 60\u00a0MB of RAM for x86-64;[154] the installer will run in low memory mode and it is recommended to create a swap partition.[26] The installer for z\/Architecture requires about 20\u00a0MB of RAM, but relies on network hardware.[154][155] Similarly, disk space requirements, which depend on the packages to be installed, can be reduced by manually selecting the packages needed.[154] As of August 2014[update], no Pure Blend exists that would lower the hardware requirements easily.[156] It is possible to run graphical user interfaces on older or low-end systems, but the installation of window managers instead of desktop environments is recommended, as desktop environments are more resource-intensive. Requirements for individual software vary widely and must be considered, with those of the base operating environment.[154] Architecture ports[edit] HP 9000 C110 PA-RISC workstation booting Debian Lenny Official ports[edit] As of the Stretch release[update], the official ports are:[157] amd64: x86-64 architecture with 64-bit userland and supporting 32-bit software arm64: ARMv8-A architecture[158] armel: Little-endian ARM architecture (ARMv4T instruction set)[159] on various embedded systems (embedded application binary interface (EABI)) armhf: ARM hard-float architecture (ARMv7 instruction set) requiring hardware with a floating-point unit i386: IA-32 architecture with 32-bit userland, compatible with x86-64 machines[153] mips: Big-endian MIPS architecture mips64el: Little-endian 64 bit MIPS mipsel: Little-endian MIPS ppc64el: Little-endian PowerPC architecture supporting POWER7+ and POWER8 CPUs[158] s390x: z\/Architecture with 64-bit userland, intended to replace s390[160] Unofficial ports[edit] Unofficial ports are available as part of the unstable distribution:[157] alpha: DEC Alpha architecture hppa: HP PA-RISC architecture hurd-i386: GNU Hurd kernel on IA-32 architecture kfreebsd-amd64: Kernel of FreeBSD on x86-64 architecture kfreebsd-i386: Kernel of FreeBSD on IA-32 architecture m68k: Motorola 68k architecture on Amiga, Atari, Macintosh and various embedded VME systems powerpc: 32-bit PowerPC powerpcspe: PowerPCSPE architecture, incompatible with PowerPC ppc64: PowerPC64 architecture supporting 64-bit PowerPC CPUs with VMX sh4: Hitachi SuperH architecture sparc64: Sun SPARC architecture with 64-bit userland x32: x32 ABI userland for x86-64[161] Embedded systems[edit] Debian supports a variety of ARM-based NAS devices. The NSLU2 was supported by the installer in Debian 4.0 and 5.0,[162] and Martin Michlmayr is providing installation tarballs since version 6.0.[163] Other supported NAS devices are the Buffalo Kurobox Pro,[164] GLAN Tank, Thecus N2100[165] and QNAP Turbo Stations.[164] Devices based on the Kirkwood system on a chip (SoC) are supported too, such as the SheevaPlug plug computer and OpenRD products.[166] There are efforts to run Debian on mobile devices, but this is not a project goal yet since the Debian Linux kernel maintainers would not apply the needed patches.[167] Nevertheless, there are packages for resource-limited systems.[168] There are efforts to support Debian on wireless access points.[169] Debian is known to run on set-top boxes.[170] Work is ongoing to support the AM335x processor,[171] which is used in electronic point of service solutions.[172] Debian may be customized to run on cash machines.[173] BeagleBoard, a low-power open-source hardware single-board computer (made by Texas Instruments) has switched to Debian Linux preloaded on its Beaglebone Black board's flash. Support for communities[edit] Localization[edit] Several parts of Debian are translated into languages other than American English, including package descriptions, configuration messages, documentation and the website.[174] The level of software localization depends on the language, ranging from the highly supported German and French to the hardly translated Creek and Samoan.[175] The installer is available in 73 languages.[176] Virtual communities[edit] Debian provides packages made for virtual communities. The Facebook and Twitter application interfaces are available to programmers;[177][178] the Pidgin messaging client used a custom plugin for Facebook until the networking site added support for XMPP.[179] Debian 5.0 Lenny was the last release supporting Tencent QQ.[180][181] Communication with Skype is possible using software in the contrib area.[182] Policies[edit] Debian is known for its manifesto,[183][184] social contract,[184][185][186] and policies.[187] Debian's policies and team efforts focus on collaborative software development and testing processes.[4] As a result of its policies, a new major release tends to occur every two years with revision releases that fix security issues and important problems.[114][76] Organization[edit] General Resolution elect\u2193 override\u2193 Leader \u2193appoint Delegate \u2193decide Developer propose\u2191 Simplified organizational structure The Debian project is a volunteer organization with three foundational documents: The Debian Social Contract defines a set of basic principles by which the project and its developers conduct affairs.[135] The Debian Free Software Guidelines define the criteria for \"free software\" and thus what software is permissible in the distribution. These guidelines have been adopted as the basis of the Open Source Definition. Although this document can be considered separate, it formally is part of the Social Contract.[135] The Debian Constitution describes the organizational structure for formal decision-making within the project, and enumerates the powers and responsibilities of the Project Leader, the Secretary and other roles.[48] Historical population Year DD \u00b1% 1999 347 \u2014\u00a0\u00a0\u00a0\u00a0 2000 347 +0.0% 2001 ? \u2014\u00a0\u00a0\u00a0\u00a0 2002 939 \u2014\u00a0\u00a0\u00a0\u00a0 2003 831 \u221211.5% 2004 911 +9.6% 2005 965 +5.9% 2006 972 +0.7% 2007 1,036 +6.6% 2008 1,075 +3.8% 2009 1,013 \u22125.8% 2010 886 \u221212.5% 2011 911 +2.8% 2012 948 +4.1% 2013 988 +4.2% 2014 1,003 +1.5% 2015 1,033 +3.0% 2016 1,023 \u22121.0% Source: Debian Voting Information Debian developers are organized in a web of trust.[188] There are at present[update] about one thousand active Debian developers,[189][190] but it is possible to contribute to the project without being an official developer.[191] The project maintains official mailing lists and conferences for communication and coordination between developers.[108][192] For issues with single packages and other tasks,[193] a public bug tracking system is used by developers and end users. Internet Relay Chat channels (primarily on the Open and Free Technology Community (OFTC) and freenode networks) are also used for communication among developers[108] and to provide real time help.[194] Debian is supported by donations made to organizations authorized by the leader.[48] The largest supporter is Software in the Public Interest, the owner of the Debian trademark, manager of the monetary donations[195] and umbrella organization for various other community free software projects.[196] A Project Leader is elected once per year by the developers. The leader has special powers, but they are not absolute, and appoints delegates to perform specialized tasks. Delegates make decisions as they think is best, taking into account technical criteria and consensus. By way of a General Resolution, the developers may recall the leader, reverse a decision made by the leader or a delegate, amend foundational documents and make other binding decisions.[48] The voting method is based on the Schulze method (Cloneproof Schwartz Sequential Dropping).[49] Project leaders 1993\u00a0\u2014 \u2013 1994\u00a0\u2014 \u2013 1995\u00a0\u2014 \u2013 1996\u00a0\u2014 \u2013 1997\u00a0\u2014 \u2013 1998\u00a0\u2014 \u2013 1999\u00a0\u2014 \u2013 2000\u00a0\u2014 \u2013 2001\u00a0\u2014 \u2013 2002\u00a0\u2014 \u2013 2003\u00a0\u2014 \u2013 2004\u00a0\u2014 \u2013 2005\u00a0\u2014 \u2013 2006\u00a0\u2014 \u2013 2007\u00a0\u2014 \u2013 2008\u00a0\u2014 \u2013 2009\u00a0\u2014 \u2013 2010\u00a0\u2014 \u2013 2011\u00a0\u2014 \u2013 2012\u00a0\u2014 \u2013 2013\u00a0\u2014 \u2013 2014\u00a0\u2014 \u2013 2015\u00a0\u2014 \u2013 2016\u00a0\u2014 \u2013 2017\u00a0\u2014 \u2013 2018\u00a0\u2014 Ian Murdock Bruce Perens Ian Jackson Wichert Akkerman Ben Collins Bdale Garbee Martin Michlmayr Branden Robinson Anthony Towns Sam Hocevar Steve McIntyre Stefano Zacchiroli Lucas Nussbaum Neil McGovern Mehdi Dogguy Chris Lamb The Project Leader is the public face of Debian and defines its direction.[197][198] Project leadership is distributed occasionally. Branden Robinson was helped by the Project Scud, a team of developers that assisted the leader,[199] but there were concerns that such leadership would split Debian into two developer classes.[200] Anthony Towns created a supplemental position, Second In Charge (2IC), that shared some powers of the leader.[201] Steve McIntyre was 2IC and had a 2IC himself.[202] One important role in Debian's leadership is that of a release manager.[203] The release team sets goals for the next release, supervises the processes and decides when to release. The team is led by the next release managers and stable release managers.[204] Release assistants were introduced in 2003.[205] Developer recruitment, motivation, and resignation[edit] The Debian project has an influx of applicants wishing to become developers.[206] These applicants must undergo a vetting process which establishes their identity, motivation, understanding of the project's principles, and technical competence.[207] This process has become much harder throughout the years.[208] Debian developers join the project for many reasons. Some that have been cited include: Debian is their main operating system and they want to promote Debian[209] To improve the support for their favorite technology[210] They are involved with a Debian derivative[211] A desire to contribute back to the free-software community[212] To make their Debian maintenance work easier[213] Debian developers may resign their positions at any time or, when deemed necessary, they can be expelled.[48] Those who follow the retiring protocol are granted the \"emeritus\" status and they may regain their membership through a shortened new member process.[214] Development procedures[edit] upstream \u2193 packaging package \u2193 upload incoming \u2193 checks unstable \u2193 migration testing \u2193 freeze frozen \u2193 release stable Flowchart of the life cycle of a Debian package Each software package has a maintainer that may be either one person or a team of Debian developers and non-developer maintainers.[215][216] The maintainer keeps track of upstream releases, and ensures that the package coheres with the rest of the distribution and meets the standards of quality of Debian. Packages may include modifications introduced by Debian to achieve compliance with Debian Policy, even to fix non-Debian specific bugs, although coordination with upstream developers is advised.[214] The maintainer releases a new version by uploading the package to the \"incoming\" system, which verifies the integrity of the packages and their digital signatures. If the package is found to be valid, it is installed in the package archive into an area called the \"pool\" and distributed every day to hundreds of mirrors worldwide. The upload must be signed using OpenPGP-compatible software.[108] All Debian developers have individual cryptographic key pairs.[217] Developers are responsible for any package they upload even if the packaging was prepared by another contributor.[218] Initially, an accepted package is only available in the unstable branch.[108] For a package to become a candidate for the next release, it must migrate to the Testing branch by meeting the following:[219] It has been in unstable for a certain length of time that depends on the urgency of the changes. It does not have \"release-critical\" bugs, except for the ones already present in Testing. Release-critical bugs are those considered serious enough that they make the package unsuitable for release. There are no outdated versions in unstable for any release ports. The migration does not break any packages in Testing. Its dependencies can be satisfied by packages already in Testing or by packages being migrated at the same time. The migration is not blocked by a freeze. Thus, a release-critical bug in a new version of a shared library on which many packages depend may prevent those packages from entering Testing, because the updated library must meet the requirements too.[220] From the branch viewpoint, the migration process happens twice per day, rendering Testing in perpetual beta.[108] Periodically, the release team publishes guidelines to the developers in order to ready the release. A new release occurs after a freeze, when all important software is reasonably up-to-date in the Testing branch and any other significant issues are solved. At that time, all packages in the testing branch become the new stable branch.[108] Although freeze dates are time-based,[76] release dates are not, which are announced by the release managers a couple of weeks beforehand.[221] A version of a package can belong to more than one branch, usually testing and unstable. It is possible for a package to keep the same version between stable releases and be part of oldstable, stable, testing and unstable at the same time.[222] Each branch can be seen as a collection of pointers into the package \"pool\" mentioned above.[108] Security[edit] The Debian project handles security through public disclosure rather than through obscurity. Debian security advisories are compatible with the Common Vulnerabilities and Exposures dictionary, are usually coordinated with other free software vendors and are published the same day a vulnerability is made public.[223][224] There used to be a security audit project that focused on packages in the stable release looking for security bugs;[225] Steve Kemp, who started the project, retired in 2011 but resumed his activities and applied to rejoin in 2014.[226][227] The stable branch is supported by the Debian security team; oldstable is supported for one year.[110] Although Squeeze is not officially supported, Debian is coordinating an effort to provide long-term support (LTS) until February 2016, five years after the initial release, but only for the IA-32 and x86-64 platforms.[228] Testing is supported by the testing security team, but does not receive updates in as timely a manner as stable.[229] Unstable's security is left for the package maintainers.[110] The Debian project offers documentation and tools to harden a Debian installation both manually and automatically.[230] Security-Enhanced Linux and AppArmor support is available but disabled by default.[164] Debian provides an optional hardening wrapper, and does not harden all of its software by default using gcc features such as PIE and buffer overflow protection, unlike operating systems such as OpenBSD,[231] but tries to build as many packages as possible with hardening flags.[15] 2008 OpenSSL vulnerability[edit] In May 2008, it was revealed that a Debian developer discovered that the OpenSSL package distributed with Debian and derivatives such as Ubuntu, made a variety of security keys vulnerable to a random number generator attack, since only 32,767 different keys were generated.[232][233][234] The security weakness was caused by changes made in 2006 by another Debian developer in response to memory debugger warnings.[234][235] The complete resolution procedure was cumbersome because patching the security hole was not enough; it involved regenerating all affected keys and certificates.[236] Cost of development[edit] The cost of developing all of the packages included in Debian 5.0 Lenny (323 million lines of code) has been estimated to be about US$8 billion, using one method based on the COCOMO model.[10] As of 2016[update], Black Duck Open Hub estimates that the current codebase (74 million lines of code) would cost about US$1.4 billion to develop, using a different method based on the same model.[237][238] Derivatives[edit] Main article: Debian family Debian is one of the most popular Linux distributions, and many other distributions have been created from the Debian codebase, including Ubuntu and Knoppix.[239] As of 2016[update], DistroWatch lists 126 active Debian derivatives.[240] The Debian project provides its derivatives with guidelines for best practices and encourages derivatives to merge their work back into Debian.[241][242] See also[edit] Free software portal Open-source software portal Linux portal Computer Science portal Information technology portal Comparison of Linux distributions Computer technology for developing areas DCC Alliance Free culture movement Debian version history References[edit] Citations[edit] ^ \"Updated Debian 9: 9.0 released\". Debian News. Debian. 2017-06-17. Retrieved 2017-06-17.\u00a0 ^ \"Debian -- Ports\".\u00a0 ^ \"Debian -- Debian GNU\/Hurd\".\u00a0 ^ a b \"Chapter 1 \u2013 Definitions and overview\". The Debian GNU\/Linux FAQ. Debian. Retrieved 2008-05-12.\u00a0 ^ \"Debian -- About\". Debian. Debian. Retrieved 12 June 2017.\u00a0 ^ a b c \"ChangeLog\". ibiblio. Retrieved 2016-08-18.\u00a0 ^ \"Chapter 3 \u2013 Debian Releases\". A Brief History of Debian. Debian Documentation Team. Retrieved 10 February 2016.\u00a0 ^ \"A Brief History of Debian \u2013 A Detailed History\". Retrieved October 13, 2015.\u00a0 ^ \"debian-devel\". Debian.\u00a0 ^ a b Amor, J. J.; Robles, G.; Gonz\u00e1lez-Barahona, J. M.; Rivas, F.: Measuring Lenny: the size of Debian 5.0 ResearchGate ^ a b \"Debian \u2013 Packages\". Debian. Retrieved 2014-06-22.\u00a0 ^ \"Debian Moves to LibreOffice\". Debian. Retrieved 2012-03-05.\u00a0 ^ Noyes, Katherine (2012-01-11). \"Debian Linux Named Most Popular Distro for Web Servers\". PC World. Retrieved 2013-02-14.\u00a0 ^ \"Usage statistics and market share of Linux for websites\". W3Techs.com. Retrieved 2014-06-10.\u00a0 ^ a b c \"Chapter 2. What's new in Debian 7.0\". Release Notes for Debian 7.0 (wheezy), 32-bit PC. Debian. Retrieved 2014-05-27.\u00a0 ^ \"Debian GNU\/Hurd\". Debian. 2014-05-01. Retrieved 2014-06-10.\u00a0 ^ \"architecture requalification status for wheezy\". Debian. Retrieved 2014-08-15.\u00a0 ^ \"Virtual Package: linux-image\". Debian. Retrieved 2014-08-15.\u00a0 ^ \"Chapter 2 \u2013 Debian kernel source\". Debian Linux Kernel Handbook. Alioth. 2013-12-14. Retrieved 2014-08-15.\u00a0 ^ \"Unofficial non-free CDs including firmware packages\". Debian. Retrieved 2014-08-16.\u00a0 ^ \"Debian on CDs\". Debian. 2014-05-10. Retrieved 2014-05-27.\u00a0 ^ a b c \"Downloading Debian CD images with jigdo\". Debian. 2014-05-10. Retrieved 2014-05-26.\u00a0 ^ \"Downloading Debian CD\/DVD images via HTTP\/FTP\". Debian. 2014-05-17. Retrieved 2014-05-26.\u00a0 ^ \"Installing Debian GNU\/Linux via the Internet\". Debian. Retrieved 2008-12-11.\u00a0 ^ \"4.3. Preparing Files for USB Memory Stick Booting\". Debian GNU\/Linux Installation Guide. Debian. 2010. Retrieved 2014-05-27.\u00a0 ^ a b \"6.3. Using Individual Components\". Debian GNU\/Linux Installation Guide. Debian. 2013. Archived from the original on December 24, 2013. Retrieved 2014-05-30.\u00a0 ^ Watson, J.A. (2013-05-28). \"Debian Linux 7.0 Wheezy: Hands on\". ZDNet. Retrieved 2014-06-10. For the CD images, it is useful to know that Debian supports a number of different desktops, including GNOME, KDE, Xfce and LXDE, and there is a different 'disk 1' image for each of these desktops.\u00a0 ^ \"Chapter 1 \u2013 Introduction \u2013 What is the Debian Project?\". A Brief History of Debian. Debian. 2013-05-04. Retrieved 2014-06-22.\u00a0 ^ Murdock, Ian A. (1993-08-16). \"New release under development; suggestions requested\". Newsgroup:\u00a0comp.os.linux.development. Usenet:\u00a0CBusDD.MIK@unix.portal.com. Retrieved 2012-06-13.\u00a0 ^ Nixon, Robin (2010). Ubuntu: Up and Running. O'Reilly Media. p.\u00a03. ISBN\u00a0978-0-596-80484-8. Retrieved 2014-06-22.\u00a0 ^ Hillesley, Richard (2007-11-02). \"Debian and the grass roots of Linux\". IT Pro. Retrieved 2014-05-25.\u00a0 ^ Scheetz 1998, p.\u00a017. ^ \"Release-0.91\". ibiblio. 1994-01-31. Retrieved 2014-07-03.\u00a0 ^ Murdock, Ian A. (1994-01-06). \"The Debian Linux Manifesto\". ibiblio. Retrieved 2014-07-17.\u00a0 ^ a b c d \"Chapter 3 \u2013 Debian Releases\". A Brief History of Debian. Debian. 2013-05-04. Retrieved 2014-06-22.\u00a0 ^ Stallman, Richard (1996-04-28). \"The FSF is no longer sponsoring Debian\". Newsgroup:\u00a0comp.os.linux.misc. Usenet:\u00a0gnusenet199604280427.AAA00388@delasyd.gnu.ai.mit.edu. Retrieved 2014-08-22.\u00a0 ^ Scheetz 1998, p.\u00a018. ^ a b c d e f \"Chapter 4 \u2013 A Detailed History\". A Brief History of Debian. Debian. 2013-05-04. Retrieved 2014-08-01.\u00a0 ^ Krafft 2005, pp.\u00a031\u201332. ^ a b Hertzog 2013, p.\u00a09. ^ Perens, Bruce (1997-07-05). \"Debian's 'Social Contract' with the Free Software Community\". debian-announce (Mailing list). Debian. Retrieved 2014-08-01.\u00a0 ^ \"It's Time to Talk About Free Software Again\".\u00a0 ^ a b Scheetz 1998, p.\u00a019. ^ Perens, Bruce (2000-11-01). \"Building Tiny Linux Systems with Busybox\u2013Part I\". Linux Journal. Retrieved 2014-06-05.\u00a0 ^ Perens, Bruce (1998-03-18). \"I am leaving Debian\". debian-user (Mailing list). Debian. Retrieved 2014-06-05.\u00a0 ^ Perens, Bruce (1997-12-01). \"Ian Jackson is the next Debian Project Leader\". debian-announce (Mailing list). Debian. Retrieved 2014-08-02.\u00a0 ^ Grobman, Igor (1998-07-14). \"debian-hurd@lists.debian.org is up!\". debian-hurd (Mailing list). Debian. Retrieved 2014-08-02.\u00a0 ^ a b c d e \"Constitution for the Debian Project (v1.4)\". Debian. Retrieved 2014-02-25.\u00a0 ^ a b \"Debian Voting Information\". Debian. 2014-02-18. Retrieved 2014-06-03.\u00a0 ^ Coleman 2013, p.\u00a0141. ^ Akkerman, Wichert (1999-10-17). \"New maintainer proposal\". debian-project (Mailing list). Debian. Retrieved 2014-08-02.\u00a0 ^ Lohner, Nils (1999-11-09). \"New Linux distribution brings Debian to the desktop.\". debian-commercial (Mailing list). Debian. Retrieved 2014-08-02.\u00a0 ^ \"Debian GNU\/Linux 2.2, the 'Joel \"Espy\" Klecker' release, is officially released\". Debian. 2000-08-15. Retrieved 2011-07-27.\u00a0 ^ Laronde, Thierry (2000-05-15). \"First Debian Conference\u00a0: the program\". debian-devel-announce (Mailing list). Debian. Retrieved 2014-08-02.\u00a0 ^ Lemos, Robert (2001-05-10). \"HP settles on Debian Linux\". CNET News. Retrieved 2014-08-19.\u00a0 ^ Krafft 2005, p.\u00a033. ^ Lettice, John (2002-07-23). \"Debian GNU\/Linux 3.0 released\". The Register. Retrieved 2014-08-19.\u00a0 ^ LeMay, Renai (2005-03-18). \"Debian leaders: Faster release cycle required\". ZDNet. Retrieved 2014-08-03.\u00a0 ^ \"Ubuntu vs. Debian, reprise\". Ian Murdock. 2005-04-20. Retrieved 2014-06-05.\u00a0 ^ Orlowski, Andrew (2003-12-02). \"Hackers used unpatched server to breach Debian\". The Register. Retrieved 2014-08-03.\u00a0 ^ Coleman 2013, p.\u00a0150. ^ Orlowski, Andrew (2005-03-14). \"Debian drops mainframe, Sparc development\". The Register. Retrieved 2014-08-03.\u00a0 ^ Verhelst, Wouter (2005-08-21). \"Results of the meeting in Helsinki about the Vancouver proposal\". debian-devel-announce (Mailing list). Debian. Retrieved 2014-08-03.\u00a0 ^ Langasek, Steve (2005-03-14). \"Bits (Nybbles?) from the Vancouver release team meeting\". debian-devel-announce (Mailing list). Debian. Retrieved 2014-08-03.\u00a0 ^ Coleman 2013, pp.\u00a0153\u2013154. ^ Jarno, Aur\u00e9lien (2005-03-14). \"Re: Bits (Nybbles?) from the Vancouver release team meeting\". debian-devel (Mailing list). Debian. Retrieved 2014-08-03.\u00a0 ^ Blache, Julien (2005-03-14). \"Re: Bits (Nybbles?) from the Vancouver release team meeting\". debian-devel (Mailing list). Debian. Retrieved 2014-08-03.\u00a0 ^ \"Chapter 2 \u2013 What's new in Debian GNU\/Linux 3.1\". Release Notes for Debian GNU\/Linux 3.1 (`sarge'), Intel x86. Debian. 2006-09-18. Retrieved 2010-08-05.\u00a0 ^ Hoover, Lisa (2006-10-10). \"Behind the Debian and Mozilla dispute over use of Firefox\". Linux.com. Retrieved 2009-02-09.\u00a0 ^ Sanchez, Roberto C. (2006-10-15). \"Re: Will IceWeasel be based on a fork or on vanilla FireFox?\". debian-devel (Mailing list). Debian. Retrieved 2014-08-03.\u00a0 ^ Hoffman, Chris (2016-02-24). \"'Iceweasel' will be renamed 'Firefox' as relations between Debian and Mozilla thaw\". PC World. Retrieved 2016-03-27.\u00a0 ^ \"Press Information\". Dunc-Tank. 2006-09-19. Archived from the original on 2006-10-10. Retrieved 2014-08-24.\u00a0 ^ Vaughan-Nichols, Steven J. (2006-12-18). \"Disgruntled Debian Developers Delay Etch\". eWeek. Retrieved 2014-08-24.\u00a0 ^ a b \"Debian GNU\/Linux 5.0 released\". Debian. 2009-02-14. Retrieved 2009-02-15.\u00a0 ^ \"Appendix C. Lenny dedicated to Thiemo Seufer\". Release Notes for Debian GNU\/Linux 5.0 (lenny), Intel x86. Debian. 2009-02-14. Retrieved 2014-05-25.\u00a0 ^ a b c \"Debian decides to adopt time-based release freezes\". Debian. 2009-07-29. Retrieved 2009-09-12.\u00a0 ^ \"Debian GNU\/Linux 6.0 'Squeeze' release goals\". Debian. 2009-07-30. Retrieved 2009-12-01.\u00a0 ^ a b \"Backports service becoming official\". Debian. 2010-09-05. Retrieved 2014-06-17.\u00a0 ^ a b \"Debian 6.0 'Squeeze' released\". Debian. 2011-02-06. Retrieved 2011-02-06.\u00a0 ^ \"Debian 7.0 'Wheezy' released\". Debian. 2013-05-04. Retrieved 2013-05-05.\u00a0 ^ \"Debian 8 'Jessie' Released\". Debian. 2015-04-25. Retrieved 2015-10-27.\u00a0 ^ \"Debian 9.0 'Stretch' released\". Debian. 2017-06-17. Retrieved 2017-06-25.\u00a0 ^ \"Unstable packages' upgrade announcements\". Debian. Retrieved 2014-11-19.\u00a0 ^ \"Awards\". Debian. Retrieved 2008-11-02.\u00a0 ^ \"2011 LinuxQuestions.org Members Choice Award Winners\". LinuxQuestions.org. 2012-02-09. Retrieved 2014-06-06.\u00a0 ^ \"The best Linux distro of 2011!\". TuxRadar. 2011-08-04. Retrieved 2014-06-06.\u00a0 ^ \"Best of the Net Awards, October 1998 \u2013 Focus On Linux\". The Mining Company. 1999-05-04. Archived from the original on 1999-05-04. Retrieved 2014-06-06.\u00a0 ^ Zarkos, Stephen (2015-12-02). \"Announcing availability of Debian GNU\/Linux as an endorsed distribution in Azure Marketplace\". azure.microsoft.com. Microsoft. Retrieved 2016-04-10.\u00a0 ^ Bhartiya, Swapnil (2015-12-02). \"Microsoft brings Debian GNU\/Linux to Azure cloud\". CIO.com. IDG Enterprise. Retrieved 2016-04-10.\u00a0 ^ \"Package: mate-desktop (1.8.1+dfsg1-1~bpo70+1)\". Debian. Retrieved 2014-07-06.\u00a0 ^ \"Debian \u2013 Details of package cinnamon in jessie\". packages.debian.org. Retrieved 2015-09-06.\u00a0 ^ \"Virtual Package: x-window-manager\". Debian. Retrieved 2014-05-27.\u00a0 ^ Larabel, Michael (2012-08-08). \"Debian Now Defaults To Xfce Desktop\". Phoronix. Retrieved 2012-08-27.\u00a0 ^ Stahie, Silviu (2013-11-05). \"Debian 8.0 'Jessie' Ditches GNOME and Adopts Xfce\". Softpedia. Retrieved 2014-11-22.\u00a0 ^ Hess, Joey (2014-09-19). \"switch default desktop to GNOME\". Alioth. Retrieved 2014-11-03.\u00a0 ^ \"Live install images\". Debian. 2013-10-27. Retrieved 2013-12-07.\u00a0 ^ \"Debian Live Manual\". Debian. 2013. Archived from the original on February 14, 2014. Retrieved 2014-07-06.\u00a0 ^ a b c d \"Chapter 2. Debian package management\". Debian Reference. Debian. 2013-12-03. Retrieved 2014-05-29.\u00a0 ^ \"Package: dpkg (1.16.15) [security] [essential]\". Debian. Retrieved 2014-06-18.\u00a0 ^ \"dpkg\". Debian. 2012-06-05. Retrieved 2014-06-18.\u00a0 ^ \"gdebi\". Launchpad. Retrieved 2014-06-19.\u00a0 ^ Thomas, Keir (2009-04-13). \"10 Expert Ubuntu Tricks\". PC World. Retrieved 2014-06-19.\u00a0 ^ \"Package: software-center (5.1.2debian3.1)\". Debian. Retrieved 2014-06-19.\u00a0 ^ \"Package: synaptic (0.75.13)\". Debian. Retrieved 2014-06-19.\u00a0 ^ \"Package: apper (0.7.2-5)\". Debian. Retrieved 2014-06-19.\u00a0 ^ a b \"Debian Releases\". Debian. Retrieved 2014-06-22.\u00a0 ^ Vaughan-Nichols, Steven J. (2013-05-05). \"The new Debian Linux 7.0 is now available\". ZDNet. Retrieved 2014-07-08.\u00a0 ^ a b c d e f g h i j k l m n \"Chapter 4. Resources for Debian Developers\". Debian Developer's Reference. Debian. Retrieved 2008-10-31.\u00a0 ^ \"Frequently Asked Questions\". Debian. Retrieved 2014-07-09.\u00a0 ^ a b c \"Debian security FAQ\". Debian. 2007-02-28. Retrieved 2008-10-21.\u00a0 ^ \"snapshot.debian.org\". Debian. Retrieved 2014-07-09.\u00a0 ^ \"ChangeLog\". stretch. Debian. 2017-06-17. Retrieved 2017-06-25.\u00a0 ^ \"ChangeLog\". jessie. Debian. 2017-05-06. Retrieved 2017-06-17.\u00a0 ^ a b Hertzog, Rapha\u00ebl (2013). The Debian Administrator's Handbook. Freexian. ISBN\u00a0979-10-91414-03-6. Retrieved 2014-06-22.\u00a0 ^ \"Release\". etch. Debian. 2010-05-22. Retrieved 2014-06-05.\u00a0 ^ Schulze, Martin (1998-08-24). \"Naming of new 2.0 release\". debian-devel (Mailing list). Debian. Retrieved 2014-07-26.\u00a0 ^ \"GNU Coding Standards: Releases\". GNU. 2014-05-13. Retrieved 2014-05-25. You should identify each release with a pair of version numbers, a major version and a minor. We have no objection to using more than two numbers, but it is very unlikely that you really need them.\u00a0 ^ Brockschmidt, Marc (2009-02-15). \"Debian squeeze waiting for development\". debian-devel-announce (Mailing list). Debian. Retrieved 2009-02-15.\u00a0 ^ \"ChangeLog\". wheezy. Debian. 2016-06-04. Retrieved 2016-12-14.\u00a0 ^ \"Updated Debian 7: 7.7 released\". Debian. 2014-10-18. Retrieved 2014-10-20.\u00a0 ^ Wiltshire, Jonathan (2014-11-09). \"Release Team Sprint Results\". lists.debian.org. Debian. Retrieved 2017-01-10.\u00a0 ^ Wiltshire, Jonathan (2016-07-06). \"Bits from the release team: Winter is Coming (but not to South Africa)\". lists.debian.org. Debian. Retrieved 2017-04-07.\u00a0 ^ \"Chapter 6 \u2013 The Debian FTP archives\". The Debian GNU\/Linux FAQ. Debian. 2013-06-02. Retrieved 2013-06-03.\u00a0 ^ a b \"Chapter 2. What are Debian Pure Blends?\". Debian Pure Blends. Debian. Retrieved 2014-05-27.\u00a0 ^ \"Debian Jr. Project\". Debian. 2014-04-30. Retrieved 2014-06-16.\u00a0 ^ Armstrong, Ben (2011-07-06). \"Re: Difference between blends and remastered systems\". debian-blends (Mailing list). Debian. Retrieved 2014-06-16.\u00a0 ^ \"GNU\/art\".\u00a0 ^ \"Logo credit\".\u00a0 ^ \"Debian Logo Contest\".\u00a0 ^ \"[PROPOSED] Swap the \"open\" and \"official\" versions of the new logo\".\u00a0 ^ \"Debian Chooses Logo\".\u00a0 ^ Krafft 2005, p.\u00a066. ^ Toy Story (Billboard). Pixar. Retrieved 2014-08-20.\u00a0 ^ \"Debian: 17 ans de logiciel libre, 'do-ocracy' et d\u00e9mocratie\" (PDF). Stefano Zacchiroli. 2010-12-04. p.\u00a06. Retrieved 2014-10-21.\u00a0 ^ a b c d \"Debian Social Contract\". Debian. Retrieved 2013-06-17.\u00a0 ^ \"License information\". Debian. Retrieved 2009-02-28.\u00a0 ^ a b c \"Chapter 2 \u2013 The Debian Archive\". Debian Policy Manual. Debian. 2013-10-28. Retrieved 2014-07-09.\u00a0 ^ \"General Resolution: Why the GNU Free Documentation License is not suitable for Debian main\". Debian. 2006. Retrieved 2014-07-02.\u00a0 ^ \"Package: fglrx-driver (1:12-6+point-3) [non-free]\". Debian. Retrieved 2014-07-02.\u00a0 ^ \"Explaining Why We Don't Endorse Other Systems\". GNU. Retrieved 2014-06-19.\u00a0 ^ Stallman, Richard (2007-10-06). \"Re: Debian vs gNewSense \u2013 FS criteria\". gnuherds-app-dev (Mailing list). lists.nongnu.org. Retrieved 2014-07-09. What makes Debian unacceptable is that its inclusion of non-free software is not a mistake.\u00a0 ^ Akkerman, Wichert (1999-06-21). \"Moving contrib and non-free of master.debian.org\". debian-vote (Mailing list). Debian. Retrieved 2014-08-04.\u00a0 ^ Wise, Paul (2014-03-22). \"non-free?\". debian-vote (Mailing list). Debian. Retrieved 2014-08-16.\u00a0 ^ \"General Resolution: Status of the non-free section\". Debian. 2004. Retrieved 2009-09-28.\u00a0 ^ Mejia, Andres (2012-03-18). \"Diff for 'MultimediaCodecs'\". Debian Wiki. Retrieved 2014-10-16.\u00a0 ^ \"RFP: libdvdcss \u2013 Library to read scrambled DVDs\". Debian BTS. 2002-07-25. Retrieved 2014-07-09.\u00a0 ^ Gilbertson, Scott (2009-02-16). \"'Lenny': Debian for the masses?\". The Register. Retrieved 2014-07-13.\u00a0 ^ Granneman, Scott (2008-02-06). \"Cool APT Repositories for Ubuntu and Debian\". Linux Magazine. Retrieved 2014-07-13.\u00a0 ^ Nestor, Marius (2012-03-19). \"Window Maker Live CD 2012-03-18 Available for Download\". Softpedia. Retrieved 2014-11-22.\u00a0 ^ \"Packages\". deb-multimedia.org. Retrieved 2014-07-13.\u00a0 ^ Zacchiroli, Stefano (2012-05-05). \"on package duplication between Debian and debian-multimedia\". pkg-multimedia-maintainers (Mailing list). Alioth. Retrieved 2014-07-13.\u00a0 ^ \"Remove unofficial debian-multimedia.org repository from your sources\". Debian. 2013-06-14. Retrieved 2014-07-13.\u00a0 ^ a b \"2.1. Supported Hardware\". Debian GNU\/Linux Installation Guide. Debian. 2015. Retrieved 2017-01-20.\u00a0 ^ a b c d e \"3.4. Meeting Minimum Hardware Requirements\". Debian GNU\/Linux Installation Guide. Debian. 2015. Retrieved 2017-01-20.\u00a0 ^ \"5.1. Booting the Installer on S\/390\". Debian GNU\/Linux Installation Guide. Debian. 2015. Retrieved 2017-01-20.\u00a0 ^ \"Chapter 4. Existing Debian Pure Blends\". Debian Pure Blends. Debian. 2013-06-19. Retrieved 2014-06-19.\u00a0 ^ a b \"Buildd status for base-files\". Debian. Retrieved 2017-06-25.\u00a0 ^ a b Wookey (2014-08-27). \"Two new architectures bootstrapping in unstable \u2013 MBF coming soon\". debian-devel-announce (Mailing list). Debian. Retrieved 2014-09-01.\u00a0 ^ Wookey (2010-01-23). \"Re: Identification of ARM chips\". debian-embedded (Mailing list). Debian. Retrieved 2014-10-16.\u00a0 ^ \"Chapter 2. What's new in Debian 7.0\". Release Notes for Debian 7.0 (wheezy), S\/390. 2014-11-09. Retrieved 2015-01-28.\u00a0 ^ Schepler, Daniel (2012-11-20). \"X32Port\". Debian Wiki. Retrieved 2014-10-17.\u00a0 ^ Brown, Silas. \"Upgrading your Slug LG #161\". Linux Gazette. Retrieved 2011-07-27.\u00a0 ^ \"Installing Debian on NSLU2\". Martin Michlmayr. 2011-02-24. Retrieved 2011-07-27.\u00a0 ^ a b c \"Chapter 2. What's new in Debian GNU\/Linux 5.0\". Release Notes for Debian GNU\/Linux 5.0 (lenny), ARM. Debian. Retrieved 2011-07-27.\u00a0 ^ \"Chapter 2 \u2013 What's new in Debian GNU\/Linux 4.0\". Release Notes for Debian GNU\/Linux 4.0 ('etch'), ARM. Debian. 2007-08-16. Retrieved 2011-07-27.\u00a0 ^ \"Chapter 2. What's new in Debian GNU\/Linux 6.0\". Release Notes for Debian GNU\/Linux 6.0 (squeeze), ARM EABI. Debian. Retrieved 2011-07-27.\u00a0 ^ \"Debian Project News \u2013 December 10th, 2012\". Debian. 2012-12-10. Retrieved 2014-06-17.\u00a0 ^ \"Package: matchbox (1:5)\". Debian. Retrieved 2014-06-17.\u00a0 ^ Hess, Joey (2005-09-23). \"DebianWRT\". Debian Wiki. Retrieved 2014-10-17.\u00a0 ^ \"Debian Project News \u2013 December 2nd, 2013\". Debian. 2013-12-02. Retrieved 2014-06-17.\u00a0 ^ Liu, Ying-Chun (2012-01-27). \"InstallingDebianOn TI BeagleBone\". Debian Wiki. Retrieved 2014-10-17.\u00a0 ^ \"Enterprise Tablet Reference Design Kit\". Texas Instruments. Archived from the original on June 12, 2014. Retrieved 2014-06-17.\u00a0 ^ \"Thieves Planted Malware to Hack ATMs\". Brian Krebs. 2014-05-30. Retrieved 2014-06-17.\u00a0 ^ \"Central Debian translation statistics\". Debian. Retrieved 2014-07-02.\u00a0 ^ \"Status of the l10n in Debian \u2014 ranking PO files between languages\". Debian. Retrieved 2014-07-02.\u00a0 ^ \"Debian Installer 7.0 RC3 release\". Debian. 2013-05-02. Retrieved 2013-05-02.\u00a0 ^ \"Debian \u2013 Package Search Results \u2013 facebook\". Debian. Retrieved 2014-11-17.\u00a0 ^ \"Debian \u2013 Package Search Results \u2013 twitter\". Debian. Retrieved 2014-11-17.\u00a0 ^ \"RM: pidgin-facebookchat \u2013 RoQA; unneeded\". Debian BTS. 2013-05-08. Retrieved 2014-11-17.\u00a0 ^ \"libpurple0_2.4.3-4lenny8_i386.deb\". Debian. 2010-11-07. Retrieved 2014-11-17.\u00a0 ^ \"File list of package libpurple0 in squeeze of architecture i386\". Debian. Retrieved 2014-11-17.\u00a0 ^ \"Debian \u2013 Package Search Results \u2013 skype\". Debian. Retrieved 2014-11-17.\u00a0 ^ Murdock, Ian (1994-06-01). \"A Brief History of Debian Appendix A \u2013 The Debian Manifesto\". Debian. Retrieved 2015-12-26.\u00a0 ^ a b Gilbertson, Scott (2013-08-13). \"No distro diva drama here: Penguinista favourite Debian turns 20\". The Register. Retrieved 2014-05-30.\u00a0 ^ Paul, Ryan (2008-12-30). \"Why Ubuntu users should care about Debian\". Ars Technica. Retrieved 2014-05-30.\u00a0 ^ Brockmeier, Joe (2011-02-07). \"Why Debian matters more than ever\". Network World. Retrieved 2014-05-30.\u00a0 ^ Brockmeier, Joe (2009-05-19). \"Trademarks: Open Source Friendly (TM)\". PC World. Retrieved 2014-05-30.\u00a0 ^ Coleman 2013, p.\u00a0143. ^ \"Debian New Member \u2013 Status DD, upl.\". Debian. Retrieved 2014-06-21.\u00a0 ^ \"Debian New Member \u2013 Status DD, non-upl.\". Debian. Retrieved 2014-06-21.\u00a0 ^ \"How can you help Debian?\". Debian. 2014-04-30. Retrieved 2014-06-03.\u00a0 ^ \"Index of \/pub\/debian-meetings\". Debian. Retrieved 2014-07-16.\u00a0 ^ \"Debian bug tracking system pseudo-packages\". Debian. 2013-12-08. Retrieved 2014-06-03.\u00a0 ^ \"Support\". Debian. 2014-04-30. Retrieved 2014-06-03.\u00a0 ^ \"Donations to Software in the Public Interest\". Debian. 2014-05-10. Retrieved 2014-06-03.\u00a0 ^ \"SPI Associated Projects\". Software in the Public Interest. 2014-07-14. Retrieved 2014-07-16.\u00a0 ^ \"Debian Project Leader\". Debian. Retrieved 2014-06-21.\u00a0 ^ \"Chapter 2 \u2013 Leadership\". A Brief History of Debian. Debian. 2013-05-04. Retrieved 2014-07-05.\u00a0 ^ van Wolffelaar, Jeroen (2005-03-05). \"Announcing project scud\". debian-project (Mailing list). Debian. Retrieved 2014-07-17.\u00a0 ^ Krafft 2005, p.\u00a034. ^ Towns, Anthony (2006-04-23). \"Bits from the DPL\". debian-devel-announce (Mailing list). Debian. Retrieved 2014-07-17.\u00a0 ^ \"Steve McIntyre's DPL platform, 2009\". Debian. Retrieved 2014-07-17.\u00a0 ^ O'Mahony, Siobh\u00e1n; Ferraro, Fabrizio (2007). \"The Emergence of Governance in an Open Source Community\" (PDF). University of Alberta School of Business. p.\u00a030. Archived from the original (PDF) on 2008-05-29. Retrieved 2008-11-01.\u00a0 ^ \"The Debian organization web page\". Debian. Retrieved 2008-11-01.\u00a0 ^ Towns, Anthony (2003-03-08). \"Bits from the RM: Help Wanted, Apply Within\". debian-devel-announce (Mailing list). Debian. Retrieved 2014-07-17.\u00a0 ^ \"Debian New Member \u2013 Statistics\". Debian. Archived from the original on July 6, 2014. Retrieved 2014-06-03.\u00a0 ^ \"Debian New Maintainers\". Debian. Retrieved 2008-10-31.\u00a0 ^ Hertzog 2013, p.\u00a013. ^ Berg, Christoph (2009-01-10). \"AM report for Alexander GQ Gerasiov\". debian-newmaint (Mailing list). Debian. Retrieved 2014-07-18.\u00a0 ^ Joeris, Steffen (2010-01-03). \"AM report for Jakub Wilk [...]\". debian-newmaint (Mailing list). Debian. Retrieved 2014-07-18.\u00a0 ^ Wolf, Gunnar (2011-01-13). \"AM report for Kamal Mostafa\". debian-newmaint (Mailing list). Debian. Retrieved 2014-07-18.\u00a0 ^ Faraone, Luke (2012-01-01). \"AM report for vicho\". debian-newmaint (Mailing list). Debian. Retrieved 2014-07-18.\u00a0 ^ Wiltshire, Jonathan (2013-01-06). \"AM report for Manuel A. Fernandez Montecelo\". debian-newmaint (Mailing list). Debian. Retrieved 2014-07-18.\u00a0 ^ a b \"Chapter 3. Debian Developer's Duties\". Debian Developer's Reference. Debian. Retrieved 2014-07-19.\u00a0 ^ \"Chapter 3 \u2013 Binary packages\". Debian Policy Manual. Debian. 2013-10-28. Retrieved 2014-07-19.\u00a0 ^ \"General Resolution: Endorse the concept of Debian Maintainers\". Debian. 2007. Retrieved 2008-12-13.\u00a0 ^ \"Chapter 2. Applying to Become a Maintainer\". Debian Developer's Reference. Debian. Retrieved 2010-10-09.\u00a0 ^ Costela, Leo (2010-02-12). \"DebianMentorsFaq\". Debian Wiki. Retrieved 2014-10-17.\u00a0 ^ \"Chapter 5. Managing Packages\". Debian Developer's Reference. Debian. Retrieved 2008-10-31.\u00a0 ^ \"Debian 'testing' distribution\". Debian. Retrieved 2008-11-24.\u00a0 ^ McGovern, Neil (2013-04-18). \"FINAL release update\". debian-devel-announce (Mailing list). Debian. Retrieved 2014-07-20.\u00a0 ^ \"Debian \u2013 Package Search Results \u2013 dict-bouvier\". Debian. Retrieved 2014-06-04.\u00a0 ^ \"Security Information\". Debian. Retrieved 2008-12-13.\u00a0 ^ \"Organizations Participating\". MITRE. 2014-04-16. Retrieved 2014-06-05.\u00a0 ^ \"Debian Security Audit Project\". Debian. 2014-03-15. Retrieved 2014-06-04.\u00a0 ^ \"Advisories\". Steve Kemp. Retrieved 2014-08-18.\u00a0 ^ \"Steve Kemp\". Debian. Retrieved 2014-08-18.\u00a0 ^ Larabel, Michael (2014-04-18). \"Debian To Maintain 6.0 Squeeze As An LTS Release\". Phoronix. Retrieved 2014-07-21.\u00a0 ^ \"Debian testing security team\". Debian. Archived from the original on October 5, 2008. Retrieved 2008-10-31.\u00a0 ^ \"Securing Debian Manual\". Debian. Retrieved 2008-12-13.\u00a0 ^ \"Debian Secure by Default\". Debian: SbD. Retrieved 2011-01-31.\u00a0 ^ \"DSA-1571-1 openssl: predictable random number generator\". Debian. 2008-05-13. Retrieved 2008-10-31.\u00a0 ^ \"CVE-2008-0166\". MITRE. Retrieved 2014-07-21.\u00a0 ^ a b Garfinkel, Simson (2008-05-20). \"Alarming Open-Source Security Holes\". MIT Technology Review. Retrieved 2014-07-21.\u00a0 ^ \"valgrind-clean the RNG\". Debian BTS. 2006-04-19. Retrieved 2014-06-21.\u00a0 ^ \"When Private Keys are Public: Results from the 2008 Debian OpenSSL Vulnerability\" (PDF). University of California, San Diego. 2009. Retrieved 2014-06-22.\u00a0 ^ \"Estimated Cost\". Black Duck Open Hub. Retrieved 2016-01-06.\u00a0 ^ \"Package: ohcount (3.0.0-8 and others)\". Debian. Retrieved 2016-01-06.\u00a0 ^ Vaughan-Nichols, Steven J. (2009-12-16). \"The Five Distros That Changed Linux\". Linux Magazine. Retrieved 2013-02-14.\u00a0 ^ \"Based on Debian, status active\". DistroWatch. Retrieved 2016-01-06.\u00a0 ^ Halchenko, Yaroslav (2010-12-21). \"Derivatives Guidelines\". Debian Wiki. Retrieved 2014-10-17.\u00a0 ^ Hertzog 2013, p.\u00a0429. Sources[edit] Books Coleman, E. Gabriella (2013). \"Two Ethical Moments in Debian\". Coding Freedom: The Ethics and Aesthetics of Hacking (PDF). Princeton University Press. ISBN\u00a0978-0-691-14461-0. Retrieved 2014-07-31.\u00a0 Hertzog, Rapha\u00ebl (2013). The Debian Administrator's Handbook. Lulu. ISBN\u00a0979-10-91414-02-9. Retrieved 2014-06-22.\u00a0 Krafft, Martin F. (2005). The Debian System. U.S.A.: No Starch Press. ISBN\u00a01-59327-069-0. Retrieved 2014-08-04.\u00a0 Scheetz, Dale (1998). The Debian Linux User's Guide. Linux Press. ISBN\u00a00-9659575-1-9.\u00a0 Webpage Wallen, Jack (2014). \"Why aren't more people using Debian?\". TechRepublic. Retrieved 2015-04-19.\u00a0 External links[edit] Find more aboutDebianat Wikipedia's sister projects Media from Commons Learning resources from Wikiversity Data from Wikidata Official website Debian wiki Debian at DMOZ Debian at DistroWatch v t e Debian Software in the Public Interest General DebConf Debian Free Software Guidelines Debian Social Contract Project leaders Releases People Bdale Garbee John Goerzen Benjamin Mako Hill Sam Hocevar Ian Jackson Martin Michlmayr Ian Murdock Jonathan Oxer Bruce Perens Scott James Remnant Stefano Zacchiroli Derivatives Kernels Debian GNU\/Hurd Debian GNU\/kFreeBSD Debian Pure Blend Forks Devuan Linux Mint Debian Edition Ubuntu (operating system) Software APT aptitude Debbugs debconf Debian-Installer dpkg (deb) win32-loader Miscellaneous Mozilla software rebranded by Debian Category Commons Wikiversity v t e Linux distributions Arch Antergos ArchBang Chakra Manjaro Linux Parabola GNU\/Linux-libre Debian antiX Astra Linux Bharat Operating System Solutions Elive Devuan gNewSense HandyLinux Kali Linux Knoppix SparkyLinux SteamOS Tails Ubuntu Official: Edubuntu Kubuntu Lubuntu Ubuntu GNOME Ubuntu Kylin Ubuntu MATE Ubuntu Budgie Xubuntu Other: Bodhi Linux elementary OS Linux Mint Trisquel Asturix Fedora BLAG Linux and GNU Korora Red Hat CentOS ClearOS Linpus Linux Oracle Linux Qubes OS Rocks Cluster Distribution Scientific Linux SME Server Gentoo Calculate Linux Chromium OS Chrome OS Funtoo Linux Sabayon Linux Other Frugalware Linux Mandriva Linux Mageia OpenMandriva Lx ROSA Linux openSUSE SUSE Linux Enterprise Server PCLinuxOS Puppy Linux Slackware Porteus Salix OS VectorLinux Source Mage Solus Void Linux Category Comparison List Commons v t e Software in the Public Interest People Bdale Garbee (President) Projects 0 A.D. Arch Linux Debian Drizzle Drupal FFmpeg Fluxbox freedesktop.org FreedomBox Gallery Project GNU TeXmacs GNUstep Jenkins LibreOffice MinGW Open and Free Technology Community Open Bioinformatics Foundation Open64 OpenEmbedded OpenVAS OpenWrt PostgreSQL Privoxy SproutCore X.Org Foundation YafaRay Authority control LCCN: sh2010011599 GND: 4543287-9 BNF: cb14584065s (data) Retrieved from \"https:\/\/en.wikipedia.org\/w\/index.php?title=Debian&oldid=791142224\" Categories: 1993 softwareARM Linux distributionsDebianFree software culture and documentsIA-32 Linux distributionsOperating system distributions bootable from read-only mediaPower Linux distributionsPowerPC Linux distributionsX86-64 Linux distributionsHidden categories: Good articlesUse mdy dates from March 2014Articles containing potentially dated statements from 2017All articles containing potentially dated statementsArticles containing potentially dated statements from June 2017Articles containing potentially dated statements from August 2014Articles containing potentially dated statements from April 2015Articles containing potentially dated statements from 2014Articles containing potentially dated statements from 2016Articles with DMOZ linksWikipedia articles with LCCN identifiersWikipedia articles with GND identifiersWikipedia articles with BNF identifiers Navigation menu Personal tools Not logged inTalkContributionsCreate accountLog in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store Interaction HelpAbout WikipediaCommunity portalRecent changesContact page Tools What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page Print\/export Create a bookDownload as PDFPrintable version In other projects Wikimedia Commons Languages AfrikaansAlemannisch\u0627\u0644\u0639\u0631\u0628\u064a\u0629AsturianuAz\u0259rbaycanca\u09ac\u09be\u0982\u09b2\u09beBasa Banyumasan\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430)\u200e\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438BoarischBosanskiBrezhonegCatal\u00e0\u010ce\u0161tinaDanskDeutschEesti\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03acEspa\u00f1olEsperantoEuskara\u0641\u0627\u0631\u0633\u06ccFran\u00e7aisGaeilgeGalego\u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0\ud55c\uad6d\uc5b4\u0939\u093f\u0928\u094d\u0926\u0940HornjoserbsceHrvatskiBahasa IndonesiaInterlingua\u0418\u0440\u043e\u043d\u00cdslenskaItaliano\u05e2\u05d1\u05e8\u05d9\u05eaBasa JawaKurd\u00eeLatinaLatvie\u0161uLietuvi\u0173LumbaartMagyar\u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438Malagasy\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02\u092e\u0930\u093e\u0920\u0940Bahasa Melayu\u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102cNederlands\u0928\u0947\u092a\u093e\u0932\u0940\u65e5\u672c\u8a9eNorsk bokm\u00e5lNorsk nynorskOccitan\u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40Plattd\u00fc\u00fctschPolskiPortugu\u00easRom\u00e2n\u0103\u0420\u0443\u0441\u0441\u043a\u0438\u0439\u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430ScotsShqipSimple EnglishSloven\u010dinaSloven\u0161\u010dinaSoomaaliga\u0421\u0440\u043f\u0441\u043a\u0438 \/ srpskiSrpskohrvatski \/ \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438SuomiSvenskaTagalog\u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u0422\u0430\u0442\u0430\u0440\u0447\u0430\/tatar\u00e7a\u0c24\u0c46\u0c32\u0c41\u0c17\u0c41\u0e44\u0e17\u0e22T\u00fcrk\u00e7e\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430Ti\u1ebfng Vi\u1ec7t\u5434\u8bed\u7cb5\u8a9e\u4e2d\u6587 Edit links This page was last edited on 18 July 2017, at 11:57. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view (window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"1.904\",\"walltime\":\"2.086\",\"ppvisitednodes\":{\"value\":20756,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":0,\"limit\":1500000},\"postexpandincludesize\":{\"value\":533661,\"limit\":2097152},\"templateargumentsize\":{\"value\":21179,\"limit\":2097152},\"expansiondepth\":{\"value\":25,\"limit\":40},\"expensivefunctioncount\":{\"value\":9,\"limit\":500},\"entityaccesscount\":{\"value\":1,\"limit\":400},\"timingprofile\":[\"100.00% 1782.174 1 -total\",\" 54.90% 978.470 1 Template:Reflist\",\" 36.95% 658.571 193 Template:Cite_web\",\" 11.44% 203.924 1 Template:Graphical_timeline\",\" 5.29% 94.299 30 Template:Cite_mailing_list\",\" 4.30% 76.617 1 Template:Infobox_OS\",\" 3.66% 65.142 1 Template:Infobox\",\" 2.20% 39.198 1 Template:Good_article\",\" 2.16% 38.478 1 Template:Official_website\",\" 2.10% 37.381 1 Template:Top_icon\"]},\"scribunto\":{\"limitreport-timeusage\":{\"value\":\"0.891\",\"limit\":\"10.000\"},\"limitreport-memusage\":{\"value\":8380965,\"limit\":52428800}},\"cachereport\":{\"origin\":\"mw1305\",\"timestamp\":\"20170718115800\",\"ttl\":86400,\"transientcontent\":true}}});});(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgBackendResponseTime\":77,\"wgHostname\":\"mw1255\"});});","tags":"","url":"https:\/\/en.wikipedia.org\/wiki\/Debian"},{"title":"CentOS - Wikipedia","text":"CentOS From Wikipedia, the free encyclopedia Jump to: navigation, search CentOS Default GNOME desktop in CentOS\u00a07 Developer The CentOS Project (affiliated with Red Hat) OS family Unix-like Working state Current Source model Open source Initial release 14\u00a0May 2004; 13 years ago\u00a0(2004-05-14)[1] Latest release 7.3-1611 (12\u00a0December 2016; 6 months ago\u00a0(2016-12-12)[2]) [\u00b1] 6.9 (5\u00a0April 2017; 3 months ago\u00a0(2017-04-05)[3]) [\u00b1] 5.11 (30\u00a0September 2014; 2 years ago\u00a0(2014-09-30)[4]) [\u00b1] Marketing target Free computing (desktops, mainframes, servers and workstations) Update method Yum (PackageKit) Package manager RPM Package Manager Platforms x86-64[a] Kernel type Monolithic (Linux kernel) Default user interface Command-line, GNOME and KDE Plasma Desktop (user-selectable) License Free software (GPL and other licenses) Official website www.centos.org CentOS (\/s\u025bnt.\u0251\u02d0s\/, from Community Enterprise Operating System) is a Linux distribution that attempts to provide a free, enterprise-class, community-supported computing platform functionally compatible with its upstream source, Red Hat Enterprise Linux (RHEL).[5][6] In January 2014, CentOS announced the official joining with Red Hat while staying independent from RHEL,[7] under a new CentOS governing board.[8][9] The first CentOS release in May 2004, numbered as CentOS version 2, was forked from RHEL version 2.1AS.[1] Since the release of version 7.0, CentOS officially supports only the x86-64 architecture, while versions older than 7.0-1406 also support IA-32 with Physical Address Extension (PAE). As of December 2015[update], AltArch releases of CentOS\u00a07 are available for the IA-32 architecture, Power architecture, and for the ARMv7hl and AArch64 variants of the ARM architecture.[10][11] Contents 1 History 2 Design 3 Versioning and releases 3.1 CentOS releases 3.2 AltArch releases 3.3 Add-ons releases 3.4 End-of-support schedule 3.5 Releases without upstream equivalents 4 Special interest groups 5 Architectures 6 Repositories 7 Notes 8 References 9 Further reading 10 External links History[edit] Prior to becoming known under its current name, CentOS originated as a build artifact of cAos Linux.[12] At the time,[when?] some of the cAos contributors were merely interested in this build artifact for their own use, citing difficulties in collaborating with other noteworthy Red Hat Enterprise Linux (RHEL) clones of the time.[citation needed] In June 2006, David Parsley, the primary developer of Tao Linux (another RHEL clone), announced the retirement of Tao Linux and its rolling into CentOS development. Tao's users migrated to the CentOS release via yum update.[13] In July 2009, it was reported in an open letter on the CentOS project web site that CentOS's founder, Lance Davis, had disappeared in 2008. Davis had ceased contribution to the project, but continued to hold the registration for the CentOS domain and PayPal account. In August 2009, the CentOS team reportedly made contact with Davis and obtained the centos.info and centos.org domains.[14] In July 2010, CentOS overtook Debian to become the most popular Linux distribution for web servers, with almost 30% of all Linux web servers using it.[15] Debian retook the lead in January 2012.[16] In January 2014, Red Hat announced that it would sponsor the CentOS project, \"helping to establish a platform well-suited to the needs of open source developers that integrate technologies in and around the operating system\".[17] As a result of these changes, ownership of CentOS trademarks was transferred to Red Hat,[18] which now employs most of the CentOS head developers; however, they work as part of Red Hat's Open Source and Standards team, which operates separately from the Red Hat Enterprise Linux team.[7] A new CentOS governing board was also established.[8] Design[edit] RHEL is available only through a paid subscription service that provides access to software updates and varying levels of technical support. The product is largely composed of software packages distributed under free software licenses and the source code for these packages is made public by Red Hat. CentOS developers use Red Hat's source code to create a final product very similar to RHEL. Red Hat's branding and logos are changed because Red Hat does not allow them to be redistributed.[19] CentOS is available free of charge. Technical support is primarily provided by the community via official mailing lists, web forums, and chat rooms. The project is affiliated with Red Hat but aspires to be more public, open, and inclusive. While Red Hat employs most of the CentOS head developers, the CentOS project itself relies on donations from users and organizational sponsors.[7] Versioning and releases[edit] CentOS releases[edit] CentOS version numbers for releases older than 7.0 have two parts, a major version and a minor version, which correspond to the major version and update set of Red Hat Enterprise Linux (RHEL) used to build a particular CentOS release. For example, CentOS\u00a06.5 is built from the source packages of RHEL\u00a06 update\u00a05 (also known as RHEL version\u00a06.5), which is a so-called \"point release\" of RHEL\u00a06.[20] Starting with version 7.0, CentOS version numbers also include a third part that indicates the monthstamp of the source code the release is based on. For example, version number 7.0-1406 still maps this CentOS release to the zeroth update set of RHEL\u00a07, while \"1406\" indicates that the source code this release is based on dates from June 2014. Using the monthstamp allows installation images to be reissued for (as of July 2014[update]) oncoming container and cloud releases, while maintaining a connection to the related base release version.[21] Since mid-2006 and starting with RHEL version 4.4, which is formally known as Red Hat Enterprise Linux 4.0 update 4, Red Hat has adopted a version-naming convention identical to that used by CentOS (for example, RHEL\u00a04.5 or RHEL\u00a06.5).[22] CentOS version Architectures RHEL base Kernel CentOS release date RHEL release date Delay (days) 2.1 IA-32 2.1 2.4.9 14 May 2004[1] 17 May 2002[23] 728 3.1 IA-32, x86-64, IA-64, s390, s390x 3.1 2.4.21-15 19 March 2004[24] 23 October 2003[23] 148 3.3 IA-32, x86-64, IA-64, s390, s390x 3.3 2.4.21-20 17 September 2004 3 September 2004 14 3.4 IA-32, x86-64, IA-64, s390, s390x 3.4 2.4.21-27 23 January 2005 12 December 2004 42 3.5 IA-32 3.5 2.4.21-32 10 June 2005[25] 18 May 2005 23 3.6 IA-32 3.6 2.4.21-37 1 November 2005[26] 28 September 2005 34 3.7 IA-32, x86-64, IA-64, s390, s390x 3.7 2.4.21-40 10 April 2006[27] 17 March 2006 23 3.8 IA-32, x86-64 3.8 2.4.21-47 25 August 2006[28] 20 July 2006 36 3.9 IA-32, x86-64, IA-64, s390, s390x 3.9 2.4.21-50 26 July 2007[29] 15 June 2007 41 4.0 IA-32, x86-64, various 4.0 2.6.9-5 9 March 2005[30] 14 February 2005[31] 23 4.1 IA-32, IA-64, s390 4.1 2.6.9-11 12 June 2005[32] 8 June 2005 4 4.2 IA-32, x86-64, IA-64, s390, s390x, alpha 4.2 2.6.9-22 13 October 2005[33] 5 October 2005 8 4.3 IA-32, x86-64, IA-64, s390, s390x 4.3 2.6.9-34 21 March 2006[34] 12 March 2006 9 4.4 IA-32, x86-64 4.4 2.6.9-42 30 August 2006[35] 10 August 2006 20 4.5 IA-32, x86-64, IA-64 4.5 2.6.9-55 17 May 2007[36] 1 May 2007 16 4.6 IA-32, x86-64, IA-64, Alpha, s390, s390x, PowerPC (beta), SPARC (beta) 4.6 2.6.9-67 16 December 2007[37] 16 November 2007[38] 30 4.7 IA-32, x86-64 4.7 2.6.9-78 13 September 2008[39] 24 July 2008[40] 51 4.8 IA-32, x86-64 4.8 2.6.9-89 21 August 2009[41] 18 May 2009[42] 95 4.9 IA-32, x86-64 4.9 2.6.9-100 2 March 2011[43] 16 February 2011[44] 14 5.0 IA-32, x86-64 5.0 2.6.18-8 12 April 2007[45] 14 March 2007[46] 28 5.1 IA-32, x86-64 5.1 2.6.18-53 2 December 2007[47] 7 November 2007[48] 25 5.2 IA-32, x86-64 5.2 2.6.18-92 24 June 2008[49] 21 May 2008[50] 34 5.3 IA-32, x86-64 5.3 2.6.18-128 31 March 2009[51] 20 January 2009[52] 69 5.4 IA-32, x86-64 5.4 2.6.18-164 21 October 2009[53] 2 September 2009[54] 49 5.5 IA-32, x86-64 5.5 2.6.18-194 14 May 2010[55] 31 March 2010[56] 44 5.6 IA-32, x86-64 5.6 2.6.18-238 8 April 2011[57] 13 January 2011[58] 85 5.7 IA-32, x86-64 5.7 2.6.18-274 13 September 2011[59] 21 July 2011[60] 54 5.8 IA-32, x86-64 5.8 2.6.18-308 7 March 2012[61] 21 February 2012[62] 15 5.9 IA-32, x86-64 5.9 2.6.18-348 17 January 2013[63] 7 January 2013[64] 10 5.10 IA-32, x86-64 5.10 2.6.18-371 19 October 2013[65] 30 September 2013[66] 19 5.11 IA-32, x86-64 5.11 2.6.18-398 30 September 2014[67] 16 September 2014[68] 14 6.0 IA-32, x86-64 6.0 2.6.32-71 10 July 2011[69] 10 November 2010[70] 242 6.1 IA-32, x86-64 6.1 2.6.32-131 9 December 2011[71] 19 May 2011[72] 204 6.2 IA-32, x86-64 6.2 2.6.32-220 20 December 2011[73] 6 December 2011[74] 14 6.3 IA-32, x86-64 6.3 2.6.32-279 9 July 2012[75] 21 June 2012[76] 18 6.4 IA-32, x86-64 6.4 2.6.32-358 9 March 2013[77] 21 February 2013[78] 15 6.5 IA-32, x86-64 6.5 2.6.32-431 1 December 2013[79] 21 November 2013[80] 10 6.6 IA-32, x86-64 6.6 2.6.32-504 28 October 2014[81] 14 October 2014[82] 14 6.7 IA-32, x86-64 6.7 2.6.32-573 7 August 2015[83] 22 July 2015[84] 16 6.8 IA-32, x86-64 6.8 2.6.32-642 25 May 2016[85] 10 May 2016[86] 15 6.9 IA-32, x86-64 6.9 2.6.32-696[87] 5 April 2017[88] 21 March 2017[89] 15 7.0-1406 x86-64[90][b] 7.0 3.10.0-123 7 July 2014[21] 10 June 2014[91] 27 7.1-1503 x86-64 7.1 3.10.0-229 31 March 2015[92][93] 5 March 2015[94] 26 7.2-1511 x86-64 7.2 3.10.0-327 14 December 2015[95][96] 19 November 2015[97] 25 7.3-1611 x86-64 7.3 3.10.0-514 12 December 2016[98] 3 November 2016[99] 39 AltArch releases[edit] AltArch releases are released by the Alternative Architecture Special Interest Group (AltArch SIG) to support architectures that are not supported by the base CentOS releases. CentOS version Architectures RHEL base CentOS release date 7.1-1503 AArch64 7.1 4 August 2015[11] IA-32 12 October 2015[100] 7.2-1511 IA-32 7.2 19 December 2015[10] ARMv7hl 19 December 2015[10] PowerPC64 (TechPreview) 19 December 2015[10] PowerPC8 LE (TechPreview) 19 December 2015[10] 7.3-1611 ARMv7hl 7.3 14 December 2016 PowerPC8 LE 22 December 2016 AArch64 4 January 2017 IA-32 27 January 2017 Add-ons releases[edit] Software Collections (SCL) is a CentOS repository that provides a set of dynamic programming languages, database servers, and various related packages. Provided software versions are either more recent than their equivalent versions included in the base CentOS distribution, or are made available as official CentOS packages for the first time.[101] (See also the list of CentOS repositories below.) Packages available from the SCL do not replace the default system tools provided with CentOS. Instead, a parallel set of tools is installed in the \/opt directory, and can be optionally enabled per application by using supplied scl utility. For example, the default versions of Perl or MySQL remain those provided by the base CentOS installation.[101] Add-on name Architectures Base CentOS version CentOS release date RHEL release date Delay (days) Software Collections (SCL) 1.0[102] x86-64 6.4, 6.5[103] 19 February 2014[103] 12 September 2013[102] 160 Developer Toolset 2.0[104] IA-32, x86-64 6.4 N\/A[105] 12 September 2013[104] N\/A End-of-support schedule[edit] According to the Red Hat Enterprise Linux (RHEL) life cycle,[106] CentOS 5, 6 and 7 will be \"maintained for up to 10 years\" as it is based on RHEL.[107] Previously, CentOS 4 had been supported for seven years.[108] CentOS version Release date Full updates[109][110] Maintenance updates[109][110] Old version, no longer supported: 3 19 March 2004 20 July 2006 31 October 2010 Old version, no longer supported: 4 9 March 2005 31 March 2009 29 February 2012[111] Old version, no longer supported: 5 12 April 2007 31 January 2014 31 March 2017[112] Older version, yet still supported: 6 10 July 2011 10 May 2017 30 November 2020 Current stable version: 7 7 July 2014 Q4 2020 30 June 2024 Legend: Old version Older version, still supported Latest version Latest preview version Future release Releases without upstream equivalents[edit] Some of the ISO images released by the CentOS project have no direct upstream equivalents. They are created for specific purposes, such as for providing a live bootable image, or for providing a reduced-size installation media. In addition to those listed below, there are also AltArch releases, which also have no direct upstream equivalents. LiveCD and LiveDVD images contain a bootable compressed file system, created by a set of custom scripts[113] using a kickstart configuration file.[114] These live images can be also installed to hard disk, thus obtaining a fully functional CentOS installation. The set of packages installed that way on a hard disk can not be adjusted during the installation, as that is a simple transfer of the image existing on CD\/DVD, to a hard disk. After booting from hard disk, yum can be used for adding or removing packages.[115] MinimalCD images contain a minimum of packages required for a functional installation, with no compromises in security or network usability. These minimal images use the standard CentOS installer with all of its regular features minus the selection of packages. Yum can be used after the installation is completed to add or remove packages.[116][117] CentOS version Release name Architectures RHEL base CentOS release date 4.7 Server IA-32, x86-64 4.7 17 October 2008[118] 5.1 Live CD IA-32 5.1 18 February 2008[119] 5.2 Live CD IA-32 5.2 17 July 2008[120] 5.3 Live CD IA-32 5.3 27 May 2009[121] 5.5 Live CD IA-32, x86-64 5.5 14 May 2010[55] 5.6 Live CD IA-32, x86-64 5.6 8 April 2011[57] 6.0 Live CD IA-32, x86-64 6.0 25 July 2011[122] Live DVD 27 July 2011[123] Minimal CD 28 July 2011[117] 6.1 Live CD IA-32, x86-64 6.1 9 December 2011[124] Live DVD 9 December 2011[125] Minimal CD 9 December 2011[126] 6.2 Live CD IA-32, x86-64 6.2 20 December 2011[127] Live DVD 20 December 2011[127] Minimal CD 20 December 2011[73] 6.3 Minimal CD IA-32, x86-64 6.3 9 July 2012[75] Live CD 15 July 2012 Live DVD 15 July 2012 6.4 Minimal CD IA-32, x86-64 6.4 9 March 2013[77] Live CD 22 May 2013[128] Live DVD 22 May 2013[128] 6.5 Minimal CD IA-32, x86-64 6.5 1 December 2013[79] Live CD 1 December 2013[79] Live DVD 1 December 2013[79] 6.6 Minimal CD IA-32, x86-64 6.6 28 October 2014[129] 6.7 Minimal CD IA-32, x86-64 6.7 7 August 2015[130] 7.0-1406[131] Live CD x86-64 7.0 7 July 2014[21] Gnome Live 7 July 2014[21] KDE Live 7 July 2014[21] 7.1-1503[132] Live CD x86-64 7.1 31 March 2015[92] Gnome Live 31 March 2015[92] KDE Live 31 March 2015[92] 7.2-1511[133] Gnome Live x86-64 7.2 14 December 2015[95] KDE Live 14 December 2015[95] Special interest groups[edit] Special interest groups (SIGs) are organized portions of the CentOS community that open paths for building specialized variants of CentOS, which fulfill specific sets of requirements. SIGs have the freedom to modify and enhance CentOS in various ways, including adding more cutting-edge software, rebuilding existing packages depending on the requirements, providing alternative desktop environments, or making CentOS available on otherwise unsupported architectures. Among other things, this provides an opportunity for the community to get the best of both worlds\u00a0\u2013 the overall stability of CentOS and newer technology from various open-source projects.[134] Architectures[edit] As of version 7, CentOS fully supports only the x86-64 architecture,[135] while the following architectures are not supported: IA-32 in all variants, had support temporarily dropped in CentOS\u00a07 IA-32 without Physical Address Extension (PAE), not supported since CentOS\u00a06 IA-64 (Intel Itanium architecture), was supported in CentOS\u00a03 and 4 32-bit PowerPC (Apple Macintosh and PowerMac running the G3 or G4 PowerPC processor), beta support was available in CentOS\u00a04 IBM Mainframe (eServer zSeries and S\/390), not supported since CentOS\u00a05 Alpha, support was available in CentOS\u00a04 SPARC, beta support was available in CentOS\u00a04 As of December 2015[update], AltArch releases of CentOS\u00a07 are available for the ARMv7hl and AArch64 variants of the ARM architecture,[11] and plans exist for supporting other variants of the ARM architecture. ARM support is a community effort coordinated through the AltArch SIG.[11][136] AltArch releases of CentOS\u00a07 are also available for the IA-32 architecture and Power architecture (POWER7 and POWER8 chips).[10] A Live CD version of CentOS is available at mirror.centos.org. A bootable Live USB image of CentOS can be created manually or with UNetbootin. CentOS images are also available on Amazon's EC2 cloud, in form of prebuilt and already published Amazon Machine Images (AMIs).[137][138] Repositories[edit] There are three primary CentOS repositories (also known as channels), containing software packages that make up the main CentOS distribution:[139] base\u00a0\u2013 contains packages that form CentOS point releases, and gets updated when the actual point release is formally made available in form of ISO images. updates\u00a0\u2013 contains packages that serve as security, bugfix or enhancement updates, issued between the regular update sets for point releases. Bugfix and enhancement updates released this way are only those unsuitable to be released through the CentOS-Fasttrack repository described below.[140][141] addons\u00a0\u2013 provides packages required for building the packages that make up the main CentOS distribution, but are not provided by the upstream.[c] The CentOS project provides several additional repositories that contain software packages not provided by the default base and updates repositories. Those repositories include the following:[142] CentOS Extras\u00a0\u2013 contains packages that provide additional functionality to CentOS without breaking its upstream compatibility or updating the base components. CentOSPlus\u00a0\u2013 contains packages that actually upgrade certain base CentOS components, changing CentOS so that it is not exactly like the upstream provider's content. CentOS-Testing\u00a0\u2013 serves as a proving ground for packages on their way to CentOSPlus and CentOS Extras. Offered packages may or may not replace core CentOS packages, and are not guaranteed to work properly. CentOS-Fasttrack\u00a0\u2013 contains bugfix and enhancement updates issued from time to time, between the regular update sets for point releases. The packages released this way serve as close candidates for the inclusion into the next point release. This repository does not provide security updates, and does not contain packages unsuitable for uncertain inclusion into point releases.[140][141][143] CR (Continuous Release)\u00a0\u2013 makes generally available packages that will appear in the next point release of CentOS. The packages are made available on a testing and hotfix basis, until the actual point release is formally released in form of ISO images.[144] debuginfo\u00a0\u2013 contains packages with debugging symbols generated when the primary packages were built contrib\u00a0\u2013 contains packages contributed by CentOS users that do not overlap with any of the core distribution packages Software Collections\u00a0\u2013 provides versions of software newer than those provided by the base distribution, see above for more details Notes[edit] ^ CentOS versions older than 7.0-1406 also officially support IA-32 with Physical Address Extension (PAE), and additional architectures were supported in CentOS versions older than 4.7. ^ As of July 2014[update], there is an ongoing effort to provide installation images for i386, ARM and PowerPC as well.[21] ^ This repository does not exist for CentOS\u00a06 and 7. References[edit] ^ a b c John Newbigin (2004-05-14). \"CentOS-2 Final finally released\". centos.org. Retrieved 2008-06-01.\u00a0 ^ \"[CentOS-announce] Release for CentOS Linux 7 (1611) on x86_64\". 12 December 2016. Retrieved 12 December 2016.\u00a0 ^ \"[CentOS-announce] Release for CentOS Linux 6.9 i386 and x86_64\". 2017-04-05. Retrieved 2017-04-05.\u00a0 ^ \"[CentOS-announce] Release for CentOS-5.11 i386 and x86_64\". 30 September 2014. Retrieved 30 September 2014.\u00a0 ^ \"Frequently Asked Questions about CentOS in general: 1. What is CentOS Linux?\". centos.org. 2014-10-12. Retrieved 2014-11-02.\u00a0 ^ \"Red hat + CentOS\". Red Hat. Retrieved 2014-04-15.\u00a0 ^ a b c Karanbir Singh (2014-01-07). \"CentOS Project joins forces with Red Hat\". centos.org. Retrieved 2014-01-08.\u00a0 ^ a b \"CentOS Governance\". centos.org. 2014. Retrieved 2014-01-08.\u00a0 ^ Karanbir Singh (2014-12-09). \"Karanbir Singh: CentOS Linux: A Continuously integrating platform\". youtube.com. Retrieved 2016-06-04.\u00a0 ^ a b c d e f Singh, Karanbir (2015-12-19). \"[CentOS-announce] Release for CentOS AltArch 7 (1511)\". Retrieved 2015-12-24.\u00a0 ^ a b c d Perrin, Jim (2015-08-04). \"[CentOS-announce] Release for CentOS 7 on AArch64\". Retrieved 2015-11-01.\u00a0 ^ Jeffrey B. Layton (2009-02-05). \"Caos NSA and Perceus: All-in-one Cluster Software Stack\". Linux Magazine. Retrieved 2014-08-07.\u00a0 ^ \"Retirement of TaoLinux\". centos.org. Archived from the original on 2013-05-12. Retrieved 2014-05-21.\u00a0 ^ Perlow, Jason. (2 August 2009). CentOS: Getting Their S#!t Together is a Top Priority. ZDNet ^ \"The most popular Linux for Web servers is ...\" (blog). computerworld.com.\u00a0 ^ \"Debian is now the most popular Linux distribution on web servers\". w3techs.com.\u00a0 ^ \"Red Hat and the CentOS Project Join Forces to Speed Open Source Innovation\". Red Hat. 2015-01-07. Retrieved 2014-01-08. Red Hat is once again extending its leadership in open source innovation by helping to establish a platform well-suited to the needs of open source developers that integrate technologies in and around the operating system.\u00a0 ^ \"Red Hat + CentOS - CentOS Trademark\". Red Hat. Retrieved 9 January 2014.\u00a0 ^ \"Red Hat License Agreements\". Red Hat. Retrieved 2008-06-01.\u00a0 ^ \"What is the versioning\/release scheme of CentOS and how does it compare to the upstream vendor?\". centos.org. Retrieved 2014-05-21.\u00a0 ^ a b c d e f Karanbir Singh (2014-07-07). \"[CentOS-announce] Release for CentOS-7 on x86_64\". centos.org. Retrieved 2014-07-07.\u00a0 ^ \"Red Hat Enterprise Linux > AS\/ES\/WS Basics\". Red Hat. Archived from the original on 2008-10-14. Retrieved 2014-05-26.\u00a0 ^ a b \"Red Hat Enterprise Linux Errata Support Policy\". Red Hat. Retrieved 2008-06-01.\u00a0 ^ Lance Davis (2004-03-19). \"CentOS 3.1 has now been released\". centos.org. Retrieved 2008-06-01.\u00a0 ^ Lance Davis (2005-06-10). \"[CentOS-announce] CentOS 3.5 i386 is released\". centos.org.\u00a0 ^ Lance Davis (2005-11-01). \"[CentOS-announce] CentOS 3.6 is released.\". centos.org.\u00a0 ^ Lance Davis (2006-04-10). \"[CentOS-announce] CentOS 3.7 is released\". centos.org.\u00a0 ^ Johnny Hughes (2006-08-25). \"[CentOS-announce] Subject: CentOS 3.8 is released for i386 and x86_64\". centos.org.\u00a0 ^ \"CentOS 3.9 is released for i386 and x86_64\". centos.org. 2007-07-26. Retrieved 2008-10-21.\u00a0 ^ \"Distribution Release: CentOS 4\". DistroWatch.com. 2005-03-09.\u00a0 ^ \"Distribution Release: Red Hat Enterprise Linux 4\". DistroWatch.com. 2005-02-14.\u00a0 ^ Johnny Hughes (2005-06-12). \"[CentOS-announce] CentOS 4 i386 - CentOS 4.1 i386 is available\". centos.org.\u00a0 ^ Johnny Hughes (2005-10-13). \"[CentOS-announce] CentOS-4.2 is Released for i386, x86_64, IA-64, s390, s390x and alpha architectures\". centos.org.\u00a0 ^ Johnny Hughes (2006-03-21). \"[CentOS-announce] CentOS 4.3 is Released for i386, x86_64, and IA-64\". centos.org.\u00a0 ^ Johnny Hughes (2006-08-30). \"[CentOS-announce] CentOS 4.4 is released for i386 and x86_64\". centos.org.\u00a0 ^ Johnny Hughes (2007-05-17). \"[CentOS-announce] CentOS 4.5 is released for i386, x86_64, and IA-64\". centos.org.\u00a0 ^ \"Distribution Release: CentOS 4.6\". DistroWatch.com. 2007-12-16. Retrieved 2008-11-10.\u00a0 ^ \"Distribution Release: Red Hat Enterprise Linux 4.6\". DistroWatch.com. 2007-11-16. Retrieved 2008-11-10.\u00a0 ^ Johnny Hughes (2008-09-13). \"CentOS 4.7 is released for i386 and x86_64\". centos.org. Retrieved 2008-09-14.\u00a0 ^ \"Red Hat Enterprise Linux 4.7 GA Announcement\". Red Hat. 2008-07-24. Retrieved 2008-09-14.\u00a0 ^ Johnny Hughes (2009-08-21). \"CentOS 4 i386 and x86_64 release of CentOS-4.8\". centos.org.\u00a0 ^ \"Red Hat Enterprise Linux 4.8 GA Announcement\". Red Hat. 2009-05-18. Retrieved 2010-03-12.\u00a0 ^ Johnny Hughes (2011-03-02). \"CentOS 4 i386 and x86_64 release of CentOS-4.9\". centos.org.\u00a0 ^ \"Red Hat Enterprise Linux 4.9 GA Announcement\". Red Hat. 2011-02-16.\u00a0 ^ Karanbir Singh (2007-04-12). \"Release for CentOS-5 i386 and x86_64\". centos.org. Retrieved 2008-06-01.\u00a0 ^ \"Red Hat Enterprise Linux 5 Now Available\". Red Hat. 2007-03-15. Retrieved 2008-06-01.\u00a0 ^ Karanbir Singh (2007-12-02). \"Release for CentOS-5.1 i386 and x86_64\". centos.org. Retrieved 2008-06-01.\u00a0 ^ \"Red Hat Enterprise Linux 5.1 General Availability Announcement\". Red Hat. 2007-11-07. Retrieved 2008-06-01.\u00a0 ^ Karanbir Singh (2008-06-24). \"Release for CentOS-5.2 i386 and x86_64\". centos.org. Retrieved 2009-02-03.\u00a0 ^ \"Red Hat Enterprise Linux 5.2 General Availability Announcement\". Red Hat. 2008-05-21. Retrieved 2009-01-22.\u00a0 ^ Karanbir Singh (2009-04-01). \"Release for CentOS-5.3 i386 and x86_64\". centos.org. Retrieved 2009-04-01.\u00a0 ^ \"Red Hat Enterprise Linux 5.3 General Availability Announcement\". Red Hat. 2009-01-20. Retrieved 2009-01-22.\u00a0 ^ Singh, Karanbir (21 Oct 2009). \"[CentOS-announce] Release for CentOS-5.4 i386 and x86_64\". centos.org. Retrieved 2009-10-24.\u00a0 ^ \"Red Hat Enterprise Linux 5.4 GA Announcement\". Red Hat. 2009-09-02. Retrieved 2009-09-22.\u00a0 ^ a b Singh, Karanbir (14 May 2010). \"[CentOS-announce] Release for CentOS-5.5 i386 and x86_64\". centos.org. Retrieved 2010-05-15.\u00a0 ^ Red Hat Enterprise Linux 5 (Tikanga) announcement mailing-list (2010-03-31). \"[rhelv5-announce] Red Hat Enterprise Linux 5.5 GA Announcement\". Retrieved 2010-05-15.\u00a0 ^ a b \"Release for CentOS-5.6 i386 and x86_64\". centos.org. Retrieved 2011-04-08.\u00a0 ^ \"Red Hat Enterprise Linux 5: 5.6 Release Notes\". Retrieved 2014-05-21.\u00a0 ^ \"Release for CentOS-5.7 i386 and x86_64\". centos.org. 2011-09-13. Retrieved 2011-09-13.\u00a0 ^ \"Red Hat Enterprise Linux 5.7 Release Notes\". 2011-07-21. Retrieved 2011-07-21.\u00a0 ^ \"Release for CentOS-5.8 i386 and x86_64\". centos.org. 2012-03-07. Retrieved 2012-03-08.\u00a0 ^ \"Red Hat Enterprise Linux 5.8 Release Notes\". 2012-02-21. Retrieved 2012-02-21.\u00a0 ^ \"Release for CentOS-5.9 i386 and x86_64\". centos.org. 2013-01-17. Retrieved 2013-01-17.\u00a0 ^ \"Red Hat Enterprise Linux 5.9 Release Notes\". 2013-01-07. Retrieved 2013-01-07.\u00a0 ^ \"Release for CentOS-5.10 i386 and x86_64\". centos.org. 2013-10-19. Retrieved 2013-10-19.\u00a0 ^ \"Red Hat Enterprise Linux 5.10 Release Notes\". 2013-09-30. Retrieved 2013-10-01.\u00a0 ^ \"Release for CentOS-5.11 i386 and x86_64\". centos.org. 2014-09-30. Retrieved 2014-09-30.\u00a0 ^ \"Red Hat Enterprise Linux 5.11 Release Notes\". 2014-09-16. Retrieved 2014-09-16.\u00a0 ^ \"Release for CentOS-6.0 i386 and x86_64\". centos.org. 2011-07-10. Retrieved 2011-07-10.\u00a0 ^ \"Red Hat Enterprise Linux 6 Now Available\". Red Hat. 2010-11-10. Retrieved 2010-11-10.\u00a0 ^ \"Release for CentOS-6.1 i386 and x86_64\". centos.org. 2011-12-09. Retrieved 2011-12-09.\u00a0 ^ \"Red Hat Delivers Red Hat Enterprise Linux 6.1\". Red Hat. 2011-05-19. Retrieved 2014-05-21.\u00a0 ^ a b \"Release for CentOS-6.2 i386 and x86_64\". centos.org. 2011-12-20. Retrieved 2011-12-20.\u00a0 ^ \"Red Hat Enterprise Linux 6.2 Release Notes\". Red Hat. 2011-12-06. Retrieved 2011-12-06.\u00a0 ^ a b \"Release for CentOS-6.3 i386 and x86_64\". centos.org. 2012-07-09. Retrieved 2012-07-09.\u00a0 ^ \"Red Hat Enterprise Linux 6.3 Release Notes\". Red Hat. 2012-06-21. Retrieved 2012-06-21.\u00a0 ^ a b \"Release for CentOS-6.4 i386 and x86_64\". centos.org. 2013-03-08. Retrieved 2013-03-08.\u00a0 ^ \"Red Hat Enterprise Linux 6.4 Release Notes\". Red Hat. 2013-02-21. Retrieved 2013-02-21.\u00a0 ^ a b c d \"Release for CentOS-6.5 i386 and x86_64\". centos.org. 2013-12-01. Retrieved 2013-12-01.\u00a0 ^ \"Red Hat Enterprise Linux 6.5 Release Notes\". Red Hat. 2013-11-21. Retrieved 2013-11-21.\u00a0 ^ \"Release for CentOS-6.6 i386 and x86_64\". centos.org. 2014-10-28. Retrieved 2014-10-28.\u00a0 ^ \"Red Hat Enterprise Linux 6.6 Release Notes\". Red Hat. 2014-10-14. Retrieved 2014-10-14.\u00a0 ^ \"Release for CentOS Linux 6.7 i386 and x86_64\". centos.org. 2015-08-07. Retrieved 2015-08-07.\u00a0 ^ \"Red Hat Enterprise Linux 6.7 Release Notes\". Red Hat. 2015-07-22. Retrieved 2015-07-22.\u00a0 ^ \"Release for CentOS Linux 6.8 i386 and x86_64\". centos.org. 2016-05-25. Retrieved 2016-05-25.\u00a0 ^ \"Red Hat Enterprise Linux 6.8 Release Notes\". Red Hat. 2016-05-10. Retrieved 2016-05-14.\u00a0 ^ \"Red Hat Enterprise Linux Release Dates\". Red Hat.\u00a0 ^ \"Release for CentOS Linux 6.9 i386 and x86_64\". centos.org. 2017-04-05. Retrieved 2017-04-05.\u00a0 ^ \"Red Hat Enterprise Linux 6.9 Release Notes\". Red Hat. 2017-03-21. Retrieved 2017-03-21.\u00a0 ^ \"Are 32-bit applications supported in RHEL 7? - Red Hat Customer Portal\". Red Hat. 2013-12-17. Retrieved 2014-06-20.\u00a0 ^ \"Red Hat Enterprise Linux 7 Release Notes\". Red Hat. 2014-06-10. Retrieved 2014-06-10.\u00a0 ^ a b c d Karanbir Singh (2015-03-31). \"[CentOS-announce] Release for CentOS Linux 7 (1503) on x86_64\". centos.org. Retrieved 2015-03-31.\u00a0 ^ Karanbir Singh (2015-04-01). \"[CentOS-announce] Update to Release for CentOS Linux 7 (1503)\". centos.org. Retrieved 2015-04-01.\u00a0 ^ \"Red Hat Enterprise Linux 7.1 Release Notes\". Red Hat. 2015-03-05. Retrieved 2015-03-05.\u00a0 ^ a b c Karanbir Singh (2015-12-14). \"[CentOS-announce] Release for CentOS Linux 7 (1511) on x86_64\". centos.org. Retrieved 2015-12-14.\u00a0 ^ Karanbir Singh (2015-12-14). \"[CentOS-announce] Update to Release for CentOS Linux 7 (1511)\". centos.org. Retrieved 2015-12-14.\u00a0 ^ \"Red Hat Enterprise Linux 7.2 Release Notes\". Red Hat. 2015-11-19. Retrieved 2015-11-19.\u00a0 ^ Karanbir Singh (2016-12-12). \"[CentOS-announce] Release for CentOS Linux 7 (1611) on x86_64\". centos.org. Retrieved 2016-12-12.\u00a0 ^ \"Red Hat Enterprise Linux 7.3 Release Notes\". Red Hat. 2016-11-03. Retrieved 2016-11-03.\u00a0 ^ Hughes, Johnny (2015-10-12). \"[CentOS-announce] CentOS Linux 7 for 32-bit x86 (i386) Architecture\". Retrieved 2015-11-01.\u00a0 ^ a b \"Software Collections 1.0: Release Notes\". centos.org. Retrieved 2013-10-30.\u00a0 ^ a b \"Red Hat Extends Red Hat Enterprise Linux Platform with Latest Versions of Popular Programming Languages and Databases\". Red Hat. 2013-09-12. Retrieved 2013-10-18.\u00a0 ^ a b \"[CentOS-announce] Software Collections for CentOS-6 (x86_64 only)\". lists.centos.org. 2014-02-19. Retrieved 2014-02-20.\u00a0 ^ a b \"Red Hat Releases Red Hat Developer Toolset 2.0 with Update to GCC\". Red Hat. 2013-09-12. Retrieved 2013-10-17.\u00a0 ^ \"[CentOS] RH developer toolset\". lists.centos.org. 2013-09-17. Retrieved 2013-10-18.\u00a0 ^ \"Red Hat Enterprise Linux Life Cycle\". Red Hat. Retrieved 2013-11-09.\u00a0 ^ CentOS team (2012-09-22). \"CentOS Wiki Frontpage\". Retrieved 2016-08-31. Each CentOS version is maintained for up to 10 years (by means of security updates -- the duration of the support interval by Red Hat has varied over time with respect to Sources released). A new CentOS version is released approximately every 2 years and each CentOS version is periodically updated (roughly every 6 months) to support newer hardware.\u00a0 ^ CentOS team. \"CentOS-4 i386 and x86_64 End of Life (EOL)\".\u00a0 ^ a b \"CentOS Product Specifications: End of Lifetime (EOL) Dates\". centos.org. Retrieved 2014-07-15.\u00a0 ^ a b \"Red Hat Enterprise Linux Life Cycle: Life Cycle Dates\". Red Hat. Retrieved 2013-11-09.\u00a0 ^ An \"Extended Life-cycle Support (ELS) Add-On Subscription\" became available for a further 3 years (i.e. until 2015). The corresponding version of RHEL was on extended support until 31 March 2017. ^ An \"Extended Life-cycle Support (ELS) Add-On Subscription\" is available for a further 3 years. The corresponding version of RHEL is on extended support until 30 November 2020. ^ \"FedoraLiveCD\". fedoraproject.org. Retrieved 2013-10-30.\u00a0 ^ \"CentOS LiveCD Project\". centos.org. Retrieved 2013-10-30.\u00a0 ^ \"CentOS LiveDVD 6.4 Release Notes\". centos.org. 2013-05-17. Retrieved 2013-10-30.\u00a0 ^ \"CentOS MinimalCD 6.0 Release Notes\". centos.org. 2011-10-05. Retrieved 2013-10-30.\u00a0 ^ a b Karanbir Singh (2011-07-28). \"Release for CentOS-6.0 Minimal i386 and x86_64\". Retrieved 2011-07-29.\u00a0 ^ Karanbir Singh (2008-10-17). \"CentOS 4.7 Server CD\u00a0\u2014 i386 Released\". Retrieved 2009-01-23.\u00a0 ^ Patrice Guay (2008-02-18). \"CentOS 5 i386 - The CentOS-5.1 i386 Live CD is released\". Retrieved 2009-03-25.\u00a0 ^ Patrice Guay (2008-07-17). \"CentOS 5 i386 - The CentOS-5.2 i386 Live CD is released\". Retrieved 2009-02-03.\u00a0 ^ Singh, Karanbir. \"[CentOS-announce] CentOS 5 i386 - The CentOS-5.3 i386 Live CD is released\". centos.org. Retrieved 2009-06-22.\u00a0 ^ Karanbir Singh (2011-07-25). \"Release for CentOS-6.0 LiveCD i386 and x86_64\". Retrieved 2011-07-25.\u00a0 ^ Karanbir Singh (2011-07-27). \"Release for CentOS-6.0 LiveDVD i386 and x86_64\". Retrieved 2011-07-28.\u00a0 ^ Karanbir Singh (2011-12-09). \"Release for CentOS-6.1 LiveCD i386 and x86_64\". Retrieved 2011-12-10.\u00a0 ^ Karanbir Singh (2011-12-09). \"Release for CentOS-6.1 LiveDVD i386 and x86_64\". Retrieved 2011-12-10.\u00a0 ^ Karanbir Singh (2011-12-09). \"Release for CentOS-6.1 Minimal i386 and x86_64\". Retrieved 2011-12-10.\u00a0 ^ a b \"CentOS 6.2 Release Notes\". 2011-12-20. Retrieved 2011-12-20.\u00a0 ^ a b \"[CentOS-announce] Release for CentOS-6.4 LiveCD and LiveDVD for i386 and x86_64\". 2013-05-22. Retrieved 2013-06-02.\u00a0 ^ \"[CentOS-announce] Release for CentOS-6.6 i386 and x86_64\". 2014-10-28. Retrieved 2015-04-14.\u00a0 ^ \"[CentOS-announce] Release for CentOS Linux 6.7 i386 and x86_64\". 2015-08-07. Retrieved 2015-11-23.\u00a0 ^ \"List of images in \/7.0.1406\/isos\/x86_64 directory\". centos.org. 2015-12-14. Retrieved 2015-12-14.\u00a0 ^ \"List of images in \/centos\/7\/isos\/x86_64 directory\". centos.org. 2015-12-14. Retrieved 2015-12-14.\u00a0 ^ \"List of images in \/centos\/7\/isos\/x86_64 directory\". centos.org. 2015-12-14. Retrieved 2015-12-14.\u00a0 ^ \"Special Interest Groups\". centos.org. 2014-11-17. Retrieved 2015-01-02.\u00a0 ^ \"About\/Product - CentOS Wiki\". CentOS Wiki. Retrieved 18 April 2013.\u00a0 ^ Singh, Karanbir (2014-03-26). \"The ARM plan for CentOS\". Retrieved 2014-11-27.\u00a0 ^ \"Cloud\/AWS (CentOS documentation)\". centos.org. Retrieved 2013-10-18.\u00a0 ^ \"[CentOS-announce] Updated AMI's for Amazon EC2 are now available\". centos.org. 2013-06-21. Retrieved 2013-10-18.\u00a0 ^ \"Software Management Concepts: About Repositories (CentOS 5 manual)\". centos.org. 2005-11-24. Retrieved 2014-12-16.\u00a0 ^ a b Johnny Hughes (2006-04-06). \"[CentOS] CentOS FastTrack repository\". lists.centos.org. Retrieved 2013-10-08.\u00a0 ^ a b Jay Turner (2006-04-03). \"Re: Fastrack channels?\". redhat.com. Retrieved 2014-12-16.\u00a0 ^ \"Available Repositories for CentOS\". centos.org. Retrieved 2013-10-08.\u00a0 ^ \"Red Hat Network (RHN) FasTrack\". Red Hat. Retrieved 2014-12-16.\u00a0 ^ \"The Continuous Release (CR) Repository\". centos.org. Retrieved 2013-10-08.\u00a0 Further reading[edit] Membrey, Peter (2009). The Definitive Guide to CentOS. Apress. ISBN\u00a0978-1-4302-1930-9.\u00a0 Negus, Christopher; Timothy Boronczyk (2009). CentOS Bible. Wiley. ISBN\u00a0978-0-470-48165-3.\u00a0 External links[edit] Official website CentOS at DistroWatch CentOS.org Wiki: Additional Repositories CentOS and Red Hat\u00a0\u2013 LWN.net article, contains a discussion on functional vs. binary compatibility v t e Red Hat Enterprise Linux and Fedora derivatives Red Hat Enterprise Linux CentOS ClearOS Fermi Linux Inspur K-UX Oracle Linux RedSleeve Rocks Cluster Distribution Scientific Linux Turbolinux Yellow Dog Linux Fedora Aurora SPARC Linux Berry Linux BLAG Linux and GNU Korora MythDora Planet CCRMA Qubes OS Red Flag Linux v t e Linux distributions Arch Antergos ArchBang Chakra Manjaro Linux Parabola GNU\/Linux-libre Debian antiX Astra Linux Bharat Operating System Solutions Elive Devuan gNewSense HandyLinux Kali Linux Knoppix SparkyLinux SteamOS Tails Ubuntu Official: Edubuntu Kubuntu Lubuntu Ubuntu GNOME Ubuntu Kylin Ubuntu MATE Ubuntu Budgie Xubuntu Other: Bodhi Linux elementary OS Linux Mint Trisquel Asturix Fedora BLAG Linux and GNU Korora Red Hat CentOS ClearOS Linpus Linux Oracle Linux Qubes OS Rocks Cluster Distribution Scientific Linux SME Server Gentoo Calculate Linux Chromium OS Chrome OS Funtoo Linux Sabayon Linux Other Frugalware Linux Mandriva Linux Mageia OpenMandriva Lx ROSA Linux openSUSE SUSE Linux Enterprise Server PCLinuxOS Puppy Linux Slackware Porteus Salix OS VectorLinux Source Mage Solus Void Linux Category Comparison List Commons Authority control GND: 7715884-2 Retrieved from \"https:\/\/en.wikipedia.org\/w\/index.php?title=CentOS&oldid=789910599\" Categories: Enterprise Linux distributionsIA-32 Linux distributionsRPM-based Linux distributionsX86-64 Linux distributionsHidden categories: Articles containing potentially dated statements from July 2014All articles containing potentially dated statementsUse dmy dates from July 2011Articles containing potentially dated statements from December 2015All articles with vague or ambiguous timeVague or ambiguous time from August 2014All articles with unsourced statementsArticles with unsourced statements from August 2014Official website different in Wikidata and WikipediaWikipedia articles with GND identifiers Navigation menu Personal tools Not logged inTalkContributionsCreate accountLog in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store Interaction HelpAbout WikipediaCommunity portalRecent changesContact page Tools What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page Print\/export Create a bookDownload as PDFPrintable version In other projects Wikimedia Commons Languages \u0627\u0644\u0639\u0631\u0628\u064a\u0629BosanskiCatal\u00e0\u010ce\u0161tinaDanskDeutschEspa\u00f1olEuskara\u0641\u0627\u0631\u0633\u06ccFran\u00e7ais\ud55c\uad6d\uc5b4HrvatskiBahasa IndonesiaItalianoMagyar\u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02Nederlands\u0928\u0947\u092a\u093e\u0932\u0940\u65e5\u672c\u8a9eNorsk bokm\u00e5lPolskiPortugu\u00easRom\u00e2n\u0103\u0420\u0443\u0441\u0441\u043a\u0438\u0439Simple EnglishSloven\u010dinaSloven\u0161\u010dina\u0421\u0440\u043f\u0441\u043a\u0438 \/ srpskiSuomiSvenska\u0e44\u0e17\u0e22T\u00fcrk\u00e7e\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430Ti\u1ebfng Vi\u1ec7t\u4e2d\u6587 Edit links This page was last edited on 10 July 2017, at 12:08. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view (window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"1.632\",\"walltime\":\"1.756\",\"ppvisitednodes\":{\"value\":25297,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":0,\"limit\":1500000},\"postexpandincludesize\":{\"value\":296185,\"limit\":2097152},\"templateargumentsize\":{\"value\":24408,\"limit\":2097152},\"expansiondepth\":{\"value\":25,\"limit\":40},\"expensivefunctioncount\":{\"value\":7,\"limit\":500},\"entityaccesscount\":{\"value\":1,\"limit\":400},\"timingprofile\":[\"100.00% 1588.624 1 -total\",\" 48.72% 773.965 2 Template:Reflist\",\" 38.64% 613.912 141 Template:Cite_web\",\" 20.48% 325.306 151 Template:Date\",\" 5.90% 93.753 1 Template:Infobox_OS\",\" 5.36% 85.218 1 Template:Infobox\",\" 3.14% 49.898 2 Template:Fix\",\" 2.28% 36.221 1 Template:When\",\" 2.25% 35.737 1 Template:IPAc-en\",\" 2.19% 34.730 4 Template:Start_date_and_age\"]},\"scribunto\":{\"limitreport-timeusage\":{\"value\":\"0.694\",\"limit\":\"10.000\"},\"limitreport-memusage\":{\"value\":5865682,\"limit\":52428800}},\"cachereport\":{\"origin\":\"mw1167\",\"timestamp\":\"20170710120829\",\"ttl\":2592000,\"transientcontent\":false}}});});(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgBackendResponseTime\":72,\"wgHostname\":\"mw1270\"});});","tags":"","url":"https:\/\/en.wikipedia.org\/wiki\/CentOS"},{"title":"PHP - Wikipedia","text":"PHP From Wikipedia, the free encyclopedia Jump to: navigation, search This article is about the scripting language. For other uses, see PHP (disambiguation). PHP Paradigm Imperative, object-oriented, procedural, reflective Designed\u00a0by Rasmus Lerdorf Developer The PHP Development Team, Zend Technologies First\u00a0appeared June\u00a08, 1995; 22 years ago\u00a0(1995-06-08)[1] Stable release 7.1.7[2] \/ July\u00a06, 2017; 12 days ago\u00a0(2017-07-06) Typing discipline Dynamic, weak, gradual (as of PHP 7.0.0)[3] Implementation language C (primarily; some components C++) OS Unix-like, Windows License PHP License (most of Zend Engine under Zend Engine License & The TSRM License) Filename extensions .php, .phtml, .php3, .php4, .php5, .php7, .phps Website php.net Major implementations Zend Engine, HHVM, Phalanger, Quercus, Project Zero, Parrot Influenced by C, C++, Java, Perl, Tcl[1] Influenced Falcon, Hack PHP Programming at Wikibooks PHP is a server-side scripting language designed primarily for web development but also used as a general-purpose programming language. Originally created by Rasmus Lerdorf in 1994,[4] the PHP reference implementation is now produced by The PHP Development Team.[5] PHP originally stood for Personal Home Page,[4] but it now stands for the recursive acronym PHP: Hypertext Preprocessor.[6] PHP code may be embedded into HTML or HTML5 markup, or it can be used in combination with various web template systems, web content management systems and web frameworks. PHP code is usually processed by a PHP interpreter implemented as a module in the web server or as a Common Gateway Interface (CGI) executable. The web server software combines the results of the interpreted and executed PHP code, which may be any type of data, including images, with the generated web page. PHP code may also be executed with a command-line interface (CLI) and can be used to implement standalone graphical applications.[7] The standard PHP interpreter, powered by the Zend Engine, is free software released under the PHP License. PHP has been widely ported and can be deployed on most web servers on almost every operating system and platform, free of charge.[8] The PHP language evolved without a written formal specification or standard until 2014, leaving the canonical PHP interpreter as a de facto standard. Since 2014 work has gone on to create a formal PHP specification.[9] Contents 1 History 1.1 Early history 1.2 PHP 3 and 4 1.3 PHP 5 1.4 PHP 6 and Unicode 1.5 PHP 7 1.6 Release history 2 Mascot 3 Syntax 3.1 Data types 3.2 Functions 3.3 Object-oriented programming 4 Implementations 5 Licensing 6 Development and community 7 Installation and configuration 8 Use 9 Security 10 See also 11 References 12 Further reading 13 External links History[edit] Early history[edit] Rasmus Lerdorf (left), who wrote the original Common Gateway Interface (CGI) component, together with Andi Gutmans (middle) and Zeev Suraski (right), who rewrote the parser that formed PHP 3. PHP development began in 1995 when Rasmus Lerdorf wrote several Common Gateway Interface (CGI) programs in C,[10][11][12] which he used to maintain his personal homepage. He extended them to work with web forms and to communicate with databases, and called this implementation \"Personal Home Page\/Forms Interpreter\" or PHP\/FI. PHP\/FI could help to build simple, dynamic web applications. To accelerate bug reporting and to improve the code, Lerdorf initially announced the release of PHP\/FI as \"Personal Home Page Tools (PHP Tools) version 1.0\" on the Usenet discussion group comp.infosystems.www.authoring.cgi on June 8, 1995.[13][14] This release already had the basic functionality that PHP has as of 2013[update]. This included Perl-like variables, form handling, and the ability to embed HTML. The syntax resembled that of Perl but was simpler, more limited and less consistent.[5] Lerdorf did not intend the early PHP to become a new programming language, but it grew organically, with Lerdorf noting in retrospect: \"I don\u2019t know how to stop it, there was never any intent to write a programming language [\u2026] I have absolutely no idea how to write a programming language, I just kept adding the next logical step on the way.\"[15] A development team began to form and, after months of work and beta testing, officially released PHP\/FI 2 in November 1997. The fact that PHP lacked an original overall design but instead developed organically has led to inconsistent naming of functions and inconsistent ordering of their parameters.[16] In some cases, the function names were chosen to match the lower-level libraries which PHP was \"wrapping\",[17] while in some very early versions of PHP the length of the function names was used internally as a hash function, so names were chosen to improve the distribution of hash values.[18] PHP 3 and 4[edit] Zeev Suraski and Andi Gutmans rewrote the parser in 1997 and formed the base of PHP 3, changing the language's name to the recursive acronym PHP: Hypertext Preprocessor.[5][19] Afterwards, public testing of PHP 3 began, and the official launch came in June 1998. Suraski and Gutmans then started a new rewrite of PHP's core, producing the Zend Engine in 1999.[20] They also founded Zend Technologies in Ramat Gan, Israel.[5] On May 22, 2000, PHP 4, powered by the Zend Engine 1.0, was released.[5] As of August 2008 this branch reached version 4.4.9. PHP 4 is no longer under development nor will any security updates be released.[21][22] PHP 5[edit] On July 13, 2004, PHP 5 was released, powered by the new Zend Engine II.[5] PHP 5 included new features such as improved support for object-oriented programming, the PHP Data Objects (PDO) extension (which defines a lightweight and consistent interface for accessing databases), and numerous performance enhancements.[23] In 2008 PHP 5 became the only stable version under development. Late static binding had been missing from PHP and was added in version 5.3.[24][25] Many high-profile open-source projects ceased to support PHP 4 in new code as of February 5, 2008, because of the GoPHP5 initiative,[26] provided by a consortium of PHP developers promoting the transition from PHP 4 to PHP 5.[27][28] Over time, PHP interpreters became available on most existing 32-bit and 64-bit operating systems, either by building them from the PHP source code, or by using pre-built binaries.[29] For the PHP versions 5.3 and 5.4, the only available Microsoft Windows binary distributions were 32-bit x86 builds,[30][31] requiring Windows 32-bit compatibility mode while using Internet Information Services (IIS) on a 64-bit Windows platform. PHP version 5.5 made the 64-bit x86-64 builds available for Microsoft Windows.[32] PHP 6 and Unicode[edit] PHP has received criticism due to lacking native Unicode support at the core language level, instead only supporting byte strings. In 2005, a project headed by Andrei Zmievski was initiated to bring native Unicode support throughout PHP, by embedding the International Components for Unicode (ICU) library, and representing text strings as UTF-16 internally.[33] Since this would cause major changes both to the internals of the language and to user code, it was planned to release this as version 6.0 of the language, along with other major features then in development.[34] However, a shortage of developers who understood the necessary changes, and performance problems arising from conversion to and from UTF-16, which is rarely used in a web context, led to delays in the project.[35] As a result, a PHP 5.3 release was created in 2009, with many non-Unicode features back-ported from PHP\u00a06, notably namespaces. In March 2010, the project in its current form was officially abandoned, and a PHP\u00a05.4 release was prepared containing most remaining non-Unicode features from PHP\u00a06, such as traits and closure re-binding.[36] Initial hopes were that a new plan would be formed for Unicode integration, but as of 2014 none had been adopted. PHP 7[edit] During 2014 and 2015, a new major PHP version was developed, which was numbered PHP 7. The numbering of this version involved some debate.[37] While the PHP 6 Unicode experiment had never been released, several articles and book titles referenced the PHP 6 name, which might have caused confusion if a new release were to reuse the name.[38] After a vote, the name PHP\u00a07 was chosen.[39] The foundation of PHP 7 is a PHP branch that was originally dubbed PHP next generation (phpng). It was authored by Dmitry Stogov, Xinchen Hui and Nikita Popov,[40] and aimed to optimize PHP performance by refactoring the Zend Engine to use more compact data structures with improved cache locality while retaining near-complete language compatibility.[41] As of 14 July 2014[update], WordPress-based benchmarks, which served as the main benchmark suite for the phpng project, showed an almost 100% increase in performance. Changes from phpng are also expected to make it easier to improve performance in the future, as more compact data structures and other changes are seen as better suited for a successful migration to a just-in-time (JIT) compiler.[42] Because of the significant changes, the reworked Zend Engine is called Zend Engine 3, succeeding Zend Engine 2 used in PHP 5.[43] Because of major internal changes in phpng, it must receive a new major version number of PHP, rather than a minor PHP 5 release, according to PHP's release process.[44] Major versions of PHP are allowed to break backward-compatibility of code and therefore PHP 7 presented an opportunity for other improvements beyond phpng that require backward-compatibility breaks, including wider use of exceptions,[45][46] reworking variable syntax to be more consistent and complete,[47] and the deprecation or removal of various legacy features.[48][49] PHP 7 also introduced new language features, including return type declarations for functions,[50] which complement the existing parameter type declarations, and support for the scalar types (integer, float, string, and boolean) in parameter and return type declarations.[51] Release history[edit] Key Color Meaning Development Red Old release No development Yellow Stable release Security fixes Green Stable release Bug and security fixes Blue Future release New features Version Release date Supported until[52] Notes 1.0 8 June 1995 Officially called \"Personal Home Page Tools (PHP Tools)\". This is the first use of the name \"PHP\".[5] 2.0 1 November 1997 Officially called \"PHP\/FI 2.0\". This is the first release that could actually be characterised as PHP, being a standalone language with many features that have endured to the present day. 3.0 6 June 1998 20 October 2000[52] Development moves from one person to multiple developers. Zeev Suraski and Andi Gutmans rewrite the base for this version.[5] 4.0 22 May 2000 23 June 2001[52] Added more advanced two-stage parse\/execute tag-parsing system called the Zend engine.[53] 4.1 10 December 2001 12 March 2002[52] Introduced \"superglobals\" ($_GET, $_POST, $_SESSION, etc.)[53] 4.2 22 April 2002 6 September 2002[52] Disabled register_globals by default. Data received over the network is not inserted directly into the global namespace anymore, closing possible security holes in applications.[53] 4.3 27 December 2002 31 March 2005[52] Introduced the command-line interface (CLI), to supplement the CGI.[53][54] 4.4 11 July 2005 7 August 2008[52] Fixed a memory corruption bug, which required breaking binary compatibility with extensions compiled against PHP version 4.3.x.[55] 5.0 13 July 2004 5 September 2005[52] Zend Engine II with a new object model.[56] 5.1 24 November 2005 24 August 2006[52] Performance improvements with introduction of compiler variables in re-engineered PHP Engine.[56] Added PHP Data Objects (PDO) as a consistent interface for accessing databases.[57] 5.2 2 November 2006 6 January 2011[52] Enabled the filter extension by default. Native JSON support.[56] 5.3 30 June 2009 14 August 2014[52] Namespace support; late static bindings, jump label (limited goto), closures, PHP archives (phar), garbage collection for circular references, improved Windows support, sqlite3, mysqlnd as a replacement for libmysql as underlying library for the extensions that work with MySQL, fileinfo as a replacement for mime_magic for better MIME support, the Internationalization extension, and deprecation of ereg extension. 5.4 1 March 2012 3 September 2015[52] Trait support, short array syntax support. Removed items: register_globals, safe_mode, allow_call_time_pass_reference, session_register(), session_unregister() and session_is_registered(). Built-in web server.[58] Several improvements to existing features, performance and reduced memory requirements. 5.5 20 June 2013 21 July 2016[52] Support for generators, finally blocks for exceptions handling, OpCache (based on Zend Optimizer+) bundled in official distribution.[59] 5.6 28 August 2014 31 December 2018[60] Constant scalar expressions, variadic functions, argument unpacking, new exponentiation operator, extensions of the use statement for functions and constants, new phpdbg debugger as a SAPI module, and other smaller improvements.[61] 6.x Not released N\/A Abandoned version of PHP that planned to include native Unicode support.[62][63] 7.0 3 December 2015[2] 3 December 2018[60] Zend Engine 3 (performance improvements[42] and 64-bit integer support on Windows[64]), uniform variable syntax,[47] AST-based compilation process,[65] added Closure::call(),[66] bitwise shift consistency across platforms,[67] ?? (null coalesce) operator,[68] Unicode codepoint escape sequence,[69] return type declarations,[50] scalar type (integer, float, string and boolean) declarations,[51] \"spaceship\" three-way comparison operator,[70] generator delegation,[71] anonymous classes,[72] simpler and more consistently available CSPRNG API,[73] replacement of many remaining internal PHP \"errors\" with the more modern exceptions,[45] and shorthand syntax for importing multiple items from a namespace.[74] 7.1 1 December 2016[75][76] 1 December 2019[60] void return type,[77] class constant visibility modifiers,[78] nullable types,[79] iterable pseudo-type,[80] catching multiple exception types.[81] 7.2 30 November 2017[82] 30 November 2020[60] Beginning on June 28, 2011, the PHP Group implemented a timeline for the release of new versions of PHP.[44] Under this system, at least one release should occur every month. Once per year, a minor release should occur which may include new features. Every minor release should at least be supported for two years with security and bug fixes, followed by at least one year of only security fixes, for a total of a three-year release process for every minor release. No new features, unless small and self-contained, are to be introduced into a minor release during the three-year release process. Mascot[edit] The elePHPant, PHP mascot. The mascot of the PHP project is the elePHPant, a blue elephant with the PHP logo on its side, designed by Vincent Pontier[83] in 1998.[84] The elePHPant is sometimes differently colored when in plush toy form. Syntax[edit] Main article: PHP syntax and semantics The following \"Hello, World!\" program is written in PHP code embedded in an HTML document: PHP Test However, as no requirement exists for PHP code to be embedded in HTML, the simplest version of Hello, World! may be written like this, with the closing tag omitted as preferred in files containing pure PHP code[85] to close PHP sections. The shortened form , in XHTML and other XML documents, creates correctly formed XML processing instructions.[92] This means that the resulting mixture of PHP code and other markup in the server-side file is itself well-formed XML. Variables are prefixed with a dollar symbol, and a type does not need to be specified in advance. PHP\u00a05 introduced type hinting that allows functions to force their parameters to be objects of a specific class, arrays, interfaces or callback functions. However, before PHP 7.0, type hints could not be used with scalar types such as integer or string.[51] Unlike function and class names, variable names are case sensitive. Both double-quoted (\"\") and heredoc strings provide the ability to interpolate a variable's value into the string.[93] PHP treats newlines as whitespace in the manner of a free-form language, and statements are terminated by a semicolon.[94] PHP has three types of comment syntax: \/* *\/ marks block and inline comments; \/\/ as well as # are used for one-line comments.[95] The echo statement is one of several facilities PHP provides to output text, e.g., to a web browser. In terms of keywords and language syntax, PHP is similar to the C style syntax. if conditions, for and while loops, and function returns are similar in syntax to languages such as C, C++, C#, Java and Perl. The following is an example of PHP for loop: Data types[edit] PHP stores integers in a platform-dependent range, either a 64-bit or 32-bit signed integer equivalent to the C-language long type. Unsigned integers are converted to signed values in certain situations; this behavior is different from that of other programming languages.[96] Integer variables can be assigned using decimal (positive and negative), octal, hexadecimal, and binary notations. Floating point numbers are also stored in a platform-specific range. They can be specified using floating point notation, or two forms of scientific notation.[97] PHP has a native Boolean type that is similar to the native Boolean types in Java and C++. Using the Boolean type conversion rules, non-zero values are interpreted as true and zero as false, as in Perl and C++.[97] The null data type represents a variable that has no value; NULL is the only allowed value for this data type.[97] Variables of the \"resource\" type represent references to resources from external sources. These are typically created by functions from a particular extension, and can only be processed by functions from the same extension; examples include file, image, and database resources.[97] Arrays can contain elements of any type that PHP can handle, including resources, objects, and other arrays. Order is preserved in lists of values and in hashes with both keys and values, and the two can be intermingled.[97] PHP also supports strings, which can be used with single quotes, double quotes, nowdoc or heredoc syntax.[98] The Standard PHP Library (SPL) attempts to solve standard problems and implements efficient data access interfaces and classes.[99] Functions[edit] PHP defines a large array of functions in the core language and many are also available in various extensions; these functions are well documented in the online PHP documentation.[100] However, the built-in library has a wide variety of naming conventions and associated inconsistencies, as described under history above. Custom functions may be defined by the developer, e.g.: function myAge($birthYear) { \/\/ defines a function, this one is named \"myAge\" $yearsOld = date('Y') - $birthYear; \/\/ calculates the age return $yearsOld . ' year' . ($yearsOld != 1 ? 's' : ''); \/\/ returns the age in a descriptive form } echo 'I am currently ' . myAge(1981) . ' old.'; \/\/ outputs the text concatenated \/\/ with the return value of myAge() \/\/ As the result of this syntax, myAge() is called. In 2017, the output of the above sample program is 'I am currently 36 years old.' In lieu of function pointers, functions in PHP can be referenced by a string containing their name. In this manner, normal PHP functions can be used, for example, as callbacks or within function tables.[101] User-defined functions may be created at any time without being prototyped.[100][101] Functions may be defined inside code blocks, permitting a run-time decision as to whether or not a function should be defined. There is a function_exists function that determines whether a function with a given name has already been defined. Function calls must use parentheses, with the exception of zero-argument class constructor functions called with the PHP operator new, in which case parentheses are optional. Until PHP 5.3, support for anonymous functions and closures did not exist in PHP. While create_function() exists since PHP 4.0.1, it is merely a thin wrapper around eval() that allows normal PHP functions to be created during program execution.[102] PHP 5.3 added syntax to define an anonymous function or \"closure\"[103] which can capture variables from the surrounding scope: function getAdder($x) { return function($y) use ($x) { return $x + $y; }; } $adder = getAdder(8); echo $adder(2); \/\/ prints \"10\" In the example above, getAdder() function creates a closure using passed argument $x (the keyword use imports a variable from the lexical context), which takes an additional argument $y, and returns the created closure to the caller. Such a function is a first-class object, meaning that it can be stored in a variable, passed as a parameter to other functions, etc.[104] Unusually for a dynamically typed language, PHP supports type declarations on function parameters, which are enforced at runtime. This has been supported for classes and interfaces since PHP\u00a05.0, for arrays since PHP\u00a05.1, for \"callables\" since PHP 5.4, and scalar (integer, float, string and boolean) types since PHP\u00a07.0.[51] PHP\u00a07.0 also has type declarations for function return types, expressed by placing the type name after the list of parameters, preceded by a colon.[50] For example, the getAdder function from the earlier example could be annotated with types like so in PHP\u00a07: function getAdder(int $x): \\Closure { return function(int $y) use ($x) : int { return $x + $y; }; } $adder = getAdder(8); echo $adder(2); \/\/ prints \"10\" echo $adder(null); \/\/ throws an exception because an incorrect type was passed $adder = getAdder([]); \/\/ would also throw an exception By default, scalar type declarations follow weak typing principles. So, for example, if a parameter's type is int, PHP would allow not only integers, but also convertible numeric strings, floats or booleans to be passed to that function, and would convert them.[51] However, PHP 7 has a \"strict typing\" mode which, when used, disallows such conversions for function calls and returns within a file.[51] Object-oriented programming[edit] Basic object-oriented programming functionality was added in PHP 3 and improved in PHP 4.[5] This allowed for PHP to gain further abstraction, making creative tasks easier for programmers using the language. Object handling was completely rewritten for PHP 5, expanding the feature set and enhancing performance.[105] In previous versions of PHP, objects were handled like value types.[105] The drawback of this method was that code had to make heavy use of PHP's \"reference\" variables if it wanted to modify an object it was passed rather than creating a copy of it. In the new approach, objects are referenced by handle, and not by value. PHP 5 introduced private and protected member variables and methods, along with abstract classes, final classes, abstract methods, and final methods. It also introduced a standard way of declaring constructors and destructors, similar to that of other object-oriented languages such as C++, and a standard exception handling model. Furthermore, PHP 5 added interfaces and allowed for multiple interfaces to be implemented. There are special interfaces that allow objects to interact with the runtime system. Objects implementing ArrayAccess can be used with array syntax and objects implementing Iterator or IteratorAggregate can be used with the foreach language construct. There is no virtual table feature in the engine, so static variables are bound with a name instead of a reference at compile time.[106] If the developer creates a copy of an object using the reserved word clone, the Zend engine will check whether a __clone() method has been defined. If not, it will call a default __clone() which will copy the object's properties. If a __clone() method is defined, then it will be responsible for setting the necessary properties in the created object. For convenience, the engine will supply a function that imports the properties of the source object, so the programmer can start with a by-value replica of the source object and only override properties that need to be changed.[107] The following is a basic example of object-oriented programming in PHP: class Person { public $firstName; public $lastName; public function __construct($firstName, $lastName = '') { \/\/ optional second argument $this->firstName = $firstName; $this->lastName = $lastName; } public function greet() { return 'Hello, my name is ' . $this->firstName . (($this->lastName != '') ? (' ' . $this->lastName) : '') . '.'; } public static function staticGreet($firstName, $lastName) { return 'Hello, my name is ' . $firstName . ' ' . $lastName . '.'; } } $he = new Person('John', 'Smith'); $she = new Person('Sally', 'Davis'); $other = new Person('iAmine'); echo $he->greet(); \/\/ prints \"Hello, my name is John Smith.\" echo ''; echo $she->greet(); \/\/ prints \"Hello, my name is Sally Davis.\" echo ''; echo $other->greet(); \/\/ prints \"Hello, my name is iAmine.\" echo ''; echo Person::staticGreet('Jane', 'Doe'); \/\/ prints \"Hello, my name is Jane Doe.\" The visibility of PHP properties and methods is defined using the keywords public, private, and protected. The default is public, if only var is used; var is a synonym for public. Items declared public can be accessed everywhere. protected limits access to inherited classes (and to the class that defines the item). private limits visibility only to the class that defines the item.[108] Objects of the same type have access to each other's private and protected members even though they are not the same instance. PHP's member visibility features have sometimes been described as \"highly useful.\"[109] However, they have also sometimes been described as \"at best irrelevant and at worst positively harmful.\"[110] Implementations[edit] The original, only complete and most widely used PHP implementation is powered by the Zend Engine and known simply as PHP. To disambiguate it from other implementations, it is sometimes unofficially referred to as \"Zend PHP\". The Zend Engine compiles PHP source code on-the-fly into an internal format that it can execute, thus it works as an interpreter.[111][112] It is also the \"reference implementation\" of PHP, as PHP has no formal specification, and so the semantics of Zend PHP define the semantics of PHP itself. Due to the complex and nuanced semantics of PHP, defined by how Zend works, it is difficult for competing implementations to offer complete compatibility. PHP's single-request-per-script-execution model, and the fact that the Zend Engine is an interpreter, leads to inefficiency; as a result, various products have been developed to help improve PHP performance. In order to speed up execution time and not have to compile the PHP source code every time the web page is accessed, PHP scripts can also be deployed in the PHP engine's internal format by using an opcode cache, which works by caching the compiled form of a PHP script (opcodes) in shared memory to avoid the overhead of parsing and compiling the code every time the script runs. An opcode cache, Zend Opcache, is built into PHP since version 5.5.[113] Another example of a widely used opcode cache is the Alternative PHP Cache (APC), which is available as a PECL extension.[114] While Zend PHP is still the most popular implementation, several other implementations have been developed. Some of these are compilers or support JIT compilation, and hence offer performance benefits over Zend PHP at the expense of lacking full PHP compatibility. Alternative implementations include the following: HipHop Virtual Machine (HHVM)\u00a0\u2013 developed at Facebook and available as open source, it converts PHP code into a high-level bytecode (commonly known as an intermediate language), which is then translated into x86-64 machine code dynamically at runtime by a just-in-time (JIT) compiler, resulting in up to 6\u00d7 performance improvements.[115] Parrot\u00a0\u2013 a virtual machine designed to run dynamic languages efficiently; Pipp transforms the PHP source code into the Parrot intermediate representation, which is then translated into the Parrot's bytecode and executed by the virtual machine. Phalanger\u00a0\u2013 compiles PHP into Common Intermediate Language (CIL) bytecode HipHop\u00a0\u2013 developed at Facebook and available as open source, it transforms the PHP scripts into C++ code and then compiles the resulting code, reducing the server load up to 50%. In early 2013, Facebook deprecated it in favor of HHVM due to multiple reasons, including deployment difficulties and lack of support for the whole PHP language, including the create_function() and eval() constructs.[116] Licensing[edit] PHP is free software released under the PHP License, which stipulates that:[117] Products derived from this software may not be called \"PHP\", nor may \"PHP\" appear in their name, without prior written permission from group@php.net. You may indicate that your software works in conjunction with PHP by saying \"Foo for PHP\" instead of calling it \"PHP Foo\" or \"phpfoo\". This restriction on use of \"PHP\" makes the PHP License incompatible with the General Public License (GPL), while the Zend License is incompatible due to an advertising clause similar to that of the original BSD license.[118] Development and community[edit] PHP includes various free and open-source libraries in its source distribution, or uses them in resulting PHP binary builds. PHP is fundamentally an Internet-aware system with built-in modules for accessing File Transfer Protocol (FTP) servers and many database servers, including PostgreSQL, MySQL, Microsoft SQL Server and SQLite (which is an embedded database), LDAP servers, and others. Numerous functions familiar to C programmers, such as those in the stdio family, are available in standard PHP builds.[119] PHP allows developers to write extensions in C to add functionality to the PHP language. PHP extensions can be compiled statically into PHP or loaded dynamically at runtime. Numerous extensions have been written to add support for the Windows API, process management on Unix-like operating systems, multibyte strings (Unicode), cURL, and several popular compression formats. Other PHP features made available through extensions include integration with IRC, dynamic generation of images and Adobe Flash content, PHP Data Objects (PDO) as an abstraction layer used for accessing databases,[120][121][122][123][124][125][126] and even speech synthesis. Some of the language's core functions, such as those dealing with strings and arrays, are also implemented as extensions.[127] The PHP Extension Community Library (PECL) project is a repository for extensions to the PHP language.[128] Some other projects, such as Zephir, provide the ability for PHP extensions to be created in a high-level language and compiled into native PHP extensions. Such an approach, instead of writing PHP extensions directly in C, simplifies the development of extensions and reduces the time required for programming and testing.[129] The PHP Group consists of ten people (as of 2015[update]): Thies C. Arntzen, Stig Bakken, Shane Caraveo, Andi Gutmans, Rasmus Lerdorf, Sam Ruby, Sascha Schumann, Zeev Suraski, Jim Winstead, Andrei Zmievski.[130] Zend Technologies provides a PHP Certification based on PHP 5.5[131] exam for programmers to become certified PHP developers. Installation and configuration[edit] There are two primary ways for adding support for PHP to a web server\u00a0\u2013 as a native web server module, or as a CGI executable. PHP has a direct module interface called Server Application Programming Interface (SAPI), which is supported by many web servers including Apache HTTP Server, Microsoft IIS, Netscape (now defunct) and iPlanet. Some other web servers, such as OmniHTTPd, support the Internet Server Application Programming Interface (ISAPI), which is a Microsoft's web server module interface. If PHP has no module support for a web server, it can always be used as a Common Gateway Interface (CGI) or FastCGI processor; in that case, the web server is configured to use PHP's CGI executable to process all requests to PHP files.[132] PHP-FPM (FastCGI Process Manager) is an alternative FastCGI implementation for PHP, bundled with the official PHP distribution since version 5.3.3.[133] When compared to the older FastCGI implementation, it contains some additional features, mostly useful for heavily loaded web servers.[134] When using PHP for command-line scripting, a PHP command-line interface (CLI) executable is needed. PHP supports a CLI SAPI as of PHP 4.3.0.[135] The main focus of this SAPI is developing shell applications using PHP. There are quite a few differences between the CLI SAPI and other SAPIs, although they do share many of the same behaviors.[136] PHP has a direct module interface called SAPI for different web servers;[137] in case of PHP\u00a05 and Apache\u00a02.0 on Windows, it is provided in form of a DLL file called php5apache2.dll,[138] which is a module that, among other functions, provides an interface between PHP and the web server, implemented in a form that the server understands. This form is what is known as a SAPI. There are different kinds of SAPIs for various web server extensions. For example, in addition to those listed above, other SAPIs for the PHP language include the Common Gateway Interface (CGI) and command-line interface (CLI).[137][139] PHP can also be used for writing desktop graphical user interface (GUI) applications, by using the PHP-GTK extension. PHP-GTK is not included in the official PHP distribution,[132] and as an extension it can be used only with PHP versions 5.1.0 and newer. The most common way of installing PHP-GTK is compiling it from the source code.[140] When PHP is installed and used in cloud environments, software development kits (SDKs) are provided for using cloud-specific features. For example: Amazon Web Services provides the AWS SDK for PHP[141] Windows Azure can be used with the Windows Azure SDK for PHP.[142] Numerous configuration options are supported, affecting both core PHP features and extensions.[143][144] Configuration file php.ini is searched for in different locations, depending on the way PHP is used.[145] The configuration file is split into various sections,[146] while some of the configuration options can be also set within the web server configuration.[147] Use[edit] A broad overview of the LAMP software bundle, displayed here together with Squid. PHP is a general-purpose scripting language that is especially suited to server-side web development, in which case PHP generally runs on a web server. Any PHP code in a requested file is executed by the PHP runtime, usually to create dynamic web page content or dynamic images used on websites or elsewhere.[148] It can also be used for command-line scripting and client-side graphical user interface (GUI) applications. PHP can be deployed on most web servers, many operating systems and platforms, and can be used with many relational database management systems (RDBMS). Most web hosting providers support PHP for use by their clients. It is available free of charge, and the PHP Group provides the complete source code for users to build, customize and extend for their own use.[8] Dynamic web page: example of server-side scripting (PHP and MySQL). PHP acts primarily as a filter,[149] taking input from a file or stream containing text and\/or PHP instructions and outputting another stream of data. Most commonly the output will be HTML, although it could be JSON, XML or binary data such as image or audio formats. Since PHP 4, the PHP parser compiles input to produce bytecode for processing by the Zend Engine, giving improved performance over its interpreter predecessor.[150] Originally designed to create dynamic web pages, PHP now focuses mainly on server-side scripting,[151] and it is similar to other server-side scripting languages that provide dynamic content from a web server to a client, such as Microsoft's Classic ASP, Sun Microsystems' JavaServer Pages,[152] and mod_perl. PHP has also attracted the development of many software frameworks that provide building blocks and a design structure to promote rapid application development (RAD). Some of these include PRADO, CakePHP, Symfony, CodeIgniter, Laravel, Yii Framework, Phalcon and Zend Framework, offering features similar to other web frameworks. The LAMP architecture has become popular in the web industry as a way of deploying web applications.[153] PHP is commonly used as the P in this bundle alongside Linux, Apache and MySQL, although the P may also refer to Python, Perl, or some mix of the three. Similar packages, WAMP and MAMP, are also available for Windows and macOS, with the first letter standing for the respective operating system. Although both PHP and Apache are provided as part of the macOS base install, users of these packages seek a simpler installation mechanism that can be more easily kept up to date. As of April 2007[update], over 20 million Internet domains had web services hosted on servers with PHP installed and mod_php was recorded as the most popular Apache HTTP Server module.[154] As of May 2017[update], PHP was used as the server-side programming language on 83% of 10 million most popular websites.[155] Web content management systems written in PHP include MediaWiki,[156] Joomla,[157] eZ Publish, eZ Platform, SilverStripe,[158] WordPress,[159] Drupal,[160] and Moodle.[161] Websites written in PHP, in back-end and\/or user-facing portion, include Facebook,[162] Digg,[163] Tumblr,[164] Dailymotion,[165] and Slack.[166] For specific and more advanced usage scenarios, PHP offers a well defined and documented way for writing custom extensions in C or C++.[167][168][169][170][171][172][173] Besides extending the language itself in form of additional libraries, extensions are providing a way for improving execution speed where it is critical and there is room for improvements by using a true compiled language.[174][175] PHP also offers well defined ways for embedding itself into other software projects. That way PHP can be easily used as an internal scripting language for another project, also providing tight interfacing with the project's specific internal data structures.[176] PHP received mixed reviews due to lacking support for multithreading at the core language level,[177] though using threads is made possible by the \"pthreads\" PECL extension.[178][179] As of January 2013[update], PHP was used in more than 240 million websites (39% of those sampled) and was installed on 2.1 million web servers.[180] Security[edit] In 2013, 9% of all vulnerabilities listed by the National Vulnerability Database were linked to PHP;[181] historically, about 30% of all vulnerabilities listed since 1996 in this database are linked to PHP. Technical security flaws of the language itself or of its core libraries are not frequent (these numbered 22 in 2009, which was about 1% of the total, although PHP applies to about 20% of programs listed.)[182] Recognizing that programmers make mistakes, some languages include taint checking to automatically detect the lack of input validation which induces many issues. Such a feature is being developed for PHP,[183] but its inclusion into a release has been rejected several times in the past.[184][185] There are advanced protection patches, such as Suhosin and Hardening-Patch, that are especially designed for web hosting environments,[186] primarily due to these environments being seen as places where carelessly written code may run. There are certain language features and configuration parameters (primarily the default values for such runtime settings) that make PHP applications prone to security issues. Among these, magic_quotes_gpc and register_globals[187] configuration directives are the best known; the latter made any URL parameters become PHP variables, opening a path for serious security vulnerabilities by allowing an attacker to set the value of any uninitialized global variable and interfere with the execution of a PHP script. Support for \"magic quotes\" and \"register globals\" has been deprecated as of PHP 5.3.0, and removed as of PHP 5.4.0.[188] Another example for the runtime settings vulnerability comes from failing to disable PHP execution (via engine configuration directive)[189] for the directory where uploaded images are stored; leaving the default settings can result in execution of malicious PHP code embedded within the uploaded images.[190][191][192] Also, leaving enabled the dynamic loading of PHP extensions (via enable_dl configuration directive)[193] in a shared web hosting environment can lead to security issues.[194][195] Also, implied type conversions that result in incompatible values being treated as identical against the programmer's intent can lead to security issues. For example, the result of the comparison \"0e1234\" == \"0\" comparison is true because the first compared value is treated as scientific notation having the value (0\u00d7101234), i.e. zero. This feature resulted in authentication vulnerabilities in Simple Machines Forum,[196] Typo3[197] and phpBB[198] when MD5 password hashes were compared. Instead, either the function strcmp or the identity operator (===) should be used; \"0e1234\" === \"0\" results in false.[199] In a 2013 analysis of over 170,000 website defacements, published by Zone-H, the most frequently (53%) used technique was exploitation of file inclusion vulnerability, mostly related to insecure usage of the PHP functions include, require, and allow_url_fopen.[200][201] See also[edit] Computer programming portal Free software portal Comparison of programming languages Comparison of web frameworks Hack (programming language) PEAR (PHP Extension and Application Repository) PHP accelerator PHP Extension Community Library (PECL) PHP-GTK List of AMP packages List of PHP accelerators List of PHP editors Template processor XAMPP (Free and open source cross-platform web server solution stack package) Zend Server References[edit] ^ a b Lerdorf, Rasmus (2007-04-26). \"PHP on Hormones\u00a0\u2013 history of PHP presentation by Rasmus Lerdorf given at the MySQL Conference in Santa Clara, California\". The Conversations Network. Retrieved 2009-12-11.\u00a0 ^ a b \"PHP: PHP 7 ChangeLog\". php.net. Retrieved 6 July 2017.\u00a0 ^ \"Type hinting\". PHP.net. Retrieved 5 September 2016.\u00a0 ^ a b \"History of PHP\". php.net.\u00a0 ^ a b c d e f g h i \"History of PHP and related projects\". The PHP Group. Retrieved 2008-02-25.\u00a0 ^ PHP Manual: Preface, www.php.net ^ \"Introduction: What can PHP do?\". PHP Manual. Retrieved 2009-03-05.\u00a0 ^ a b \"Embedding PHP in HTML\". O'Reilly. 2001-05-03. Retrieved 2008-02-25.\u00a0 ^ Jackson, Joab (2014-07-31). \"PHP gets a formal specification, at last\". ITworld. IDG.\u00a0 ^ Lerdorf, Rasmus (2012-07-20). \"I wonder why people keep writing that PHP was ever written in Perl. It never was. #php\". Twitter. Retrieved 2014-09-04.\u00a0 ^ Lerdorf, Rasmus (2007-04-26). \"PHP on Hormones\" (mp3). The Conversations Network. Retrieved 2009-06-22.\u00a0 ^ Lerdorf, Rasmus (2007). \"Slide 3\". slides for 'PHP on Hormones' talk. The PHP Group. Retrieved 2009-06-22.\u00a0 ^ Lerdorf, Rasmus (June 8, 1995). \"Announce: Personal Home Page Tools (PHP Tools)\". Retrieved 7 June 2011.\u00a0 ^ Lerdorf, Rasmus (1995-06-08). \"Announce: Personal Home Page Tools (PHP Tools)\". Newsgroup:\u00a0comp.infosystems.www.authoring.cgi. Retrieved 2006-09-17.\u00a0 ^ \"Rasmus Lerdorf, Senior Technical Yahoo: PHP, Behind the Mic\". 2003-11-19. Archived from the original on 2013-07-28.\u00a0, cited at Felipe Ribeiro (Aug 7, 2012). \"This Is Not Another \"PHP Sucks\" Article\".\u00a0 ^ \"Problems with PHP\". Retrieved 20 December 2010.\u00a0 ^ \"php.internals: Re: Function name consistency\". news.php.net. 2013-12-28. Retrieved 2014-02-09.\u00a0 ^ Rasmus Lerdorf (Dec 16, 2013). \"Re: Flexible function naming\". Newsgroup:\u00a0php.internals. Retrieved December 26, 2013.\u00a0 ^ \"PHP - Acronym Meaning Vote\". PHP.net. Archived from the original on August 15, 2000.\u00a0 ^ \"Zend Engine version 2.0: Feature Overview and Design\". Zend Technologies Ltd. Retrieved 2006-09-17.\u00a0 ^ \"php.net 2007 news archive\". The PHP Group. 2007-07-13. Retrieved 2008-02-22.\u00a0 ^ Kerner, Sean Michael (2008-02-01). \"PHP 4 is Dead\u2014Long Live PHP 5\". InternetNews. Retrieved 2008-03-16.\u00a0 ^ Trachtenberg, Adam (2004-07-15). \"Why PHP 5 Rocks!\". O'Reilly. Retrieved 2008-02-22.\u00a0 ^ \"Late Static Binding in PHP\". Digital Sandwich. 2006-02-23. Retrieved 2008-03-25.\u00a0 ^ \"Static Keyword\". The PHP Group. Retrieved 2008-03-25.\u00a0 ^ \"GoPHP5\". Archived from the original on 2011-07-17.\u00a0 ^ GoPHP5. \"PHP projects join forces to Go PHP 5\" (PDF). GoPHP5 Press Release. Archived from the original (PDF) on 2009-12-10. Retrieved 2008-02-23.\u00a0 ^ \"GoPHP5\". GoPHP5. Archived from the original on 2011-04-27. Retrieved 2008-02-22.\u00a0 ^ \"PHP Installation and Configuration\". www.php.net. Retrieved 2013-10-29.\u00a0 ^ \"PHP for Windows: Binaries and sources releases (5.3)\". php.net. Retrieved 2013-10-29.\u00a0 ^ \"PHP for Windows: Binaries and sources releases (5.4)\". php.net. Retrieved 2013-10-29.\u00a0 ^ \"PHP for Windows: Binaries and sources releases (5.5)\". php.net. Retrieved 2013-10-29.\u00a0 ^ Andrei Zmievski (2005-08-10). \"PHP Unicode support design document (mailing list post)\". Retrieved 2014-02-09.\u00a0 ^ \"PHP 5.5 or 6.0\". Retrieved 2014-02-09.\u00a0 ^ Andrei Zmievski. \"The Good, the Bad, and the Ugly: What Happened to Unicode and PHP 6\". Retrieved 2014-02-09.\u00a0 ^ Rasmus Lerdorf (2010-03-11). \"PHP 6 (mailing list post)\". Retrieved 2014-02-07.\u00a0 ^ \"The Neverending Muppet Debate of PHP 6 v PHP 7\".\u00a0 ^ \"RFC: Name of Next Release of PHP\". php.net. 2014-07-07. Retrieved 2014-07-15.\u00a0 ^ \"Re: [PHP-DEV] [VOTE][RFC] Name of Next Release of PHP (again)\". 2014-07-30. Retrieved 2014-07-30.\u00a0 ^ \"php.internals: phpng: Refactored PHP Engine with Big Performance Improvement\".\u00a0 ^ \"PHP: rfc:phpng\". php.net. Retrieved 16 December 2014.\u00a0 ^ a b \"PHP: phpng\". php.net. Retrieved 2014-07-15.\u00a0 ^ \"Merge branch 'ZendEngine3'\". github.com. 2014-12-05. Retrieved 2014-12-05.\u00a0 ^ a b \"PHP: Release Process\". 2011-06-20. Retrieved 2013-10-06.\u00a0 ^ a b \"PHP RFC: Exceptions in the engine (for PHP 7)\". php.net. Retrieved 2015-05-21.\u00a0 ^ \"PHP RFC: Constructor behaviour of internal classes\". php.net. Retrieved 2015-05-21.\u00a0 ^ a b \"PHP RFC: Uniform Variable Syntax\". php.net. 2014-05-31. Retrieved 2014-07-30.\u00a0 ^ \"PHP RFC: Removal of dead or not yet PHP7 ported SAPIs and extensions\". php.net. Retrieved 2015-05-21.\u00a0 ^ \"PHP RFC: Remove alternative PHP tags\". php.net. Retrieved 2015-05-21.\u00a0 ^ a b c \"RFC: Return Types\". php.net. 2015-01-27. Retrieved 2015-01-28.\u00a0 ^ a b c d e f \"RFC: Scalar Type Declarations\". php.net. 2015-03-16. Retrieved 2015-03-17.\u00a0 ^ a b c d e f g h i j k l m \"Unsupported Branches\". php.net. Retrieved 2015-11-14.\u00a0 ^ a b c d \"PHP: PHP 4 ChangeLog\". The PHP Group. 2008-01-03. Retrieved 2008-02-22.\u00a0 ^ \"Using PHP from the command line\". PHP Manual. The PHP Group. Retrieved 2009-09-11.\u00a0 ^ \"PHP 4.4.0 Release Announcement\". PHP Mannual. The PHP Group. Retrieved 2013-11-24.\u00a0 ^ a b c \"PHP: PHP 5 ChangeLog\". The PHP Group. 2007-11-08. Retrieved 2008-02-22.\u00a0 ^ \"PHP manual: PDO\". The PHP Group. 2011-11-15. Retrieved 2011-11-15.\u00a0 ^ \"Built-in web server\". Retrieved March 26, 2012.\u00a0 ^ \"PHP 5.5.0 changes\". php.net. Retrieved 2015-03-03.\u00a0 ^ a b c d \"Supported Versions\". php.net. Retrieved 2015-12-02.\u00a0 ^ \"Migrating from PHP 5.5.x to PHP 5.6.x\". php.net. Retrieved 2014-03-24.\u00a0 ^ \"Resetting PHP 6\". There have been books on the shelves purporting to cover PHP 6 since at least 2008. But, in March 2010, the PHP 6 release is not out - in fact, it is not even close to out. Recent events suggest that PHP 6 will not be released before 2011 - if, indeed, it is released at all.\u00a0 ^ \"PHP 7 moves full speed ahead\". Recent versions of PHP have been part of the 5.x release series, but there will be no PHP 6. \u201cWe\u2019re going to skip [version] 6 because years ago, we had plans for a 6 but those plans were very different from what we\u2019re doing now,\u201d Gutmans said. Going right to version 7 avoids confusion.\u00a0 ^ \"PHP: rfc:size_t_and_int64_next\". php.net. Retrieved 16 December 2014.\u00a0 ^ \"PHP: rfc:abstract_syntax_tree\". php.net. Retrieved 16 December 2014.\u00a0 ^ \"PHP: rfc:closure_apply\". php.net. Retrieved 16 December 2014.\u00a0 ^ \"PHP: rfc:integer_semantics\". php.net. Retrieved 16 December 2014.\u00a0 ^ \"PHP: rfc:isset_ternary\". php.net. Retrieved 16 December 2014.\u00a0 ^ \"RFC: Unicode Codepoint Escape Syntax\". 2014-11-24. Retrieved 2014-12-19.\u00a0 ^ \"Combined Comparison (Spaceship) Operator\". php.net. Retrieved 2015-05-21.\u00a0 ^ \"PHP RFC: Generator Delegation\". php.net. Retrieved 2015-05-21.\u00a0 ^ \"PHP RFC: Anonymous Classes\". php.net. Retrieved 2015-05-21.\u00a0 ^ \"PHP RFC: Easy User-land CSPRNG\". php.net. Retrieved 2015-05-21.\u00a0 ^ \"PHP RFC: Group Use Declarations\". php.net. Retrieved 2015-05-21.\u00a0 ^ \"Preparation Tasks\". Retrieved 5 July 2016.\u00a0 ^ \"PHP 7.1.0 GA - Externals\". externals.io. Retrieved 2016-11-30.\u00a0 ^ \"PHP: rfc:void_return_type\". php.net. 2015-11-09. Retrieved 2015-11-14.\u00a0 ^ \"PHP: rfc:class_constant_visibility\". php.net. 2015-10-27. Retrieved 2015-12-08.\u00a0 ^ \"PHP RFC: Nullable Types\". php.net. 2014-04-10. Retrieved 2016-06-14.\u00a0 ^ \"PHP RFC: Iterable\". php.net. 2016-06-10. Retrieved 2017-02-19.\u00a0 ^ \"PHP RFC: Catching Multiple Exception Types\". php.net. 2016-03-06. Retrieved 2017-02-19.\u00a0 ^ \"Preparation Tasks\". Retrieved 28 May 2017.\u00a0 ^ \"PHP: ElePHPant\". 4 Oct 2014. Retrieved 4 Oct 2014.\u00a0 ^ \"What is ElePHPant and Why PHP Uses Elephants in Some Logotypes?\".\u00a0 ^ \"tags - Manual\". php.net. Retrieved 2014-02-17.\u00a0 ^ a b \"PHP: rfc:shortags\". php.net. 2008-04-03. Retrieved 2014-05-08.\u00a0 ^ \"PHP: Basic syntax\". The PHP Group. Retrieved 2008-02-22.\u00a0 ^ \"Basic Coding Standard\". PHP Framework Interoperability Group. Retrieved 2016-01-03.\u00a0 ^ \"echo - Manual\". php.net. Retrieved 2014-02-17.\u00a0 ^ \"Description of core php.ini directives - Manual\". php.net. 2002-03-17. Retrieved 2014-02-17.\u00a0 ^ \"Your first PHP-enabled page\". The PHP Group. Retrieved 2008-02-25.\u00a0 ^ Bray, Tim; et al. (26 November 2008). \"Processing Instructions\". Extensible Markup Language (XML) 1.0 (Fifth Edition). W3C. Retrieved 2009-06-18.\u00a0 ^ \"Variables\". The PHP Group. Retrieved 2008-03-16.\u00a0 ^ \"Instruction separation\". The PHP Group. Retrieved 2008-03-16.\u00a0 ^ \"Comments\". The PHP Group. Retrieved 2008-03-16.\u00a0 ^ \"Integers in PHP, running with scissors, and portability\". MySQL Performance Blog. March 27, 2007. Retrieved 2007-03-28.\u00a0 ^ a b c d e \"Types\". The PHP Group. Retrieved 2008-03-16.\u00a0 ^ \"Strings\". The PHP Group. Retrieved 2008-03-21.\u00a0 ^ \"SPL \u2013 StandardPHPLibrary\". PHP.net. March 16, 2009. Retrieved 2009-03-16.\u00a0 ^ a b \"User-defined functions (PHP manual)\". php.net. 2014-07-04. Retrieved 2014-07-07.\u00a0 ^ a b \"Variable functions (PHP manual)\". php.net. 2014-07-04. Retrieved 2014-07-07.\u00a0 ^ \"create_function() (PHP manual)\". php.net. 2014-07-04. Retrieved 2014-07-07.\u00a0 ^ \"Anonymous functions (PHP manual)\". php.net. 2014-07-04. Retrieved 2014-07-07.\u00a0 ^ Christian Seiler; Dmitry Stogov (2008-07-01). \"Request for Comments: Lambda functions and closures\". php.net. Retrieved 2014-07-07.\u00a0 ^ a b \"PHP 5 Object References\". mjtsai.com. Retrieved 2008-03-16.\u00a0 ^ \"Classes and Objects (PHP 5)\". The PHP Group. Retrieved 2008-03-16.\u00a0 ^ \"Object cloning\". The PHP Group. Retrieved 2008-03-16.\u00a0 ^ \"Visibility (PHP Manual)\". theserverpages.com. 2005-05-19. Retrieved 2010-08-26.\u00a0 ^ Gervasio, Alejandro. \"More on Private Methods with PHP 5 Member Visibility\". devshed.com. Retrieved 24 November 2010.\u00a0 ^ \"Visibility in PHP: Public, Private and Protected\". aperiplus.sourceforge.net. Retrieved 2010-08-26.\u00a0 ^ \"How do computer languages work?\". Retrieved 2009-11-04.\u00a0 ^ (Gilmore 2006, p.\u00a043) ^ \"[VOTE] Integrating Zend Optimizer+ into the PHP distribution\". news.php.net. Retrieved 2013-03-08.\u00a0 ^ \"Alternative PHP Cache\". PHP.net. Retrieved 2013-09-21.\u00a0 ^ \"We are the 98.5% (and the 16%) \u00ab\u00a0HipHop Virtual Machine\". hhvm.com. December 2013. Retrieved 2014-02-23.\u00a0 ^ \"Announcement on GitHub removing HPHPc support\". Retrieved 2013-05-24.\u00a0 ^ \"The PHP License, version 3.01\". Retrieved 2010-05-20.\u00a0 ^ \"GPL-Incompatible, Free Software Licenses\". Various Licenses and Comments about Them. Free Software Foundation. Retrieved 2011-01-03.\u00a0 ^ \"PHP: Function and Method listing - Manual\". The PHP Group. Retrieved 2015-01-14.\u00a0 ^ \"Introduction - Manual\". php.net. 2013-06-07. Retrieved 2013-06-13.\u00a0 ^ Darryl Patterson (5 August 2004). \"Simplify Business Logic with PHP DataObjects - O'Reilly Media\". ibm.com. Retrieved 16 December 2014.\u00a0 ^ \"IBM - United States\". IBM - United States. Retrieved 16 December 2014.\u00a0 ^ \"Five common PHP database problems\". ibm.com. 2006-08-01. Retrieved 2013-06-13.\u00a0 ^ \"IBM Redbooks - Developing PHP Applications for IBM Data Servers\". redbooks.ibm.com. Retrieved 16 December 2014.\u00a0 ^ \"php[architect] Magazine - The Journal for PHP Programmers\".\u00a0 ^ Krill, Paul (19 October 2005). \"PHP catching on at enterprises, vying with Java\". InfoWorld. Archived from the original on 13 July 2014.\u00a0 ^ \"Cross Reference: \/PHP_5_4\/ext\/standard\/\". php.net. Retrieved 16 December 2014.\u00a0 ^ \"Developing Custom PHP Extensions\". devnewz.com. 2002-09-09. Archived from the original on 2008-02-18. Retrieved 2008-02-25.\u00a0 ^ \"Why Zephir?\". zephir-lang.com. 2015-10-20. Retrieved 2015-12-14.\u00a0 ^ \"PHP Credits\". php.net. Retrieved 2015-07-29.\u00a0 ^ \"Zend - Services - Certification - Php Certification\".\u00a0 ^ a b \"General Installation Considerations\". php.net. Retrieved 2013-09-22.\u00a0 ^ \"News Archive: PHP 5.3.3 Released!\". php.net. 2010-07-22.\u00a0 ^ \"FastCGI Process Manager (FPM)\". php.net. Retrieved 2013-09-22.\u00a0 ^ \"Command line usage: Introduction\". php.net. Retrieved 2013-09-22.\u00a0 ^ \"Command line usage: Differences to other SAPIs\". php.net. Retrieved 2013-09-22.\u00a0 ^ a b \"General Installation Considerations\". php.net. Retrieved 2013-09-22.\u00a0 ^ \"PHP: Apache 2.x on Microsoft Windows\". php.net. Retrieved 2013-09-22.\u00a0 ^ \"Command line usage: Introduction\". php.net. Retrieved 2013-09-22.\u00a0 ^ \"Installing PHP-GTK 2\". php.net. Retrieved 2013-09-22.\u00a0 ^ \"AWS SDK for PHP\". aws.amazon.com. Retrieved 2014-03-06.\u00a0 ^ \"Windows Azure SDK for PHP - Interoperability Bridges and Labs Center\". interoperabilitybridges.com. Retrieved 2014-03-06.\u00a0 ^ \"Runtime configuration: Table of contents\". php.net. Retrieved 2013-09-22.\u00a0 ^ \"php.ini directives: List of php.ini directives\". php.net. Retrieved 2013-09-22.\u00a0 ^ \"Runtime configuration: The configuration file\". PHP.net. Retrieved 2013-09-22.\u00a0 ^ \"php.ini directives: List of php.ini sections\". PHP.net. Retrieved 2013-09-22.\u00a0 ^ \"Runtime configuration: Where a configuration setting may be set\". PHP.net. Retrieved 2013-09-22.\u00a0 ^ \"PHP Manual Image Processing and GD;\". php.net. Retrieved 2011-04-09.\u00a0 ^ Archived June 11, 2008, at the Wayback Machine. ^ \"PHP and MySQL\". University of Alabama. Archived from the original on 2008-02-28. Retrieved 2008-02-25.\u00a0 ^ \"PHP Server-Side Scripting Language\". Indiana University. 2007-04-04. Retrieved 2008-02-25.\u00a0 ^ \"JavaServer Pages Technology\u00a0\u2014 JavaServer Pages Comparing Methods for Server-Side Dynamic Content White Paper\". Sun Microsystems. Retrieved 2008-02-25.\u00a0 ^ \"Five simple ways to tune your LAMP application\".\u00a0 ^ \"PHP: PHP Usage Stats\". SecuritySpace. 2007-04-01. Retrieved 2008-02-24.\u00a0 ^ \"Usage of server-side programming languages for websites\". W3Techs. 2010-10-29. Retrieved 2010-10-29.\u00a0 ^ \"Manual:Installation requirements#PHP\". MediaWiki. 2010-01-25. Retrieved 2010-02-26. PHP is the programming language in which MediaWiki is written [...]\u00a0 ^ Kempkens, Alex. \"Joomla! - Content Management System to build websites & apps\".\u00a0 ^ \"Server requirements of SilverStripe\". Retrieved 13 October 2014. SilverStripe requires PHP 5.3.2+\u00a0 ^ \"About WordPress\". Retrieved 2010-02-26. WordPress was [...] built on PHP\u00a0 ^ \"PHP and Drupal\". Drupal.org. Retrieved 2010-06-13.\u00a0 ^ \"About\". Moodle.org. Retrieved 2009-12-20.\u00a0 ^ \"PHP and Facebook | Facebook\". Blog.facebook.com. Retrieved 2009-07-29.\u00a0 ^ \"PHP and Digg\". O'Reilly. Retrieved 2010-06-13.\u00a0 ^ \"PHP 7 at Tumblr\". Tumblr Engineering. 4 November 2016.\u00a0 ^ \"PHP 7 deployment at Dailymotion\". Dailymotion engineering blog. 3 October 2016.\u00a0 ^ \"Taking PHP Seriously\". Slack Engineering Blog. 12 October 2016.\u00a0 ^ \"PHP at the core: Extension structure\". PHP.net. Retrieved 2013-09-22.\u00a0 ^ \"PHP at the core: The \"counter\" Extension \u2013 A Continuing Example\". PHP.net. Retrieved 2013-09-22.\u00a0 ^ \"Extension Writing Part I: Introduction to PHP and Zend\". Zend Technologies. 2005-03-01. Retrieved 2013-09-22.\u00a0 ^ \"Extension Writing Part II: Parameters, Arrays, and ZVALs\". Zend Technologies. 2005-06-06. Retrieved 2013-09-22.\u00a0 ^ \"Extension Writing Part II: Parameters, Arrays, and ZVALs (continued)\". Zend Technologies. 2005-06-06. Retrieved 2013-09-22.\u00a0 ^ \"Extension Writing Part III: Resources\". Zend Technologies. 2006-05-12. Retrieved 2013-09-22.\u00a0 ^ \"Wrapping C++ Classes in a PHP Extension\". Zend Technologies. 2009-04-22. Retrieved 2013-09-22.\u00a0 ^ \"Extending PHP with C++?\". Stack Overflow. Retrieved 2013-09-22.\u00a0 ^ \"How can I use C++ code to interact with PHP?\". Stack Overflow. Retrieved 2013-09-22.\u00a0 ^ Golemon, Sara (2006). Extending and Embedding PHP. ISBN\u00a0978-0-672-32704-9.\u00a0 ^ \"Bug Request #46919: Multi threading\". PHP.net. Retrieved 2013-09-22.\u00a0 ^ \"pthreads: Introduction (PHP Manual)\". PHP.net. Retrieved 2013-09-22.\u00a0 ^ \"PECL\u00a0:: Package\u00a0:: pthreads\". pecl.php.net. Retrieved 2014-02-09.\u00a0 ^ Ide, Andy (2013-01-31). \"PHP just grows & grows\". Retrieved 2013-04-01.\u00a0 ^ \"National Vulnerability Database (NVD) Search Vulnerabilities\". Retrieved 2014-03-19.\u00a0 ^ \"PHP-related vulnerabilities on the National Vulnerability Database\". 2012-07-05. Retrieved 2013-04-01.\u00a0 ^ \"PHP Taint Mode RFC\".\u00a0 ^ \"Developer Meeting Notes, Nov. 2005\".\u00a0 ^ \"Taint mode decision, November 2007\".\u00a0 ^ \"Hardened-PHP Project\". 2008-08-15.\u00a0 ^ \"Security: Using Register Globals\". PHP Manual. PHP.net. Retrieved 2013-09-22.\u00a0 ^ \"Magic Quotes\". PHP Manual. PHP.net. Retrieved 2014-01-17.\u00a0 ^ \"'engine' configuration directive\". PHP: Runtime Configuration. PHP.net. Retrieved 2014-02-13.\u00a0 ^ \"PHP Security Exploit With GIF Images\". 2007-06-22. Retrieved 2013-09-22.\u00a0 ^ \"PHP security exploit with GIF images\". PHP Classes blog. 2007-06-20. Retrieved 2013-09-22.\u00a0 ^ \"Passing Malicious PHP Through getimagesize()\". 2007-06-04. Retrieved 2013-09-22.\u00a0 ^ \"'enable_dl' configuration directive\". PHP: Runtime Configuration. PHP.net. Retrieved 2014-02-13.\u00a0 ^ \"PHP function reference: dl()\". PHP.net. Retrieved 2013-09-22.\u00a0 ^ \"My host won't fix their Trojan\". WebHosting Talk. Retrieved 2013-09-22.\u00a0 ^ Raz0r. \"Simple Machines Forum","tags":"","url":"https:\/\/en.wikipedia.org\/wiki\/PHP"},{"title":"Apache HTTP Server - Wikipedia","text":"Apache HTTP Server From Wikipedia, the free encyclopedia Jump to: navigation, search This article may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. The talk page may contain suggestions. (September 2010) (Learn how and when to remove this template message) Apache HTTP Server Original author(s) Robert McCool Developer(s) Apache Software Foundation Initial release 1995; 22\u00a0years ago\u00a0(1995)[1] Stable release 2.4.27 (July\u00a011, 2017; 1 day ago\u00a0(2017-07-11)) [\u00b1] Repository svn.apache.org\/repos\/asf\/httpd\/httpd Development status Active Written in C,[2] XML[3] Operating system Unix-like, Windows[4] Type Web server License Apache License 2.0 Website httpd.apache.org Apache HTTP Server, colloquially called Apache (\/\u0259\u02c8p\u00e6t\u0283i\u02d0\/ \u0259-PA-chee), is free and open-source cross-platform web server software, released under the terms of Apache License 2.0. Apache is developed and maintained by an open community of developers under the auspices of the Apache Software Foundation. Apache HTTP Server is cross-platform, meaning that it is built for Unix-like systems (e.g., macOS, Linux and FreeBSD) as well as Windows. However, As of 1 June 2017[update], 92.26% of all Apache HTTPS Server copies ran on Linux distributions.[5] Version 2.0 improved support for non-Unix, e.g. Windows and OS\/2 (and eComStation).[6] Old versions of Apache were ported to run on e.g. OpenVMS,[7] and NetWare. Originally based on the NCSA HTTPd server, development of Apache began in early 1995 after work on the NCSA code stalled. Apache played a key role in the initial growth of the World Wide Web,[8] quickly overtaking NCSA HTTPd as the dominant HTTP server, and has remained most popular since April 1996. In 2009, it became the first web server software to serve more than 100 million websites.[9] As of July 2016[update], Apache remained the most widely used web server software, estimated to serve 46% of all active websites and 43% of the top million websites.[10] Contents 1 Name 2 Feature overview 3 HTTP server and proxy features 4 Performance 5 Licensing 5.1 Versions 6 Development 7 See also 8 References 9 External links Name[edit] According to the FAQ in the Apache project website, the name Apache was chosen out of respect to the Native American tribe Apache and their superior skills in warfare and strategy. The name was widely believed to be a pun on 'A Patchy Server' (since it was a set of software patches).[11] Official documentation used to give this explanation of the name,[12][13] but in a 2000 interview, Brian Behlendorf, one of the creators of Apache, set the record straight:[14] The name literally came out of the blue. I wish I could say that it was something fantastic, but it was out of the blue. I put it on a page and then a few months later when this project started, I pointed people to this page and said: \"Hey, what do you think of that idea?\" ... Someone said they liked the name and that it was a really good pun. And I was like, \"A pun? What do you mean?\" He said, \"Well, we're building a server out of a bunch of software patches, right? So it's a patchy Web server.\" I went, \"Oh, all right.\" ... When I thought of the name, no. It just sort of connotated: \"Take no prisoners. Be kind of aggressive and kick some ass.\" When Apache is running, its process name is sometimes httpd, which is short for \"HTTP daemon.\" Feature overview[edit] Apache supports a variety of features, many implemented as compiled modules which extend the core functionality. These can range from server-side programming language support to authentication schemes. Some common language interfaces support Perl, Python, Tcl, and PHP. Popular authentication modules include mod_access, mod_auth, mod_digest, and mod_auth_digest, the successor to mod_digest. A sample of other features include Secure Sockets Layer and Transport Layer Security support (mod_ssl), a proxy module (mod_proxy), a URL rewriting module (mod_rewrite), custom log files (mod_log_config), and filtering support (mod_include and mod_ext_filter). Popular compression methods on Apache include the external extension module, mod_gzip, implemented to help with reduction of the size (weight) of Web pages served over HTTP. ModSecurity is an open source intrusion detection and prevention engine for Web applications. Apache logs can be analyzed through a Web browser using free scripts, such as AWStats\/W3Perl or Visitors. Virtual hosting allows one Apache installation to serve many different Web sites. For example, one machine with one Apache installation could simultaneously serve www.example.com, www.example.org, test47.test-server.example.edu, etc. Apache features configurable error messages, DBMS-based authentication databases, and content negotiation. It is also supported by several graphical user interfaces (GUIs). It supports password authentication and digital certificate authentication. Because the source code is freely available, anyone can adapt the server for specific needs, and there is a large public library of Apache add-ons.[15] HTTP server and proxy features[edit] This article is in a list format that may be better presented using prose. You can help by converting this article to prose, if appropriate. Editing help is available. (August 2016) Loadable Dynamic Modules Multiple Request Processing modes (MPMs) including Event-based\/Async, Threaded and Prefork. Highly scalable (easily handles more than 10,000 simultaneous connections) Handling of static files, index files, auto-indexing and content negotiation .htaccess support[16] Reverse proxy with caching[17] Load balancing[18] with in-band health checks Multiple load balancing mechanisms Fault tolerance and Failover with automatic recovery WebSocket, FastCGI, SCGI, AJP and uWSGI support with caching Dynamic configuration[19] TLS\/SSL with SNI and OCSP stapling support, via OpenSSL. Name- and IP address-based virtual servers IPv6-compatible HTTP\/2 protocol support Fine-grained authentication and authorization access control[20] gzip compression and decompression URL rewriting[21] Headers[22] and content[23][24] rewriting Custom logging with rotation Concurrent connection limiting Request processing rate limiting Bandwidth throttling Server Side Includes[25] IP address-based geolocation User and Session tracking[26] WebDAV Embedded Perl, PHP and Lua scripting CGI support[27] public_html per-user web-pages[28] Generic expression parser[29] Real-time status views[30] XML support[31] FTP support (by a separate module) [32] Performance[edit] Instead of implementing a single architecture, Apache provides a variety of MultiProcessing Modules (MPMs), which allow Apache to run in a process-based, hybrid (process and thread) or event-hybrid mode, to better match the demands of each particular infrastructure. This implies that the choice of correct MPM and the correct configuration is important. Where compromises in performance need to be made, the design of Apache is to reduce latency and increase throughput, relative to simply handling more requests, thus ensuring consistent and reliable processing of requests within reasonable time-frames. For delivery of static pages, Apache 2.2 series was considered significantly slower than nginx and varnish.[33] To address this issue, the Apache developers created the Event MPM, which mixes the use of several processes and several threads per process in an asynchronous event-based loop.[34] This architecture, and the way it was implemented in the Apache 2.4 series, provides for performance equivalent or slightly better than event-based web servers, as is cited by Jim Jagielski and other independent sources.[35][36][37] However, some independent, but significantly outdated, benchmarks show that it still is half as fast as nginx, e.g. [38] Licensing[edit] The Apache HTTP Server codebase was relicensed to the Apache 2.0 License (from the previous 1.1 license) in January 2004,[39] and Apache HTTP Server 1.3.31 and 2.0.49 were the first releases using the new license.[40] The OpenBSD project did not like the change and continued the use of pre-2.0 Apache versions, effectively forking Apache 1.3.x for its purposes.[41][42][43] They initially replaced it with Nginx, and soon after made their own replacement, OpenBSD Httpd, based on the relayd project.[44][45][46] Versions[edit] Version 1.1: The Apache License 1.1 was approved by the ASF in 2000: The primary change from the 1.0 license is in the 'advertising clause' (section 3 of the 1.0 license); derived products are no longer required to include attribution in their advertising materials, but only in their documentation. Version 2.0: The ASF adopted the Apache License 2.0 in January 2004. The stated goals of the license included making the license easier for non-ASF projects to use, improving compatibility with GPL-based software, allowing the license to be included by reference instead of listed in every file, clarifying the license on contributions, and requiring a patent license on contributions that necessarily infringe a contributor's own patents. Development[edit] Version Initial release Latest release Old version, no longer supported: 1.3 1998-06-06[47] 2010-02-03 (1.3.42)[48] Old version, no longer supported: 2.0 2002-04-06[49] 2013-07-10 (2.0.65)[50] Old version, no longer supported: 2.2 2005-12-01[51] 2017-07-11 (2.2.34)[52] Current stable version: 2.4 2012-02-21[53] 2017-07-11 (2.4.27)[54] Legend: Old version Older version, still supported Latest version Latest preview version Future release The Apache HTTP Server Project is a collaborative software development effort aimed at creating a robust, commercial-grade, feature-rich and freely available source code implementation of an HTTP (Web) server. The project is jointly managed by a group of volunteers located around the world, using the Internet and the Web to communicate, plan, and develop the server and its related documentation. This project is part of the Apache Software Foundation. In addition, hundreds of users have contributed ideas, code, and documentation to the project.[55][56][57] Apache 2.4 dropped support for BeOS, TPF and even older platforms.[58] See also[edit] Free software portal .htaccess .htpasswd ApacheBench Comparison of web server software IBM HTTP Server LAMP (software bundle) List of Apache modules POSSE project suEXEC References[edit] ^ \"About the Apache HTTP Server Project\". Apache Software Foundation. Archived from the original on 7 June 2008. Retrieved 2008-06-25.\u00a0 ^ https:\/\/projects-old.apache.org\/indexes\/language.html ^ \"Languages\". Apache HTTP Server. Black Duck Software. Ohloh. Retrieved 2 April 2014.\u00a0 ^ \"Compiling and Installing\". httpd.apache.org. The Apache Software Foundation. Retrieved 9 May 2016.\u00a0 ^ \"OS\/Linux Distributions using Apache\". 1 June 2017.\u00a0 ^ \"Overview of new features in Apache 2.0\". Apache 2.0 is faster and more stable on non-Unix platforms such as [..] OS\/2, and Windows.\u00a0 ^ \"HP OpenVMS systems - Secure Web Server (based on Apache)\". h41379.www4.hpe.com.\u00a0 ^ Netcraft Market Share for Top Servers Across All Domains August 1995 - today (monthly updated) ^ \"February 2009 Web Server Survey\". Netcraft. Archived from the original on 26 February 2009. Retrieved 2009-03-29.\u00a0 ^ \"July 2016 Web Server Survey\". Netcraft. Netcraft. Archived from the original on 10 August 2016. Retrieved 10 August 2016.\u00a0 ^ \"Why the name 'Apache'?\". HTTPd Frequently Asked Questions.\u00a0 ^ \"Information on the Apache HTTP Server Project\". 1997-04-15. Archived from the original on April 15, 1997.\u00a0 ^ \"Apache Server Frequently Asked Questions\". Archived from the original on 1997-01-06. Retrieved 15 January 2017.\u00a0 ^ \"Apache Power\". Linux Magazine.\u00a0 ^ \"What is Apache Web Server? Webopedia\". webopedia.com.\u00a0 ^ \"Apache HTTP Server Tutorial: .htaccess files\".\u00a0 ^ \"mod_proxy\".\u00a0 ^ \"mod_proxy_balancer\".\u00a0 ^ \"Balancer Manager\".\u00a0 ^ \"Authentication and Authorization\".\u00a0 ^ \"mod_rewrite\".\u00a0 ^ \"mod_headers\".\u00a0 ^ \"mod_sed\".\u00a0 ^ \"mod_substitute\".\u00a0 ^ \"Apache httpd Tutorial: Introduction to Server Side Includes\".\u00a0 ^ \"mod_usertrack\".\u00a0 ^ \"Apache Tutorial: Dynamic Content with CGI\".\u00a0 ^ \"Per-user web directorie\".\u00a0 ^ \"Expressions in Apache HTTP Server\".\u00a0 ^ \"mod_status\".\u00a0 ^ \"mod_xml2enc\".\u00a0 ^ \"Apache Module: mod_ftp\".\u00a0 ^ \"Serving static files: a comparison between Apache, Nginx, Varnish and G-WAN\". Spoot!.\u00a0 ^ \"worker - Apache HTTP Server Version 2.2\". apache.org.\u00a0 ^ Apache httpd 2.4 ^ \"Picking a Proxy Server\".\u00a0 ^ \"Throughput evaluation of Apache 2.4.1\".\u00a0 ^ \"Performance of Apache 2.4 with the event MPM compared to Nginx\". eschrade.com.\u00a0 ^ \"Apache License, Version 2.0\". The Apache Software Foundation. January 2004. Retrieved 2013-05-21.\u00a0 ^ Burton, Richard Antony. \"FYI: Apache HTTP Server 2.0.49 Released\". Newsgroup:\u00a0alt.apache.configuration.\u00a0 |access-date= requires |url= (help) ^ de Raadt, Theo (18 February 2004). \"The new apache license\". openbsd-misc (Mailing list). Retrieved 2013-05-21.\u00a0 ^ \"Copyright Policy\". OpenBSD. Retrieved 2013-05-12.\u00a0 ^ \"apache-httpd-openbsd-1.3.20140502p2 \u2013 OpenBSD improved and secured version of Apache 1.3\". OpenBSD ports. Retrieved 2014-12-28.\u00a0 ^ \"OpenBSD Upgrade Guide: 5.1 to 5.2\". openbsd.org.\u00a0 ^ jj, ed. (2014-03-14). \"Heads Up: Apache Removed from Base\". OpenBSD Journal.\u00a0 ^ \"OpenBSD Upgrade Guide: 5.5 to 5.6\". openbsd.org.\u00a0 ^ \"Announcement: Apache 1.3.0 Released\u00a0!\". 1998-06-06. Retrieved 2015-01-06.\u00a0 ^ \"Apache HTTP Server 1.3.42 released (final release of 1.3.x)\". apache.org.\u00a0 ^ \"Official Release: Apache 2.0.35 is now GA\". 2002-04-06. Retrieved 2015-01-06.\u00a0 ^ \"[Announcement] Apache HTTP Server 2.0.65 Released\". apache.org.\u00a0 ^ \"Apache HTTP Server 2.2.0 Released\". 2005-12-01. Retrieved 2015-01-06.\u00a0 ^ \"[Announce] Apache HTTP Server 2.2.34 Released\". apache.org.\u00a0 ^ \"[ANNOUNCEMENT] Apache HTTP Server 2.4.1 Released\". 2012-02-21. Retrieved 2015-07-17.\u00a0 ^ \"Apache HTTP Server 2.4.27 Released\". apache.org.\u00a0 ^ Documentation Group. \"About the Apache HTTP Server Project - The Apache HTTP Server Project\". apache.org.\u00a0 ^ The Apache HTTP Server Open Source Project on Ohloh. (n.d.). Ohloh, the open source network. Retrieved November 12, 2012 ^ \"Chapter 4. The Apache HTTP Server\". fedoraproject.org.\u00a0 ^ \"Upgrading to 2.4 from 2.2\". Platform support has been removed for BeOS, TPF, and even older platforms such as A\/UX, Next, and Tandem. These were believed to be broken anyway.\u00a0 External links[edit] Official website v t e Apache Software Foundation Top level projects Accumulo ActiveMQ Ambari Ant Apex Aries Apache HTTP Server APR Avro Axis Axis2 Beam Bloodhound Brooklyn Buildr Calcite Camel Cassandra Cayenne Chemistry CloudStack Cocoon Cordova CouchDB cTAKES CXF Derby Directory Drill Empire-db Felix Flex Flink Flume Forrest Geronimo Gora Gump Hadoop Hama HBase Hive Jackrabbit James Jini JMeter Kafka Kudu Kylin Lucene Mahout Marmotta Maven MINA mod_perl MyFaces Nutch ODE OFBiz Oozie OpenEJB OpenJPA OpenNLP OpenOffice PDFBox Parquet Phoenix POI Pig Pivot Qpid Roller Samza ServiceMix Shiro Sling Solr Spark Stanbol Storm SpamAssassin Sqoop Struts 1 Struts 2 Subversion SystemML Tapestry Thrift Tika Tomcat Traffic Server UIMA Velocity Wave Wicket Xalan Xerces ZooKeeper Commons BCEL BSF Daemon Jelly Logging Incubator SINGA Trafodion XAP Other projects Batik Chainsaw FOP Ivy Log4j Attic Abdera AxKit Beehive Bluesky iBATIS Cactus Click Continuum Deltacloud Excalibur Harmony HiveMind Jakarta Lenya Shale Shindig Slide stdcxx Tuscany Wink XMLBeans Licenses Apache License Category v t e Web server software Comparisons C Apache Cherokee Hiawatha iPlanet Lighttpd Mongoose Mongrel2 Monkey Nginx Retired Boa CERN httpd NCSA HTTPd Xitami Zeus C++ IIS IIS Express POCO Traffic Server CLI Jexus Erlang Yaws Go Caddy Java GlassFish Jetty JOnAS NetWeaver Resin Tomcat WebLogic WebSphere WildFly Pike Caudium Roxen Python Gunicorn Paste Tornado Twisted PyGopherd Zope Ruby WEBrick Passenger Retired Mongrel Tcl AOLserver NaviServer v t e Web interfaces Server-side Protocols HTTP CGI SCGI FCGI AJP WSRP WebSocket Server APIs C NSAPI C ASAPI C ISAPI COM ASP Java servlet container CLI OWIN ASP.NET Handler Python WSGI Ruby Rack JavaScript JSGI Perl PSGI Lua WSAPI Portlet container Apache modules mod_jk mod_lisp mod_mono mod_parrot mod_perl mod_php mod_proxy mod_python mod_wsgi mod_ruby Phusion Passenger Topics Web resource vs. Web service Open API Webhook Application server comparison Scripting Client-side Browser APIs C NPAPI LiveConnect XPConnect C NPRuntime C PPAPI NaCl ActiveX BHO XBAP WebAssembly Web APIs W3C Audio Canvas CORS DOM DOM events EME File Geolocation IndexedDB MSE SSE SVG Video WebRTC WebSocket Web messaging Web storage Web worker XMLHttpRequest Khronos WebCL WebGL Others Gears Web SQL Database (formerly W3C) Topics Ajax vs. DHTML Mashup Web IDL Scripting Topics Dynamic web page Open Web Platform Rich Internet application Web application Authority control GND: 4460947-4 Retrieved from \"https:\/\/en.wikipedia.org\/w\/index.php?title=Apache_HTTP_Server&oldid=790252677\" Categories: 1995 softwareApache Software FoundationApache Software Foundation projectsCross-platform free softwareFree software programmed in CFree web server softwareReverse proxySoftware using the Apache licenseUnix network-related softwareWeb server software for LinuxHidden categories: Pages using citations with accessdate and no URLWikipedia articles that are too technical from September 2010All articles that are too technicalArticles needing expert attention from September 2010All articles needing expert attentionPages using deprecated image syntaxArticles containing potentially dated statements from June 2017All articles containing potentially dated statementsArticles containing potentially dated statements from July 2016Articles needing cleanup from August 2016All pages needing cleanupArticles with sections that need to be turned into prose from August 2016Wikipedia articles with GND identifiers Navigation menu Personal tools Not logged inTalkContributionsCreate accountLog in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store Interaction HelpAbout WikipediaCommunity portalRecent changesContact page Tools What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page Print\/export Create a bookDownload as PDFPrintable version In other projects Wikimedia CommonsWikibooks Languages \u0627\u0644\u0639\u0631\u0628\u064a\u0629Az\u0259rbaycanca\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438BosanskiCatal\u00e0\u010ce\u0161tinaDanskDeutschEesti\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03acEspa\u00f1olEsperantoEuskara\u0641\u0627\u0631\u0633\u06ccFran\u00e7aisGalego\ud55c\uad6d\uc5b4Hausa\u0939\u093f\u0928\u094d\u0926\u0940HrvatskiBahasa IndonesiaInterlinguaItaliano\u05e2\u05d1\u05e8\u05d9\u05ea\u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8Kurd\u00eeLatvie\u0161uLietuvi\u0173LumbaartMagyar\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02Bahasa MelayuNederlands\u0928\u0947\u092a\u093e\u0932\u0940\u65e5\u672c\u8a9eNorsk bokm\u00e5lNorsk nynorskO\u02bbzbekcha\/\u045e\u0437\u0431\u0435\u043a\u0447\u0430PolskiPortugu\u00easRom\u00e2n\u0103\u0420\u0443\u0441\u0441\u043a\u0438\u0439ScotsShqipSimple EnglishSloven\u010dinaSloven\u0161\u010dina\u06a9\u0648\u0631\u062f\u06cc\u06cc \u0646\u0627\u0648\u06d5\u0646\u062f\u06cc\u0421\u0440\u043f\u0441\u043a\u0438 \/ srpskiSrpskohrvatski \/ \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438Basa SundaSuomiSvenska\u0ba4\u0bae\u0bbf\u0bb4\u0bcdTaqbaylit\u0c24\u0c46\u0c32\u0c41\u0c17\u0c41\u0e44\u0e17\u0e22T\u00fcrk\u00e7e\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430Ti\u1ebfng Vi\u1ec7tWinaray\u7cb5\u8a9e\u4e2d\u6587 Edit links This page was last edited on 12 July 2017, at 15:13. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view (window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"0.604\",\"walltime\":\"0.721\",\"ppvisitednodes\":{\"value\":4868,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":0,\"limit\":1500000},\"postexpandincludesize\":{\"value\":177502,\"limit\":2097152},\"templateargumentsize\":{\"value\":7578,\"limit\":2097152},\"expansiondepth\":{\"value\":29,\"limit\":40},\"expensivefunctioncount\":{\"value\":8,\"limit\":500},\"entityaccesscount\":{\"value\":1,\"limit\":400},\"timingprofile\":[\"100.00% 625.664 1 -total\",\" 43.07% 269.464 1 Template:Reflist\",\" 33.31% 208.401 52 Template:Cite_web\",\" 22.41% 140.213 2 Template:Infobox\",\" 19.43% 121.553 1 Template:Infobox_software\",\" 9.27% 57.976 6 Template:Navbox\",\" 8.46% 52.918 1 Template:Technical\",\" 6.27% 39.212 2 Template:Ambox\",\" 6.11% 38.217 1 Template:Infobox_software\/simple\",\" 4.32% 27.041 2 Template:As_of\"]},\"scribunto\":{\"limitreport-timeusage\":{\"value\":\"0.282\",\"limit\":\"10.000\"},\"limitreport-memusage\":{\"value\":6527643,\"limit\":52428800}},\"cachereport\":{\"origin\":\"mw1272\",\"timestamp\":\"20170712170323\",\"ttl\":86400,\"transientcontent\":true}}});});(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgBackendResponseTime\":804,\"wgHostname\":\"mw1272\"});});","tags":"","url":"https:\/\/en.wikipedia.org\/wiki\/Apache_HTTP_Server"},{"title":"Nginx - Wikipedia","text":"Nginx From Wikipedia, the free encyclopedia Jump to: navigation, search This article has multiple issues. Please help improve it or discuss these issues on the talk page. (Learn how and when to remove these template messages) This article relies too much on references to primary sources. Please improve this by adding secondary or tertiary sources. (June 2015) (Learn how and when to remove this template message) This article's lead section may not adequately summarize key points of its contents. Please consider expanding the lead to provide an accessible overview of all important aspects of the article. Please discuss this issue on the article's talk page. (June 2015) (Learn how and when to remove this template message) Nginx Original author(s) Igor Sysoev Developer(s) Nginx, Inc. Initial release 4\u00a0October 2004; 12 years ago\u00a0(2004-10-04)[1] Stable release 1.12.0 (12\u00a0April 2017; 3 months ago\u00a0(2017-04-12)) [\u00b1][2] Preview release 1.13.0 (25\u00a0April 2017; 2 months ago\u00a0(2017-04-25)) [\u00b1][3] Repository hg.nginx.org\/nginx\/ Development status Active Written in C[4] Operating system BSD variants, HP-UX, IBM AIX, Linux, macOS, Solaris, Windows,[5] and other *nix flavors[6] Type Web server, reverse\/mail proxy server License 2-clause BSD[7] Website nginx.org, nginx.com Nginx ( \/\u02cc\u025bnd\u0292\u1d7bn\u02c8\u025bks\/ EN-jin-EKS), stylized as (NGINX, NGi\u0418X or nginx), is a web server, which can also be used as a reverse proxy, load balancer and HTTP cache. Created by Igor Sysoev in 2004, it runs on Unix, Linux, BSD variants, macOS, Solaris, AIX, HP-UX, and Windows.[6] Nginx is free and open source software, released under the terms of a BSD-like license. A company of the same name was founded in 2011 to provide support.[8] Contents 1 Features 1.1 HTTP proxy and Web server features 1.2 Mail proxy features 2 Performance vs Apache 3 History 4 See also 5 References 6 External links Features[edit] Nginx can be deployed to serve dynamic HTTP content on the network using FastCGI, SCGI handlers for scripts, WSGI application servers or Phusion Passenger modules, and it can serve as a software load balancer.[9] Nginx uses an asynchronous event-driven approach to handling requests. Nginx's modular event-driven architecture[10] can provide more predictable performance under high loads.[11] According to Netcraft's November 2016 Web Server Survey,[12] Nginx was found to be the second most widely used web server across all \"active\" sites (18.22% of surveyed sites) and for the top million busiest sites (27.83% of surveyed sites). According to W3Techs, it was used by 37.7% of the top 1 million websites, 49.7% of the top 100,000 websites, and by 57.0% of the top 10,000 websites.[13] According to BuiltWith, it is used on 38.2% of the top 10,000 websites, and its growth within the top 10k, 100k and 1 million segments increased.[14] Wikipedia uses Nginx as its SSL termination proxy.[15] As of OpenBSD release 5.2 (1 November 2012), Nginx became part of the OpenBSD base system, providing an alternative to the system's fork of Apache 1.3, which it was intended to replace,[16] but it was later replaced by OpenBSD's own httpd(8).[17] HTTP proxy and Web server features[edit] Ability to handle more than 10,000 simultaneous connections with a low memory footprint (~2.5\u00a0MB per 10k inactive HTTP keep-alive connections) Handling of static files, index files and auto-indexing Reverse proxy with caching Load balancing with in-band health checks[18] Fault tolerance TLS\/SSL with SNI and OCSP stapling support, via OpenSSL. FastCGI, SCGI, uWSGI support with caching Name- and IP address-based virtual servers IPv6-compatible HTTP\/2[19] protocol support WebSockets and HTTP\/1.1 Upgrade (101 Switching Protocols)[20] FLV[21] and MP4[22] streaming Web page access authentication gzip compression and decompression[23] URL rewriting[24][25][26] Custom logging with on-the-fly gzip compression[27] Concurrent connection limiting[28] Request processing rate limiting[29] Bandwidth throttling[30] Server Side Includes[31] IP address-based geolocation[32] User tracking[33] WebDAV[34] XSLT data processing[35] Embedded Perl scripting[36] Web application firewall with the Naxsi module [37] Mail proxy features[edit] TLS\/SSL support STARTTLS support SMTP, POP3, and IMAP proxy Authentication using an external HTTP server[38] Other features include upgrading executable and configuration without client connections loss,[39] and a module-based architecture with both core[40] and third-party module support.[41] The paid Plus product includes additional features such as advanced load balancing and access to an expanded suite of metrics for performance monitoring.[42][43] Performance vs Apache[edit] Nginx was written with an explicit goal of outperforming the Apache web server.[44] Out of the box, serving static files, Nginx uses dramatically less memory than Apache, and can handle roughly four times more requests per second.[45] This performance boost comes at a cost of decreased flexibility, such as the ability to override systemwide access settings on a per-file basis (Apache accomplishes this with an .htaccess file, while Nginx has no such feature built in).[46] Formerly, adding third party modules to nginx required recompiling the application from source with the modules statically linked. This was partially overcome in version 1.9.11 with the addition of dynamic module loading. However, the modules still must be compiled at the same time as nginx, and not all modules are compatible with this system; those require the older static linking process.[47] History[edit] Nginx, Inc. Type Private Industry Technology Founded 2011 Headquarters Russia Key people Gus Robertson (CEO), Igor Sysoev (CTO) Products Web servers Website nginx.com Igor Sysoev began development of Nginx in 2002.[48] Originally, Nginx was developed to solve the C10K Problem, and to fill the needs of websites including Rambler, for which it was serving 500 million requests per day by September 2008.[49][50] A company of the same name was founded in July 2011 by Sysoev to provide commercial products and support for the software.[51] The company's principal place of business is San Francisco, California, while legally incorporated in British Virgin Islands.[8] In October 2011, Nginx raised $3 million from BV Capital, Runa Capital and MSD Capital, Michael Dell\u2018s venture fund.[52] The company announced commercial support options for companies using Nginx in production. Nginx offered commercial support in February 2012,[53][54] and paid Nginx Plus subscription in August 2013.[55] Support packages focus on installation, configuration, performance improvement, etc.[56] Support includes proactive notifications about major changes, security patches, updates and patches. WordPress developer Automattic and content delivery network provider MaxCDN became funding partners for an update to Google's SPDY version 3.1, slated for early 2014.[57] Nginx also offers consulting services to assist customers in custom configuration or adding additional features.[58] In October 2013, Nginx raised a $10 million series B investment round led by New Enterprise Associates.[59] That round included previous investors, as well as Aaron Levie, CEO and founder of Box.com.[60][61] In December 2014, Nginx raised a $20 million series B1 round led by New Enterprise Associates, with participation from e.ventures (formerly BV Capital), Runa Capital, Index Ventures and Nginx\u2019s own CEO Gus Robertson.[62][63] Version Original release date Latest version Release date Status Old version, no longer supported: 0.5 2006-12-04 0.5.38 2009-09-14[64] Legacy Old version, no longer supported: 0.6 2007-06-14 0.6.39 2009-09-14[65] Legacy Old version, no longer supported: 0.7 2008-05-19 0.7.69 2011-07-19[66] Legacy Old version, no longer supported: 0.8 2009-06-02 0.8.55 2011-07-19[67] Legacy Old version, no longer supported: 1.0 2011-04-12 1.0.15 2012-04-12[68] Legacy Old version, no longer supported: 1.2 2012-04-23 1.2.9 2013-05-13[69] Legacy Old version, no longer supported: 1.4 2013-04-24 1.4.7 2014-03-18[70] Legacy Old version, no longer supported: 1.6 2014-04-24 1.6.3 2015-04-07[71] Legacy Old version, no longer supported: 1.8 2015-04-21 1.8.1 2016-01-26[72] Legacy Old version, no longer supported: 1.9 2015-04-28 1.9.15 2016-04-19[1] Legacy Old version, no longer supported: 1.10 2016-04-26 1.10.3 2017-01-31[73] Legacy Old version, no longer supported: 1.11 2016-05-24 1.11.8 2016-12-27[1] Legacy Current stable version: 1.12 2017-04-12 1.12.1 2017-07-11[74] Stable[75] Current stable version: 1.13 2017-04-25 1.13.3 2017-07-11[1] Mainline[75] 1.13 2017-05-30 1.13.1 2017-05-30 Mainline Legend: Old version Older version, still supported Latest version Latest preview version Future release See also[edit] Free software portal Comparison of web server software Web accelerator URL redirection \u00a7\u00a0nginx rewrite List of Nginx\u2013MySQL\u2013PHP packages References[edit] ^ a b c d \"CHANGES\". Retrieved 16 May 2017.\u00a0 ^ \"nginx-1.12.0\". nginx. 2017-04-12. Retrieved 2017-04-13.\u00a0 ^ Dounin, Maxim (2017-04-25). \"[nginx-announce] nginx-1.13.0\". nginx-announce@nginx.org (Mailing list). Retrieved 2017-04-26.\u00a0 ^ \"The NGINX Open Source Project on Ohloh\". ohloh.net. Retrieved 7 March 2013.\u00a0 ^ \"nginx for Windows\". Retrieved 28 May 2014.\u00a0 ^ a b \"Tested OS and platforms\". Retrieved 15 October 2011.\u00a0 ^ \"Licensing\". Retrieved 18 January 2013.\u00a0 ^ a b \"Notice of Exempt Offering of Securities\". Form D. US Securities and Exchange Commission 17 October 2013. Retrieved 15 September 2016.\u00a0 ^ Use nginx for Proxy Services and Software Load Balancing, 11 May 2010, by Sam Kleinman, Linode Library ^ \"The Architecture of Open Source Applications (Volume 2): nginx\". aosabook.org. Retrieved 10 June 2015.\u00a0 ^ Basic nginx Configuration by Sam Kleinman; 21 August 2010 ^ \"November 2016 Web Server Survey\". 22 November 2016. Retrieved 19 December 2016.\u00a0 ^ \"Usage of web servers broken down by ranking\". 19 December 2016. Retrieved 19 December 2016.\u00a0 ^ \"Builtwith: nginx Usage Statistics\". 19 December 2016. Retrieved 19 December 2016.\u00a0 ^ \"Wikitech: HTTPS\". Wikitech.wikimedia.org. 3 October 2011. Retrieved 3 December 2011.\u00a0 ^ OpenBSD Upgrade Guide: 5.1 to 5.2, 2012\/11\/06 15:00:27 sthen ^ \"Heads Up: Nginx Removed From Base\".\u00a0 ^ \"Module ngx_http_upstream_module\". nginx.org. Retrieved 14 August 2012.\u00a0 ^ \"Module ngx_http_v2_module\". nginx.org. 30 October 2015. Retrieved 2 November 2015.\u00a0 ^ \"Proxy: support for connection upgrade (101 Switching Protocols).\". trac.nginx.org. 19 February 2013. Retrieved 21 February 2013.\u00a0 ^ \"Module ngx_http_flv_module\". nginx.org. Retrieved 9 November 2014.\u00a0 ^ \"Module ngx_http_mp4_module\". nginx.org. Retrieved 24 April 2012.\u00a0 ^ \"Module ngx_http_gunzip_module\". nginx.org. Retrieved 13 September 2012.\u00a0 ^ \"Module ngx_http_rewrite_module\u00a0\u2014 rewrite\". nginx.org. Retrieved 24 December 2014.\u00a0 ^ Murenin, Constantine A. (18 February 2013). \"A dynamic web-site written wholly in nginx.conf? Introducing mdoc.su!\". nginx@nginx.org (Mailing list). Retrieved 24 December 2014.\u00a0 ^ Murenin, Constantine A. (24 February 2013). \"mdoc.su\u00a0\u2014 Short manual page URLs for FreeBSD, OpenBSD, NetBSD and DragonFly BSD\". Retrieved 24 December 2014.\u00a0 ^ \"Module ngx_http_log_module\u00a0\u2014 access_log\". nginx.org. Retrieved 25 December 2012.\u00a0 ^ \"Module ngx_http_limit_conn_module\". nginx.org. Retrieved 8 June 2015.\u00a0 ^ \"Module ngx_http_limit_req_module\". nginx.org. Retrieved 8 June 2015.\u00a0 ^ \"Module ngx_http_core_module\u00a0\u2014 limit_rate\". nginx.org. Retrieved 24 June 2012.\u00a0 ^ \"Module ngx_http_ssi_module\". nginx.org. Retrieved 10 June 2015.\u00a0 ^ \"Module ngx_http_geoip_module\". nginx.org. Retrieved 10 June 2015.\u00a0 ^ \"Module ngx_http_userid_module\". nginx.org. Retrieved 20 November 2012.\u00a0 ^ \"Module ngx_http_dav_module\". nginx.org. Retrieved 10 June 2015.\u00a0 ^ \"Module ngx_http_xslt_module\". nginx.org. Retrieved 6 May 2012.\u00a0 ^ \"Module ngx_http_perl_module\". nginx.org. Retrieved 16 June 2012.\u00a0 ^ \"Naxsi Web Application Firewall\". Retrieved 7 September 2016.\u00a0 ^ \"Module ngx_mail_auth_http_module\". nginx.org. Retrieved 13 September 2012.\u00a0 ^ \"Official documentation: Controlling nginx\". nginx.org. Retrieved 3 December 2011.\u00a0 ^ \"nginx documentation\". nginx.org. Retrieved 9 June 2015.\u00a0 ^ \"3rdPartyModules\u00a0\u2014 Nginx Community\". wiki.nginx.org. Retrieved 9 June 2015.\u00a0 ^ \"How to monitor NGINX\". Datadog. 9 July 2015. Retrieved 9 July 2015.\u00a0 ^ \"Application Load Balancing with NGINX Plus\". NGINX. Retrieved 9 July 2015.\u00a0 ^ \"NGINX vs. Apache: Our View of a Decade-Old Question\". NGINX. 9 October 2015. Retrieved 28 December 2016.\u00a0 ^ \"Web server performance comparison\". DreamHost. Retrieved 28 December 2016.\u00a0 ^ \"NGINX vs. Apache (Pro\/Con Review, Uses, & Hosting for Each) - HostingAdvice.com\". HostingAdvice.com. 5 April 2016. Retrieved 28 December 2016.\u00a0 ^ \"Introducing Dynamic Modules in NGINX 1.9.11 - NGINX\". NGINX. 2016-02-09. Retrieved 2017-01-13.\u00a0 ^ Tony Mobily (5 January 2012). \"Interview with Igor Sysoev, author of Apache's competitor NGINX\". Free Software Magazine. Retrieved 18 October 2013.\u00a0 ^ \"Choosing Your Web Server: Apache Vs. Nginx\". Eyerys. 7 December 2016. Retrieved 7 December 2016.\u00a0 ^ \"Nginx: the High-Performance Web Server and Reverse Proxy\". Linux Journal. 1 September 2008. Retrieved 16 August 2009.\u00a0 ^ \"Company\". nginx.com. 3 January 2012. Retrieved 24 February 2012.\u00a0 ^ Natasha Starkell (11 October 2011). \"Russian Nginx Raises $3 Million From International Investors\". Techcrunch. Retrieved 20 November 2014.\u00a0 ^ Darryl K. Taft (8 February 2012). \"NGINX Launches Commercial Support for Open-Source Web Server\". e Week. Retrieved 18 October 2013.\u00a0 ^ Steven J. Vaughan-Nichols (8 February 2012). \"Commercial Support now available for the open-source NGINX Web server\". ZDNet Open Source blog. Retrieved 18 October 2013.\u00a0 ^ \"Nginx Inc. Launches NGINX Plus\". 22 August 2013.\u00a0 ^ Taft, Darryl K. (8 February 2012). \"NGINX Launches Commercial Support for Open-Source Web Server\". eweek.com. Retrieved 24 February 2012.\u00a0 ^ Shankland, Stephen (20 December 2013). \"Nginx upgrade funded by fans of Google's SPDY Web protocol\". CNET. Retrieved 6 January 2014.\u00a0 ^ \"Commercial Support now available for the open-source NGINX Web server\". ZDNet. 8 February 2012. Retrieved 28 February 2012.\u00a0 ^ Sean Michael Kerner (16 October 2013). \"Nginx Raises $10 Million in New Funding for Server Development\". e Week. Retrieved 18 October 2013.\u00a0 ^ Frederic Lardinois (15 October 2013). \"Nginx Raises $10M Series B Round Led By NEA\". Techcrunch. Retrieved 20 November 2014.\u00a0 ^ Jolie O'Dell (15 October 2013). \"Nginx ties up a sweet $10M funding deal and hundreds of millions of users\". Venture Beat. Retrieved 18 October 2013.\u00a0 ^ Frederic Lardinois (9 December 2014). \"Nginx Raises $20M Series B1 Round To Drive International Expansion\". Techcrunch. Retrieved 9 December 2014.\u00a0 ^ Jordan Novet (9 December 2014). \"Nginx gets $20M, because an open-source web server is just the beginning\". VentureBeat. Retrieved 9 December 2014.\u00a0 ^ \"CHANGES-0.5\". Retrieved 21 September 2015.\u00a0 ^ \"CHANGES-0.6\". Retrieved 21 September 2015.\u00a0 ^ \"CHANGES-0.7\". Retrieved 21 September 2015.\u00a0 ^ \"CHANGES-0.8\". Retrieved 21 September 2015.\u00a0 ^ \"CHANGES-1.0\". Retrieved 21 September 2015.\u00a0 ^ \"CHANGES-1.2\". Retrieved 21 September 2015.\u00a0 ^ \"CHANGES-1.4\". Retrieved 21 September 2015.\u00a0 ^ \"CHANGES-1.6\". Retrieved 21 September 2015.\u00a0 ^ \"CHANGES-1.8\". Retrieved 8 March 2016.\u00a0 ^ \"CHANGES-1.10\". 31 January 2017. Retrieved 8 February 2017.\u00a0 ^ \"CHANGES-1.12.1\". 11 July 2017. Retrieved 11 July 2017.\u00a0 ^ a b \"Introducing NGINX 1.12 and 1.13\". Retrieved 16 May 2017.\u00a0 External links[edit] Official website Corporate website v t e Web server software Comparisons C Apache Cherokee Hiawatha iPlanet Lighttpd Mongoose Mongrel2 Monkey Nginx Retired Boa CERN httpd NCSA HTTPd Xitami Zeus C++ IIS IIS Express POCO Traffic Server CLI Jexus Erlang Yaws Go Caddy Java GlassFish Jetty JOnAS NetWeaver Resin Tomcat WebLogic WebSphere WildFly Pike Caudium Roxen Python Gunicorn Paste Tornado Twisted PyGopherd Zope Ruby WEBrick Passenger Retired Mongrel Tcl AOLserver NaviServer Retrieved from \"https:\/\/en.wikipedia.org\/w\/index.php?title=Nginx&oldid=790917019\" Categories: 2002 softwareCompanies established in 2011Cross-platform free softwareForward proxyFree proxy serversFree software programmed in CFree web server softwareProxy server software for LinuxReverse proxySoftware companies of RussiaSoftware using the BSD licenseUnix network-related softwareWeb server software for LinuxHidden categories: Articles lacking reliable references from June 2015All articles lacking reliable referencesWikipedia introduction cleanup from June 2015All pages needing cleanupArticles covered by WikiProject Wikify from June 2015All articles covered by WikiProject WikifyUse dmy dates from December 2016Pages using Infobox software with unknown parameters Navigation menu Personal tools Not logged inTalkContributionsCreate accountLog in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store Interaction HelpAbout WikipediaCommunity portalRecent changesContact page Tools What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page Print\/export Create a bookDownload as PDFPrintable version Languages \u0627\u0644\u0639\u0631\u0628\u064a\u0629\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438Catal\u00e0\u010ce\u0161tinaDanskDeutschEspa\u00f1olEsperanto\u0641\u0627\u0631\u0633\u06ccFran\u00e7aisGalego\ud55c\uad6d\uc5b4Bahasa IndonesiaItaliano\u05e2\u05d1\u05e8\u05d9\u05eaLatvie\u0161uNederlands\u65e5\u672c\u8a9ePolskiPortugu\u00eas\u0420\u0443\u0441\u0441\u043a\u0438\u0439Sloven\u0161\u010dinaSuomiSvenskaT\u00fcrk\u00e7e\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u4e2d\u6587 Edit links This page was last edited on 16 July 2017, at 23:30. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view (window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"0.708\",\"walltime\":\"0.813\",\"ppvisitednodes\":{\"value\":5497,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":0,\"limit\":1500000},\"postexpandincludesize\":{\"value\":163334,\"limit\":2097152},\"templateargumentsize\":{\"value\":10885,\"limit\":2097152},\"expansiondepth\":{\"value\":29,\"limit\":40},\"expensivefunctioncount\":{\"value\":6,\"limit\":500},\"entityaccesscount\":{\"value\":1,\"limit\":400},\"timingprofile\":[\"100.00% 707.379 1 -total\",\" 56.77% 401.545 1 Template:Reflist\",\" 34.19% 241.884 60 Template:Cite_web\",\" 18.53% 131.060 3 Template:Infobox\",\" 13.03% 92.153 1 Template:Infobox_software\",\" 11.38% 80.494 3 Template:Ambox\",\" 9.30% 65.754 1 Template:Multiple_issues\",\" 4.09% 28.934 9 Template:Cite_news\",\" 4.05% 28.625 1 Template:Infobox_company\",\" 3.74% 26.456 1 Template:Infobox_software\/simple\"]},\"scribunto\":{\"limitreport-timeusage\":{\"value\":\"0.328\",\"limit\":\"10.000\"},\"limitreport-memusage\":{\"value\":6939632,\"limit\":52428800}},\"cachereport\":{\"origin\":\"mw1270\",\"timestamp\":\"20170716233045\",\"ttl\":2592000,\"transientcontent\":false}}});});(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgBackendResponseTime\":83,\"wgHostname\":\"mw1270\"});});","tags":"","url":"https:\/\/en.wikipedia.org\/wiki\/Nginx"},{"title":"MySQL - Wikipedia","text":"MySQL From Wikipedia, the free encyclopedia Jump to: navigation, search MySQL Screenshot of the default MySQL command-line banner and prompt Original author(s) MySQL AB Developer(s) Oracle Corporation Initial release 23\u00a0May 1995; 22 years ago\u00a0(1995-05-23) Stable release 5.7.19[1] \/ 17\u00a0July 2017; 1 day ago\u00a0(2017-07-17) Preview release 8.0.2[2] \/ 17\u00a0July 2017; 1 day ago\u00a0(2017-07-17) Repository https:\/\/github.com\/mysql\/mysql-server, git:\/\/anongit.gentoo.org\/proj\/mysql-extras.git Development status Active Written in C, C++[3] Operating system Windows, Linux, Solaris, macOS, FreeBSD[4] Available in English Type RDBMS License GPL (version 2) or proprietary[5] Website www.mysql.com MySQL (officially pronounced as \/ma\u026a \u02cc\u025bskju\u02d0\u02c8\u025bl\/ \"My S-Q-L\",[6]) is an open-source relational database management system (RDBMS).[7] Its name is a combination of \"My\", the name of co-founder Michael Widenius' daughter,[8] and \"SQL\", the abbreviation for Structured Query Language. The MySQL development project has made its source code available under the terms of the GNU General Public License, as well as under a variety of proprietary agreements. MySQL was owned and sponsored by a single for-profit firm, the Swedish company MySQL AB, now owned by Oracle Corporation.[9] For proprietary use, several paid editions are available, and offer additional functionality. MySQL is a central component of the LAMP open-source web application software stack (and other \"AMP\" stacks). LAMP is an acronym for \"Linux, Apache, MySQL, Perl\/PHP\/Python\". Applications that use the MySQL database include: TYPO3, MODx, Joomla, WordPress, phpBB, MyBB, and Drupal. MySQL is also used in many high-profile, large-scale websites, including Google[10][11] (though not for searches), Facebook,[12][13][14] Twitter,[15] Flickr,[16] and YouTube.[17] Contents 1 Overview 2 History 2.1 Milestones 2.2 Release history 2.3 Legal disputes and acquisitions 3 Features 3.1 Limitations 3.2 Deployment 3.3 Backup software 3.4 High availability Software 3.5 Cloud deployment 4 User interfaces 4.1 Graphical user interfaces 4.2 Command-line interfaces 5 Application programming interfaces 6 Project forks 6.1 Current 6.2 Abandoned 7 See also 8 Notes 9 References 10 External links Overview[edit] MySQL is written in C and C++. Its SQL parser is written in yacc, but it uses a home-brewed lexical analyzer.[18] MySQL works on many system platforms, including AIX, BSDi, FreeBSD, HP-UX, eComStation, i5\/OS, IRIX, Linux, macOS, Microsoft Windows, NetBSD, Novell NetWare, OpenBSD, OpenSolaris, OS\/2 Warp, QNX, Oracle Solaris, Symbian, SunOS, SCO OpenServer, SCO UnixWare, Sanos and Tru64. A port of MySQL to OpenVMS also exists.[19] The MySQL server software itself and the client libraries use dual-licensing distribution. They are offered under GPL version 2,[20] beginning from 28 June 2000[21] (which in 2009 has been extended with a FLOSS License Exception)[22] or to use a proprietary license.[23] Support can be obtained from the official manual.[24] Free support additionally is available in different IRC channels and forums. Oracle offers paid support via its MySQL Enterprise products. They differ in the scope of services and in price. Additionally, a number of third party organisations exist to provide support and services, including MariaDB and Percona. MySQL has received positive reviews, and reviewers noticed it \"performs extremely well in the average case\" and that the \"developer interfaces are there, and the documentation (not to mention feedback in the real world via Web sites and the like) is very, very good\".[25] It has also been tested to be a \"fast, stable and true multi-user, multi-threaded sql database server\".[26] History[edit] MySQL was created by a Swedish company, MySQL AB, founded by David Axmark, Allan Larsson and Michael \"Monty\" Widenius. Original development of MySQL by Widenius and Axmark began in 1994.[27] The first version of MySQL appeared on 23 May 1995. It was initially created for personal usage from mSQL based on the low-level language ISAM, which the creators considered too slow and inflexible. They created a new SQL interface, while keeping the same API as mSQL. By keeping the API consistent with the mSQL system, many developers were able to use MySQL instead of the (proprietarily licensed) mSQL antecedent.[citation needed][dubious \u2013 discuss] Milestones[edit] Additional milestones in MySQL development included: First internal release on 23 May 1995 Version 3.19: End of 1996, from www.tcx.se Version 3.20: January 1997 Windows version was released on 8 January 1998 for Windows 95 and NT Version 3.21: production release 1998, from www.mysql.com Version 3.22: alpha, beta from 1998 Version 3.23: beta from June 2000, production release 22 January 2001[28] Version 4.0: beta from August 2002, production release March 2003 (unions) Version 4.01: beta from August 2003, Jyoti[clarification needed][citation needed] adopts MySQL for database tracking Version 4.1: beta from June 2004, production release October 2004 (R-trees and B-trees, subqueries, prepared statements) Version 5.0: beta from March 2005, production release October 2005 (cursors, stored procedures, triggers, views, XA transactions) The developer of the Federated Storage Engine states that \"The Federated Storage Engine is a proof-of-concept storage engine\",[29] but the main distributions of MySQL version 5.0 included it and turned it on by default. Documentation of some of the short-comings appears in \"MySQL Federated Tables: The Missing Manual\".[30] Sun Microsystems acquired MySQL AB in 2008.[31] Version 5.1: production release 27 November 2008 (event scheduler, partitioning, plugin API, row-based replication, server log tables) Version 5.1 contained 20 known crashing and wrong result bugs in addition to the 35 present in version 5.0 (almost all fixed as of release 5.1.51).[32] MySQL 5.1 and 6.0-alpha showed poor performance when used for data warehousing\u00a0\u2013 partly due to its inability to utilize multiple CPU cores for processing a single query.[33] Oracle acquired Sun Microsystems on 27 January 2010.[34][35][36] The day Oracle announced the purchase of Sun, Michael \"Monty\" Widenius forked MySQL, launching MariaDB, and took a swath of MySQL developers with him.[37] MySQL Server 5.5 was generally available (as of December 2010[update]). Enhancements and features include: The default storage engine is InnoDB, which supports transactions and referential integrity constraints. Improved InnoDB I\/O subsystem[38] Improved SMP support[39] Semisynchronous replication. SIGNAL and RESIGNAL statement in compliance with the SQL standard. Support for supplementary Unicode character sets utf16, utf32, and utf8mb4. New options for user-defined partitioning. MySQL Server 6.0.11-alpha was announced[40] on 22 May 2009 as the last release of the 6.0 line. Future MySQL Server development uses a New Release Model. Features developed for 6.0 are being incorporated into future releases. The general availability of MySQL\u00a05.6 was announced in February 2013. New features included performance improvements to the query optimizer, higher transactional throughput in InnoDB, new NoSQL-style memcached APIs, improvements to partitioning for querying and managing very large tables, TIMESTAMP column type that correctly stores milliseconds, improvements to replication, and better performance monitoring by expanding the data available through the PERFORMANCE_SCHEMA.[41] The InnoDB storage engine also included support for full-text search and improved group commit performance. The general availability of MySQL\u00a05.7 was announced in October 2015.[42] MySQL Server 8.0.0-dmr (Milestone Release) was announced 12 September 2016.[43] Release history[edit] Release General Availability Latest minor version Latest release 5.1 2008-11-14[44] 5.1.73[45] Old version, no longer supported: 2013-12-03 5.5 2010-12-03[46] 5.5.56 Older version, yet still supported: 2017-05-02 5.6 2013-02-05[47] 5.6.36 Older version, yet still supported: 2017-04-10 5.7 2015-10-21[48] 5.7.18 Current stable version: 2017-04-10 8.0 N\/A 8.0.1[49] Latest preview version of a future release: 2017-04-10 Legend: Old version Older version, still supported Latest version Latest preview version Future release Legal disputes and acquisitions[edit] On 15 June 2001, NuSphere sued MySQL AB, TcX DataKonsult AB and its original authors Michael (\"Monty\") Widenius and David Axmark in U.S District Court in Boston for \"breach of contract, tortious interference with third party contracts and relationships and unfair competition\".[50][51] In 2002, MySQL AB sued Progress NuSphere for copyright and trademark infringement in United States district court. NuSphere had allegedly violated MySQL's copyright by linking MySQL's GPL'ed code with NuSphere Gemini table without being in compliance with the license.[52] After a preliminary hearing before Judge Patti Saris on 27 February 2002, the parties entered settlement talks and eventually settled.[53] After the hearing, FSF commented that \"Judge Saris made clear that she sees the GNU GPL to be an enforceable and binding license.\"[54] In October 2005, Oracle Corporation acquired Innobase OY, the Finnish company that developed the third-party InnoDB storage engine that allows MySQL to provide such functionality as transactions and foreign keys. After the acquisition, an Oracle press release mentioned that the contracts that make the company's software available to MySQL AB would be due for renewal (and presumably renegotiation) some time in 2006.[55] During the MySQL Users Conference in April 2006, MySQL issued a press release that confirmed that MySQL and Innobase OY agreed to a \"multi-year\" extension of their licensing agreement.[56] In February 2006, Oracle Corporation acquired Sleepycat Software,[57] makers of the Berkeley DB, a database engine providing the basis for another MySQL storage engine. This had little effect, as Berkeley DB was not widely used, and was dropped (due to lack of use) in MySQL 5.1.12, a pre-GA release of MySQL 5.1 released in October 2006.[58] In January 2008, Sun Microsystems bought MySQL for $1 billion.[59] In April 2009, Oracle Corporation entered into an agreement to purchase Sun Microsystems,[60] then owners of MySQL copyright and trademark. Sun's board of directors unanimously approved the deal. It was also approved by Sun's shareholders, and by the U.S. government on 20 August 2009.[61] On 14 December 2009, Oracle pledged to continue to enhance MySQL[62] as it had done for the previous four years. A movement against Oracle's acquisition of MySQL, to \"Save MySQL\"[63] from Oracle was started by one of the MySQL founders, Monty Widenius. The petition of 50,000+ developers and users called upon the European Commission to block approval of the acquisition. At the same time, several Free Software opinion leaders (including Eben Moglen, Pamela Jones of Groklaw, Jan Wildeboer and Carlo Piana, who also acted as co-counsel in the merger regulation procedure) advocated for the unconditional approval of the merger.[citation needed] As part of the negotiations with the European Commission, Oracle committed that MySQL server will continue until at least 2015 to use the dual-licensing strategy long used by MySQL AB, with proprietary and GPL versions available. The antitrust of the EU had been \"pressuring it to divest MySQL as a condition for approval of the merger\". But, as revealed by WikiLeaks, the US Department of Justice, at the request of Oracle, pressured the EU to approve the merger unconditionally.[64] The European Commission eventually unconditionally approved Oracle's acquisition of MySQL on 21 January 2010.[65] In January 2009, prior to Oracle's acquisition of MySQL, Monty Widenius started a GPL-only fork, MariaDB. MariaDB is based on the same code base as MySQL server 5.5 and aims to maintain compatibility with Oracle-provided versions.[66] Features[edit] MySQL is offered under two different editions: the open source MySQL Community Server and the proprietary Enterprise Server.[67] MySQL Enterprise Server is differentiated by a series of proprietary extensions which install as server plugins, but otherwise shares the version numbering system and is built from the same code base. Major features as available in MySQL 5.6: A broad subset of ANSI SQL 99, as well as extensions Cross-platform support Stored procedures, using a procedural language that closely adheres to SQL\/PSM[68] Triggers Cursors Updatable views Online DDL when using the InnoDB Storage Engine. Information schema Performance Schema that collects and aggregates statistics about server execution and query performance for monitoring purposes.[69] A set of SQL Mode options to control runtime behavior, including a strict mode to better adhere to SQL standards. X\/Open XA distributed transaction processing (DTP) support; two phase commit as part of this, using the default InnoDB storage engine Transactions with savepoints when using the default InnoDB Storage Engine. The NDB Cluster Storage Engine also supports transactions. ACID compliance when using InnoDB and NDB Cluster Storage Engines[70] SSL support Query caching Sub-SELECTs (i.e. nested SELECTs) Built-in replication support (i.e., master-master replication and master-slave replication) with one master per slave, many slaves per master.[71] Multi-master replication is provided in MySQL Cluster,[72] and multi-master support can be added to unclustered configurations using Galera Cluster.[73] Full-text indexing and searching[a] Embedded database library Unicode support[b] Partitioned tables with pruning of partitions in optimizer Shared-nothing clustering through MySQL Cluster Multiple storage engines, allowing one to choose the one that is most effective for each table in the application.[c] Native storage engines InnoDB, MyISAM, Merge, Memory (heap), Federated, Archive, CSV, Blackhole, NDB Cluster. Commit grouping, gathering multiple transactions from multiple connections together to increase the number of commits per second. The developers release minor updates of the MySQL Server approximately every two months. The sources can be obtained from MySQL's website or from MySQL's GitHub repository, both under the GPL license. Limitations[edit] When using some storage engines other than the default of InnoDB, MySQL does not comply with the full SQL standard for some of the implemented functionality, including foreign key references [74] and check constraints.[75] Up until MySQL 5.7, triggers are limited to one per action \/ timing, meaning that at most one trigger can be defined to be executed after an INSERT operation, and one before INSERT on the same table.[76] No triggers can be defined on views.[76] MySQL database's inbuilt functions like UNIX_TIMESTAMP() will return 0 after 03:14:07 UTC on 19 January 2038.[77] Deployment[edit] LAMP software bundle, displayed here together with Squid. MySQL can be built and installed manually from source code, but it is more commonly installed from a binary package unless special customizations are required. On most Linux distributions, the package management system can download and install MySQL with minimal effort, though further configuration is often required to adjust security and optimization settings. Though MySQL began as a low-end alternative to more powerful proprietary databases, it has gradually evolved to support higher-scale needs as well. It is still most commonly used in small to medium scale single-server deployments, either as a component in a LAMP-based web application or as a standalone database server. Much of MySQL's appeal originates in its relative simplicity and ease of use, which is enabled by an ecosystem of open source tools such as phpMyAdmin. In the medium range, MySQL can be scaled by deploying it on more powerful hardware, such as a multi-processor server with gigabytes of memory. There are, however, limits to how far performance can scale on a single server ('scaling up'), so on larger scales, multi-server MySQL ('scaling out') deployments are required to provide improved performance and reliability. A typical high-end configuration can include a powerful master database which handles data write operations and is replicated to multiple slaves that handle all read operations.[78] The master server continually pushes binlog events to connected slaves so in the event of failure a slave can be promoted to become the new master, minimizing downtime. Further improvements in performance can be achieved by caching the results from database queries in memory using memcached, or breaking down a database into smaller chunks called shards which can be spread across a number of distributed server clusters.[79] Backup software[edit] mysqldump is a logical backup tool included with both community and enterprise editions of MySQL. It supports backing up from all storage engines. MySQL Enterprise Backup is a hot backup utility included as part of the MySQL Enterprise subscription from Oracle, offering native InnoDB hot backup, as well as backup for other storage engines. XtraBackup is an open-source MySQL hot backup software program. Features include hot, non-locking backups for InnoDB storage, incremental backups, streaming, parallel-compressed backups, throttling based on the number of I\/O operations per second, etc.[80] High availability Software[edit] MySQL Fabric is an integrated system for managing a collection of MySQL servers, and a framework on top of which high availability and database sharding is built. MySQL Fabric is open-source, and supports procedure execution in the presence of failure, providing an execution model usually called resilient execution. MySQL client libraries are extended so they are hiding the complexities of handling failover in the event of a server failure, as well as correctly dispatching transactions to the shards. [81] Cloud deployment[edit] Main article: Cloud database MySQL can also be run on cloud computing platforms such as Amazon EC2. Some common deployment models for MySQL on the cloud are: Virtual machine image In this implementation, cloud users can upload a machine image of their own with MySQL installed, or use a ready-made machine image with an optimized installation of MySQL on it, such as the one provided by Amazon EC2.[82] MySQL as a service Some cloud platforms offer MySQL \"as a service\". In this configuration, application owners do not have to install and maintain the MySQL database on their own. Instead, the database service provider takes responsibility for installing and maintaining the database, and application owners pay according to their usage.[83] Notable cloud-based MySQL services are the Amazon Relational Database Service; Rackspace; HP Converged Cloud; Heroku and Jelastic. User interfaces[edit] Graphical user interfaces[edit] A graphical user interface (GUI) is a type of interface that allows users to interact with electronic devices or programs through graphical icons and visual indicators such as secondary notation, as opposed to text-based interfaces, typed command labels or text navigation. GUIs are easier to learn than command-line interfaces (CLIs), which require commands to be typed on the keyboard. Third-party proprietary and free graphical administration applications (or \"front ends\") are available that integrate with MySQL and enable users to work with database structure and data visually. Some well-known front ends are: MySQL Workbench running on macOS MySQL Workbench MySQL Workbench is the official integrated environment for MySQL. It was developed by MySQL AB, and enables users to graphically administer MySQL databases and visually design database structures. MySQL Workbench replaces the previous package of software, MySQL GUI Tools. Similar to other third-party packages, but still considered the authoritative MySQL front end, MySQL Workbench lets users manage database design & modeling, SQL development (replacing MySQL Query Browser) and Database administration (replacing MySQL Administrator). MySQL Workbench is available in two editions, the regular free and open source Community Edition which may be downloaded from the MySQL website, and the proprietary Standard Edition which extends and improves the feature set of the Community Edition. Adminer Adminer (formerly known as phpMinAdmin) is a free MySQL front end for managing content in MySQL databases (since version 2, it also works on PostgreSQL, MS SQL, SQLite and Oracle SQL databases). Adminer is distributed under the Apache license (or GPL v2) in the form of a single PHP file (around 300 KiB in size), and is capable of managing multiple databases, with many CSS skins available. Its author is Jakub Vr\u00e1na who started to develop this tool as a light-weight alternative to phpMyAdmin, in July 2007. Database Workbench Database Workbench is a software application for development and administration of multiple relational databases using SQL, with interoperationality between different database systems, developed by Upscene Productions. Because Databases Workbench supports multiple database systems, it can provide software developers with the same interface and development environment for these otherwise different database systems and also includes cross database tools. Database Workbench supports the following relational databases: Oracle Database, Microsoft SQL Server, SQL Anywhere, Firebird, NexusDB, InterBase, MySQL and MariaDB. Database Workbench 5 runs on 32-bit or 64 bit Windows platforms. Under Linux, FreeBSD or macOS Database Workbench can operate using Wine. DBEdit DBEdit is a database editor, which can connect to an Oracle, DB2, MySQL and any database that provides a JDBC driver. It runs on Windows, Linux and Solaris. DBEdit is free and open source software and distributed under the GNU General Public License. The source code is hosted on SourceForge. HeidiSQL HeidiSQL, previously known as MySQL-Front, is a free and open source client, or frontend for MySQL (and for its forks like MariaDB and Percona Server), Microsoft SQL Server and PostgreSQL. HeidiSQL is developed by German programmer Ansgar Becker and a few other contributors in Delphi. To manage databases with HeidiSQL, users must login to a local or remote MySQL server with acceptable credentials, creating a session. Within this session users may manage MySQL Databases within the connected MySQL server, disconnecting from the server when done. Its feature set is sufficient for most common and advanced database, table and data record operations but remains in active development to move towards the full functionality expected in a MySQL Frontend. LibreOffice Base LibreOffice Base allows the creation and management of databases, preparation of forms and reports that provide end users easy access to data. Like Microsoft Access, it can be used as a front-end for various database systems, including Access databases (JET), ODBC data sources, and MySQL or PostgreSQL[84] Navicat Navicat is a series of graphical database management and development software produced by PremiumSoft CyberTech Ltd. for MySQL, MariaDB, Oracle, SQLite, PostgreSQL and Microsoft SQL Server. It has an Explorer-like graphical user interface and supports multiple database connections for local and remote databases. Its design is made to meet the needs of a variety of audiences, from database administrators and programmers to various businesses\/companies that serve clients and share information with partners. Navicat is a cross-platform tool and works on Microsoft Windows, OS\u00a0X and Linux platforms. Upon purchase, users are able to select a language for the software from eight available languages: English, French, German, Spanish, Japanese, Polish, Simplified Chinese and Traditional Chinese. OpenOffice.org OpenOffice.org Base is freely available and can manage MySQL databases if the entire suite is installed. phpMyAdmin phpMyAdmin is a free and open source tool written in PHP intended to handle the administration of MySQL with the use of a web browser. It can perform various tasks such as creating, modifying or deleting databases, tables, fields or rows; executing SQL statements; or managing users and permissions. The software, which is available in 78 languages,[85] is maintained by The phpMyAdmin Project.[86] It can import data from CSV and SQL, and transform stored data into any format using a set of predefined functions, like displaying BLOB-data as images or download-links. SQLBuddy SQLBuddy is an open-source web-based application written in PHP intended to handle the administration of MySQL and SQLite with the use of a Web browser. The project places an emphasis on ease of installation and a simple user interface. SQLyog SQLyog is a GUI tool available in free as well as paid versions. Data manipulations (e.g., insert, update, and delete) may be done from a spreadsheet-like interface. Its editor has syntax highlighting and various automatic formatting options. Both raw table data and a result set from a query can be manipulated. Its data search feature uses Google-like search syntax and translates to SQL transparently for the user. It has a backup tool for performing unattended backups. Backups may be compressed and optionally stored as a file-per-table as well as identified with a timestamp. Toad for MySQL Toad for MySQL is a software application from Dell Software that database developers, database administrators and data analysts use to manage both relational and non-relational databases using SQL. Toad supports many databases and environments. It runs on all 32-bit\/64-bit Windows platforms, including Microsoft Windows Server, Windows XP, Windows Vista, Windows 7 and 8 (32-Bit or 64-Bit). Dell Software has also released a Toad Mac Edition. Dell provides Toad in commercial and trial\/freeware versions. The freeware version is available from the ToadWorld.com community. Webmin Webmin is a web-based system configuration tool for Unix-like systems, although recent versions can also be installed and run on Windows. With it, it is possible to configure operating system internals, such as users, disk quotas, services or configuration files, as well as modify and control open source apps, such as the Apache HTTP Server, PHP or MySQL. Webmin is largely based on Perl, running as its own process and web server. It defaults to TCP port 10000 for communicating, and can be configured to use SSL if OpenSSL is installed with additional required Perl Modules. It is built around modules, which have an interface to the configuration files and the Webmin server. This makes it easy to add new functionality. Due to Webmin's modular design, it is possible for anyone who is interested to write plugins for desktop configuration. Webmin also allows for controlling many machines through a single interface, or seamless login on other webmin hosts on the same subnet or LAN. Command-line interfaces[edit] A command-line interface is a means of interacting with a computer program where the user issues commands to the program by typing in successive lines of text (command lines). MySQL ships with many command line tools, from which the main interface is the mysql client.[87][88] MySQL Utilities is a set of utilities designed to perform common maintenance and administrative tasks. Originally included as part of the MySQL Workbench, the utilities are a stand-alone download available from Oracle. Percona Toolkit is a cross-platform toolkit for MySQL, developed in Perl.[89] Percona Toolkit can be used to prove replication is working correctly, fix corrupted data, automate repetitive tasks, and speed up servers. Percona Toolkit is included with several Linux distributions such as CentOS and Debian, and packages are available for Fedora and Ubuntu as well. Percona Toolkit was originally developed as Maatkit, but as of late 2011, Maatkit is no longer developed. Application programming interfaces[edit] Many programming languages with language-specific APIs include libraries for accessing MySQL databases. These include MySQL Connector\/Net for integration with Microsoft's Visual Studio (languages such as C# and VB are most commonly used) and the JDBC driver for Java. In addition, an ODBC interface called MySQL Connector\/ODBC allows additional programming languages that support the ODBC interface to communicate with a MySQL database, such as ASP or ColdFusion. The HTSQL\u00a0\u2013 URL-based query method also ships with a MySQL adapter, allowing direct interaction between a MySQL database and any web client via structured URLs. Project forks[edit] In software engineering, a project fork happens when developers take a copy of source code from one software package and start independent development on it, creating a distinct and separate piece of software\u00a0\u2013 a new (third-party) version. The term often implies not merely creating a development branch, but also a split in the developer community (a form of schism).[90] MySQL forks include the following: Current[edit] MariaDB MariaDB is a community-developed fork of the MySQL relational database management system intended to remain free under the GNU GPL. Being a fork of a leading open source software system, it is notable for being led by the original developers of MySQL, who forked it due to concerns over its acquisition by Oracle.[37] Contributors are required to share their copyright with the MariaDB Foundation.[91] MariaDB intends to maintain high compatibility with MySQL, ensuring a \"drop-in\" replacement capability with library binary equivalency and exact matching with MySQL APIs and commands.[92] There are some documented differences and incompatibilities between versions of MySQL and MariaDB,[92] however, and some tools for interacting with MySQL, such as the MySQL Workbench, are not fully compatible with MariaDB.[93] It includes the XtraDB storage engine for replacing InnoDB,[94] as well as a new storage engine, Aria, that intends to be both a transactional and non-transactional engine perhaps even included in future versions of MySQL.[95] Percona Server Percona Server, forked by Percona, aims to retain close compatibility to the official MySQL releases, while focusing on performance and increased visibility into server operations.[96] Also included in Percona Server is XtraDB, Percona's fork of the InnoDB Storage Engine. Percona freely includes a number of scalability, availability, security and backup features only available in MySQL's commercial Enterprise edition.[97] Abandoned[edit] Drizzle Drizzle was a free software\/open source relational database management system (DBMS) that was forked from the now-defunct 6.0 development branch of the MySQL DBMS.[98] Like MySQL, Drizzle had a client\/server architecture and uses SQL as its primary command language. Drizzle was distributed under version 2 and 3 of the GNU General Public License (GPL) with portions, including the protocol drivers and replication messaging under the BSD license. WebScaleSQL WebScaleSQL was a software branch of MySQL 5.6, and was announced on 27 March 2014 by Facebook, Google, LinkedIn and Twitter as a joint effort to provide a centralized development structure for extending MySQL with new features specific to its large-scale deployments, such as building large replicated databases running on server farms. Thus, WebScaleSQL opened a path toward deduplicating the efforts each company had been putting into maintaining its own branch of MySQL, and toward bringing together more developers. By combining the efforts of these companies and incorporating various changes and new features into MySQL, WebScaleSQL aimed at supporting the deployment of MySQL in large-scale environments.[99][100] The project's source code is licensed under version 2 of the GNU General Public License, and is hosted on GitHub.[101][102] See also[edit] Computing portal Free software portal Comparison of database tools Comparison of MySQL database engines Comparison of relational database management systems SQL compliance Notes[edit] ^ Initially, it was a MyISAM-only feature; supported by InnoDB since the release of MySQL 5.6. ^ Prior to MySQL 5.5.3, UTF-8 and UCS-2 encoded strings are limited to the BMP; MySQL 5.5.3 and later use utf8mb4 for full unicode support. ^ In MySQL 5.0, storage engines must be compiled in; since MySQL 5.1, storage engines can be dynamically loaded at run time. References[edit] ^ \"MySQL 5.7 Release Notes\". mysql.com. Retrieved 17 July 2017.\u00a0 ^ \"Changes in Release 8.0.2 (Development Milestone)\". MySQL 8.0 Reference Manual. Oracle Corporation. 17 July 2017. Retrieved 17 July 2017.\u00a0 ^ \"MySQL: Project Summary\". Ohloh. Black Duck Software. Retrieved 17 September 2012.\u00a0 ^ \"Supported Platforms: MySQL Database\". Oracle. Retrieved 24 March 2014.\u00a0 ^ \"Downloads\". MySQL. Retrieved 2014-08-03.\u00a0 ^ \"What is MySQL?\". MySQL 5.1 Reference Manual. Oracle. Retrieved 17 September 2012. The official way to pronounce \u201cMySQL\u201d is \u201cMy Ess Que Ell\u201d (not \u201cmy sequel\u201d)\u00a0 ^ \"DB-Engines Ranking\". Retrieved 12 February 2015.\u00a0 ^ \"History of MySQL\". MySQL 5.1 Reference Manual. MySQL AB. Retrieved 26 August 2011.\u00a0 ^ \"Sun Microsystems Announces Completion of MySQL Acquisition; Paves Way for Secure, Open Source Platform to Power the Network Economy\" (Press release). Sun Microsystems. 26 February 2008. Archived from the original on 28 February 2008. Retrieved 17 September 2012.\u00a0 ^ Urlocker, M. Zack (13 December 2005). \"Google Runs MySQL\". The Open Force. M. Zack Urlocker. Retrieved 3 August 2010. AdWords was built using the MySQL database\u00a0 ^ Claburn, Thomas (24 April 2007). \"Google Releases Improved MySQL Code\". InformationWeek. InformationWeek. Retrieved 30 November 2008.\u00a0 ^ Callaghan, Mark (13 April 2010). MySQL at Facebook. YouTube. Google. Retrieved 3 August 2010. x,000 servers, ... Master-slave replication, InnoDB\u00a0 ^ Sobel, Jason (21 December 2007). \"Keeping Up\". The Facebook Blog. Facebook. Retrieved 30 October 2008.\u00a0 ^ Malik, Om (25 April 2008). \"Facebook\u2019s Insatiable Hunger for Hardware\". GigaOM. GigaOmniMedia. Retrieved 30 October 2008.\u00a0 ^ Cole, Jeremy (14 April 2011). Big and Small Data at @Twitter. YouTube. Google. Retrieved 20 October 2011.\u00a0 ^ \"MySQL Customer: Flickr\". MySQL Customers. Oracle. Retrieved 17 September 2012.\u00a0 ^ \"MySQL Customer: YouTube\". MySQL Customers. Oracle. Retrieved 17 September 2012.\u00a0 ^ \"MySQL Internals Manual\". Dev.mysql.com. 4 March 2009. Retrieved 8 June 2009.\u00a0 ^ \"MySQL for OpenVMS\". vmsmysql.org. 2011-03-30. Retrieved 2014-01-16.\u00a0 ^ \"Oracle\u00a0:: MySQL Open Source License\". Mysql.com. Retrieved 8 June 2009.\u00a0 ^ \"MySQL GOES GPL\". Archived from the original on 12 August 2001.\u00a0 ^ \"Oracle\u00a0:: FLOSS License Exception\". Mysql.com. Retrieved 8 June 2009.\u00a0 ^ \"Oracle\u00a0:: MySQL Commercial License\". Mysql.com. Retrieved 8 June 2009.\u00a0 ^ MySQL Support Manual, MySQL Developers ^ Review of MySQL Server 5.0, Techworld.com, November 2005 ^ MySQL Server Review, LinuxMint.com ^ \"Five Questions With Michael Widenius \u2013 Founder And Original Developer of MySQL\". www.opensourcereleasefeed.com. Archived from the original on 2009-03-13. Retrieved 13 October 2012.\u00a0 ^ \"MySQL 3.23 Declared Stable\". Archived from the original on 15 August 2001.\u00a0 ^ \"Capttofu: FederatedX Pluggable Storage Engine Released!\". Capttofu.livejournal.com. Archived from the original on 13 August 2011. Retrieved 3 April 2009.\u00a0 ^ \"MySQL Federated Tables: The Missing Manual\". O\u2019Reilly Media. 8 October 2006. Retrieved 1 February 2012.\u00a0 ^ \"Sun Picks Up MySQL For $1 Billion; Open Source Is A Legitimate Business Model\". Retrieved 13 October 2012.\u00a0 ^ \"Archives \u2013 Oops, we did it again (MySQL 5.1 released as GA with crashing bugs)\". Planet MySQL. 29 November 2008. Retrieved 5 February 2013.\u00a0 ^ \"TPC-H Run on MySQL 5.1 and 6.0 | MySQL Performance Blog\". MySQL Performance Blog. Retrieved 8 June 2009.\u00a0 ^ \"Oracle Completes Acquisition of Sun\" (Press release). Oracle. 27 January 2010. Retrieved 1 February 2012.\u00a0 ^ \"Overview and Frequently Asked Questions\" (PDF).\u00a0 ^ \"Oracle's ambitious plans for integrating Sun's technology\". InfoWorld. 27 January 2010.\u00a0 ^ a b \"Dead database walking: MySQL's creator on why the future belongs to MariaDB\". Computerworld. 28 March 2013. Retrieved 2013-09-11.\u00a0 ^ \"InnoDB I\/O Subsystem Changes\". dev.mysql.com. Retrieved 1 February 2012.\u00a0 ^ \"Scalability Improvements\". dev.mysql.com. Retrieved 1 February 2012.\u00a0 ^ \"MySQL Lists: packagers: MySQL 6.0.11 Alpha has been released!\". Lists.mysql.com. Retrieved 1 February 2012.\u00a0 ^ \"What's New in MySQL 5.6\". MySQL Developer Zone. Retrieved 21 April 2011.\u00a0 ^ \"Oracle Announces General Availability of MySQL 5.7\". Oracle. Retrieved 1 November 2015.\u00a0 ^ \"8.0.0-dmr (Milestone Release)\". Retrieved 12 September 2016.\u00a0 ^ https:\/\/docs.oracle.com\/cd\/E17952_01\/mysql-5.1-en\/faqs-general.html ^ https:\/\/docs.oracle.com\/cd\/E17952_01\/mysql-5.1-relnotes-en\/index.html ^ https:\/\/dev.mysql.com\/doc\/relnotes\/mysql\/5.5\/en\/ ^ https:\/\/dev.mysql.com\/doc\/relnotes\/mysql\/5.6\/en\/ ^ https:\/\/dev.mysql.com\/doc\/relnotes\/mysql\/5.7\/en\/ ^ https:\/\/dev.mysql.com\/doc\/relnotes\/mysql\/8.0\/en\/ ^ Basil, Tom (4 September 2001). \"Eyewitness account: \"Monty Widenius, International Fugitive\"\". MySQL Life (Mailing list). Retrieved 16 September 2012.\u00a0 ^ \"FAQ on MySQL vs. NuSphere Dispute\". MySQL AB. 13 July 2001. Archived from the original on 17 July 2001. Retrieved 16 September 2012.\u00a0 ^ \"Affidavit of Eben Moglen on Progress Software vs. MySQL AB Preliminary Injunction Hearing\". Archived from the original on 2005-02-07.\u00a0 ^ Progress Software Corporation v. MySQL AB, 195 F. Supp. 2d 328 (D. Mass. 2002). ^ \"Judge Saris defers GNU GPL Questions for Trial in MySQL vs. Progress Software\" (Press release). Free Software Foundation. 1 March 2002. Retrieved 16 September 2012.\u00a0 ^ \"Oracle Announces the Acquisition of Open Source Software Company, Innobase\" (Press release). Oracle. 7 October 2005. Archived from the original on 20 July 2011. Retrieved 16 September 2012.\u00a0 ^ \"MySQL to Promote New Open Source DB Engines from its Partners and Dev Community\" (Press release). MySQL AB. 26 April 2006. Archived from the original on 23 June 2011. Retrieved 16 September 2012.\u00a0 ^ Babcock, Charles (14 February 2006). \"Oracle Buys Sleepycat, Is JBoss Next?\". InformationWeek. CPM Media. Retrieved 16 September 2012.\u00a0 ^ \"Changes in MySQL 5.1.12\". MySQL 5.1 Reference Manual. MySQL AB. 24 October 2006. Retrieved 16 September 2012.\u00a0 ^ \"Sun Microsystems Announces Agreement to Acquire MySQL, Developer of the World's Most Popular Open Source Database\" (Press release). Sun Microsystems. 16 January 2008. Archived from the original on 18 July 2011. Retrieved 16 September 2012.\u00a0 ^ \"Oracle to Buy Sun\" (Press release). Sun Microsystems. 20 April 2009. Archived from the original on 22 April 2009. Retrieved 16 September 2012.\u00a0 ^ Thomasch, Paul; Finkle, Jim (20 August 2009). \"Oracle wins U.S. approval to buy Sun Microsystems\". Reuters. Retrieved 16 September 2012.\u00a0 ^ Whitney, Lance (14 December 2009). \"Oracle pledges to play well with MySQL\". CNET. Retrieved 16 September 2012.\u00a0 ^ Michael, Widenius (12 December 2009). \"Help saving MySQL\". Monty Says. Google. Retrieved 16 September 2012.\u00a0 ^ Kanaracus, Chris (30 August 2011). \"Wikileaks Cable Offers New Insights Into Oracle-Sun Deal\". PC World. Retrieved 16 September 2012.\u00a0 ^ \"Mergers: Commission clears Oracle's proposed acquisition of Sun Microsystems\" (Press release). European Union. 21 January 2010. Retrieved 16 September 2012.\u00a0 ^ \"MariaDB versus MySQL \u2013 Compatibility\". AskMonty Knowledgebase. Monty Program. 30 July 2010. Retrieved 16 September 2012.\u00a0 ^ \"Which Should I Use: MySQL Enterprise or MySQL Community Server?\". MySQL AB. Retrieved 8 April 2009.\u00a0 ^ Guy Harrison; Steven Feuerstein (2008). MySQL Stored Procedure Programming. O'Reilly Media. p.\u00a049. ISBN\u00a0978-0-596-10089-6.\u00a0 ^ \"Monitoring RDS MySQL performance metrics\". Datadog. 2015-10-20. Retrieved 14 December 2015.\u00a0 ^ \"MySQL\u00a0:: InnoDB 1.1 for MySQL 5.5 User\u2019s Guide\u00a0:: C InnoDB Glossary\u00a0:: ACID\". Retrieved 5 January 2011.\u00a0 ^ \"Replication\". MySQL.\u00a0 ^ \"MySQL Cluster Replication: Multi-Master and Circular Replication\". MySQL.\u00a0 ^ \"MySQL University: MySQL Galera Multi-Master Replication\". Oracle Corporation. 2010-02-09.\u00a0 ^ \"InnoDB and FOREIGN KEY Constraints\". MySQL. Retrieved 11 April 2015.\u00a0 ^ \"Bug #3464 Constraints: support CHECK\". MySQL. 14 April 2004. Retrieved 11 April 2015.\u00a0 ^ a b \"CREATE TRIGGER Syntax\". MySQL. Retrieved 11 April 2015.\u00a0 ^ \"Year 2038 Bug\". aj_blk. 2012-08-31. Retrieved 2015-04-11.\u00a0 ^ \"The future of replication in MySQL\". Facebook. Retrieved 9 December 2009.\u00a0 ^ \"Database Sharding\". Code Futures. Retrieved 9 December 2009.\u00a0 ^ \"XtraBackup\". Percona. Retrieved 19 January 2013.\u00a0 ^ Mats Kindahl (2014-05-27). \"MySQL Fabric: Musings on Release 1.4.3\". mysqlmusings.blogspot.com. Retrieved 2014-06-18.\u00a0 ^ \"Running MySQL on Amazon EC2 with EBS (Elastic Block Store)\". Amazon Web Services. Retrieved 5 February 2013.\u00a0 ^ Finley, Klint. \"7 Cloud-Based Database Services\". ReadWriteWeb. Retrieved 9 November 2011.\u00a0 ^ \"LibreOffice Base\". Retrieved 5 January 2012.\u00a0 ^ \"Translations\". phpMyAdmin. Retrieved 2014-12-23.\u00a0 ^ \"Team\". phpMyAdmin. Retrieved 2013-03-03.\u00a0 ^ mysql \u2014 The MySQL Command-Line Tool, MySQL Reference Manual ^ mysqladmin \u2013 the MySQL command-line tool, MySQL Reference Manual ^ Home. \"Percona Toolkit for MySQL\". Percona. Retrieved 26 March 2014.\u00a0 ^ \"Schism\", with its connotations, is a common usage, e.g. \"the Lemacs\/FSFmacs schism\" (Jamie Zawinski, 2000), \"Behind the KOffice split\" (Joe Brockmeier, Linux Weekly News, 2010-12-14), \"Copyright assignment - once bitten, twice shy\" (Richard Hillesley, H-Online, 2010-08-06), \"Forking is a feature\" (Anil Dash, 2010-09-10), \"The Great Software Schism\" (Glyn Moody, Linux Journal, 2006-09-28), \"To Fork Or Not To Fork: Lessons From Ubuntu and Debian\" (Benjamin Mako Hill, 2005). ^ \"Contributing Code\". MariaDB KnowledgeBase. Retrieved 17 September 2014.\u00a0 ^ a b \"MariaDB versus MySQL - Compatibility\". MariaDB KnowledgeBase. Retrieved 16 September 2016.\u00a0 ^ \"Monitoring MySQL performance metrics\". Datadog. Retrieved 16 September 2016.\u00a0 ^ \"About XtraDB\". MariaDB KnowledgeBase. Retrieved 16 September 2016.\u00a0 ^ \"Aria FAQ\". MariaDB KnowledgeBase. Retrieved 16 September 2016.\u00a0 ^ Percona Server Frequently Asked Questions, How is it related to other MySQL forks? ^ \"Percona challenges Oracle with alternate MySQL release\". PC World. Retrieved 12 February 2015.\u00a0 ^ Clark, Jack (2011-03-17). \"MySQL fork Drizzle gets general release\". ZDNet. Retrieved 2016-01-03.\u00a0 ^ Steven J. Vaughan-Nichols (March 28, 2013). \"WebScaleSQL: MySQL for Facebook-sized databases\". ZDNet. Retrieved April 1, 2014.\u00a0 ^ Klint Finley (March 27, 2013). \"Google and Facebook Team Up to Modernize Old-School Databases\". Wired. Retrieved April 1, 2014.\u00a0 ^ Jack Clark (March 27, 2013). \"Forkin' 'L! Facebook, Google and friends create WebScaleSQL from MySQL 5.6\". The Register. Retrieved April 1, 2014.\u00a0 ^ \"Frequently Asked Questions\". webscalesql.org. March 27, 2014. Retrieved April 1, 2014.\u00a0 External links[edit] Wikimedia Commons has media related to MySQL. Wikibooks has more on the topic of: MySQL Official website MySQL at Oracle Axmark, David (Mar 12, 2008). \"MySQL co-founder, David Axmark, on Sun\u2019s billion dollar acquisition\" (video). intruders.tv.\u00a0 MySQL at DMOZ v t e MySQL Editions MySQL MySQL Enterprise MySQL Cluster MySQL tools MySQL Workbench SQLyog phpMyAdmin HeidiSQL Navicat Database Workbench Storage engines MyISAM Falcon InnoDB XtraDB MySQL Federated MySQL Archive Aria TokuDB Procedural Language MySQL Stored Procedures (a variant of SQL\/PSM Standard) Forks and Branches Drizzle MariaDB Percona Server WebScaleSQL v t e Sun Microsystems (acquired by Oracle Corp, 2010) People Bill Joy Andy Bechtolsheim Scott McNealy Vinod Khosla List of notable employees Hardware Sun-1 Sun-2 Sun-3 Sun386i Sun-4 SPARCstation Netra Ultra Enterprise Sun Blade Sun Fire SPARC Enterprise SPARC JavaStation Sun Ray Sun Modular Datacenter more... Software SunOS Solaris NIS (+) NFS ZFS SunView NeWS OpenWindows Java Desktop System Sun Studio Java StarOffice iPlanet\/Sun ONE\/Java Enterprise System Sun Secure Global Desktop MySQL Sun xVM GlassFish more... Storage StorageTek Sun Open Storage QFS ZFS High-performance computing Sun Cloud Sun Constellation System Sun Visualization System Sun Grid Engine Lustre Research Sun Labs picoJava Fortress Project Looking Glass Education SCPs BlueJ Community Common Development and Distribution License Java Community Process NetBeans OpenOffice.org OpenSolaris OpenSPARC OpenJDK OSUM v t e Oracle Corporation Corporate directors Jeffrey Berg H. Raymond Bingham Michael Boskin Safra A. Catz Larry Ellison H\u00e9ctor Garc\u00eda-Molina Joseph Grundfest Jeffrey O. Henley Mark Hurd Jack F. Kemp Donald L. Lucas Naomi O. Seligman Acquisitions (list) Sun PeopleSoft Hyperion Siebel BEA JD Edwards RightNow Virtual Iron TimesTen Sunopsis NetSuite DBMS Oracle Database MySQL InnoDB Berkeley DB TimesTen Rdb Essbase Programming languages Java PL\/SQL IDE JDeveloper Forms NetBeans Apex SQL Developer Developer Studio Middleware Fusion Middleware WebCenter SOA Suite WebLogic Server Coherence Tuxedo GlassFish Operating systems Oracle Linux Oracle Solaris Computer hardware Sun Fire SPARC (T-Series, Enterprise) StorageTek Computer appliances Oracle Exadata Oracle Exalogic Big Data Appliance Education and recognition Oracle Certification Program Category Commons Authority control GND: 4559381-4 Retrieved from \"https:\/\/en.wikipedia.org\/w\/index.php?title=MySQL&oldid=791153633\" Categories: 1995 softwareClient-server database management systemsCross-platform softwareFree database management systemsMySQLOracle softwareRDBMS software for LinuxRelational database management systemsSun Microsystems softwareHidden categories: Use dmy dates from January 2013All articles with unsourced statementsArticles with unsourced statements from January 2014All accuracy disputesArticles with disputed statements from January 2014Wikipedia articles needing clarification from January 2012Articles with unsourced statements from April 2012Articles containing potentially dated statements from December 2010All articles containing potentially dated statementsArticles with unsourced statements from August 2011Articles with DMOZ linksWikipedia articles with GND identifiers Navigation menu Personal tools Not logged inTalkContributionsCreate accountLog in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store Interaction HelpAbout WikipediaCommunity portalRecent changesContact page Tools What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page Print\/export Create a bookDownload as PDFPrintable version In other projects Wikimedia CommonsWikibooksWikiversity Languages Afrikaans\u0627\u0644\u0639\u0631\u0628\u064a\u0629Az\u0259rbaycanca\u09ac\u09be\u0982\u09b2\u09be\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438BosanskiCatal\u00e0\u010ce\u0161tinaDanskDeutschEesti\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03acEspa\u00f1olEsperantoEuskara\u0641\u0627\u0631\u0633\u06ccFran\u00e7aisGaeilgeGalego\ud55c\uad6d\uc5b4\u0540\u0561\u0575\u0565\u0580\u0565\u0576\u0939\u093f\u0928\u094d\u0926\u0940HrvatskiBahasa IndonesiaItaliano\u05e2\u05d1\u05e8\u05d9\u05ea\u049a\u0430\u0437\u0430\u049b\u0448\u0430Kurd\u00eeLatvie\u0161uLietuvi\u0173Magyar\u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438Malagasy\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02Bahasa Melayu\u041c\u043e\u043d\u0433\u043e\u043b\u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102cNederlands\u65e5\u672c\u8a9eNorsk bokm\u00e5lO\u02bbzbekcha\/\u045e\u0437\u0431\u0435\u043a\u0447\u0430\u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179aPolskiPortugu\u00easRom\u00e2n\u0103\u0420\u0443\u0441\u0441\u043a\u0438\u0439ScotsShqip\u0dc3\u0dd2\u0d82\u0dc4\u0dbdSimple EnglishSloven\u010dinaSloven\u0161\u010dina\u06a9\u0648\u0631\u062f\u06cc\u0421\u0440\u043f\u0441\u043a\u0438 \/ srpskiSuomiSvenska\u0ba4\u0bae\u0bbf\u0bb4\u0bcdTaqbaylit\u0e44\u0e17\u0e22T\u00fcrk\u00e7eT\u00fcrkmen\u00e7e\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430Ti\u1ebfng Vi\u1ec7tWinaray\u7cb5\u8a9e\u4e2d\u6587 Edit links This page was last edited on 18 July 2017, at 13:35. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view (window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"0.896\",\"walltime\":\"1.038\",\"ppvisitednodes\":{\"value\":7459,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":0,\"limit\":1500000},\"postexpandincludesize\":{\"value\":206774,\"limit\":2097152},\"templateargumentsize\":{\"value\":8718,\"limit\":2097152},\"expansiondepth\":{\"value\":25,\"limit\":40},\"expensivefunctioncount\":{\"value\":10,\"limit\":500},\"entityaccesscount\":{\"value\":1,\"limit\":400},\"timingprofile\":[\"100.00% 912.418 1 -total\",\" 50.31% 459.023 2 Template:Reflist\",\" 32.40% 295.603 73 Template:Cite_web\",\" 11.75% 107.204 2 Template:Infobox\",\" 11.35% 103.575 1 Template:Infobox_software\",\" 5.98% 54.580 4 Template:Fix\",\" 5.33% 48.616 3 Template:Citation_needed\",\" 4.22% 38.546 8 Template:Cite_press_release\",\" 4.14% 37.748 5 Template:Delink\",\" 3.10% 28.259 1 Template:Use_dmy_dates\"]},\"scribunto\":{\"limitreport-timeusage\":{\"value\":\"0.449\",\"limit\":\"10.000\"},\"limitreport-memusage\":{\"value\":7446327,\"limit\":52428800}},\"cachereport\":{\"origin\":\"mw1306\",\"timestamp\":\"20170718133513\",\"ttl\":2592000,\"transientcontent\":false}}});});(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgBackendResponseTime\":65,\"wgHostname\":\"mw1274\"});});","tags":"","url":"https:\/\/en.wikipedia.org\/wiki\/MySQL"},{"title":"CodeIgniter - Wikipedia","text":"CodeIgniter From Wikipedia, the free encyclopedia Jump to: navigation, search CodeIgniter Original author(s) EllisLab Developer(s) British Columbia Institute of Technology Initial release February\u00a028,\u00a02006\u00a0(2006-02-28) Stable release 3.1.5[1] \/ March\u00a020,\u00a02017\u00a0(2017-03-20) Repository https:\/\/github.com\/bcit-ci\/CodeIgniter Development status Active Written in PHP Operating system Cross-platform Platform PHP 5.6.0+[2] Type Web framework License MIT License Website www.codeigniter.com CodeIgniter is an open-source software rapid development web framework, for use in building dynamic web sites with PHP. Contents 1 Popularity 2 Source code and license 3 History 4 See also 5 References 6 External links Popularity[edit] CodeIgniter is loosely based on the popular model\u2013view\u2013controller (MVC) development pattern. While controller classes are a necessary part of development under CodeIgniter, models and views are optional.[3] Codeigniter can be also modified to use Hierarchical Model View Controller (HMVC[4]) which allows developers to maintain modular grouping of Controller, Models and View arranged in a sub-directory format. CodeIgniter is most often noted for its speed when compared to other PHP frameworks.[5][6][7] In a critical take on PHP frameworks in general, PHP creator Rasmus Lerdorf spoke at frOSCon in August 2008, noting that he liked CodeIgniter \"because it is faster, lighter and the least like a framework.\"[8] Source code and license[edit] CodeIgniter's source code is maintained at GitHub,[9] and as of the preview version 3.0rc, is certified open source software licensed with the MIT License. Versions of CodeIgniter prior to 3.0.0 are licensed under a proprietary Apache\/BSD-style open source license.[10] A 2011 decision to switch licensing to the Open Software License (OSL) sparked some community controversy,[11] especially about the GPL incompatibility of the new license, to which EllisLab has responded with a series of articles entitled Software License Awareness Week.[12] History[edit] The first public version of CodeIgniter was released by EllisLab on February 28, 2006.[13] On July 9, 2013, EllisLab announced that it was seeking a new owner for CodeIgniter, citing a lack of resources to give the framework the attention they felt it deserved.[14] On October 6, 2014, EllisLab announced that CodeIgniter would continue development under the stewardship of the British Columbia Institute of Technology.[15] See also[edit] Free software portal Comparison of web frameworks References[edit] ^ \"CodeIgniter 3.1.5 released\". codeigniter.com. Retrieved 23 June 2017.\u00a0 ^ https:\/\/www.codeigniter.com\/user_guide\/general\/requirements.html ^ \"CodeIgniter User Guide: Models\". CodeIgniter.com. Retrieved 2015-02-03.\u00a0 ^ \"wiredesignz \/ codeigniter-modular-extensions-hmvc \u2014 Bitbucket\". bitbucket.org. Retrieved 2016-05-05.\u00a0 ^ \"7 Best PHP Frameworks\". TISindia.com. 2014-02-12.\u00a0 ^ \"PHP Frameworks Benchmarks\". Sellersrank.com. Retrieved 2014-08-05.\u00a0 ^ \"Benchmark update: Cake vs. CodeIgniter vs. Kohana\". Pr0digy.com. 2008-09-03. Retrieved 2014-08-05.\u00a0 ^ \"Rasmus Lerdorf: PHP Frameworks? Think Again\". Sitepoint.com. 2008-08-29. Retrieved 2014-08-05.\u00a0 ^ \"bcit-ci\/CodeIgniter \u00b7 GitHub\". Retrieved 2015-02-03.\u00a0 ^ \"CodeIgniter License Agreement\". CodeIgniter.com. Retrieved 2016-02-28.\u00a0 ^ \"CodeIgniter changes license to OSL 3.0?\". CodeIgniter.com Forum. 2011-10-21. Retrieved 2014-08-05.\u00a0 ^ \"Software License Awareness Week\". EllisLab.com. 2011-10-31. Retrieved 2012-12-28.\u00a0 ^ \"CodeIgniter User Guide: Change Log\". CodeIgniter.com. Retrieved 2016-03-21.\u00a0 ^ EllisLab Seeking New Owner for CodeIgniter ^ \"Your Favorite PHP Framework, CodeIgniter, Has a New Home\". EllisLab Blog. EllisLab. Retrieved 16 October 2014.\u00a0 External links[edit] Official website CodeIgniter on GitHub v t e Web frameworks Comparison C++ CppCMS Wt CLI ASP.NET Core AJAX Dynamic Data MVC Razor Web Forms DNN BFC MonoRail OpenRasta Umbraco ColdFusion CFWheels ColdBox Platform ColdSpring Fusebox Mach-II Model-Glue Common Lisp Caveman2 CL-HTTP UnCommon Web Weblocks D Vibe.d Haskell Happstack Yesod Snap Java AppFuse Flexive Grails GWT ICEfaces ItsNat JavaServer Faces JHipster Jspx JWt OpenXava Play Reasonable Server Faces Remote Application Platform RIFE Seam Spring Stripes Struts Tapestry Vaadin Vert.x WebWork Wicket WaveMaker ZK JavaScript Ample SDK Angular\/AngularJS Backbone.js Chaplin.js Closure Dojo Toolkit Ember.js Ext JS jQuery Meteor MooTools Node.js OpenUI5 Prototype React Rico script.aculo.us Sencha Touch SproutCore Wakanda Perl Catalyst Dancer Mason Maypole Mojolicious WebGUI PHP CakePHP CodeIgniter Fat-Free FuelPHP Gyroscope Horde Kohana Laravel Lithium Midgard MODX Nette Phalcon PRADO Qcodo Silex SilverStripe Symfony TYPO3 Xaraya XOOPS Yii Zend Framework Python BlueBream CherryPy Django Flask Grok Nevow Pyjs Pylons Pyramid Quixote TACTIC Tornado TurboGears web2py Webware Zope 2 Ruby Camping Merb Padrino Ruby on Rails Sinatra Scala Lift Play Scalatra Smalltalk AIDA\/Web Seaside Other languages Application Express (PL\/SQL) Grails (Groovy) Kepler (Lua) OpenACS (Tcl) Phoenix (Elixir) SproutCore (JavaScript-Ruby) Yaws (Erlang) v t e PHP People Andi Gutmans Rasmus Lerdorf Zeev Suraski Resources Accelerator (List) Composer Editors Libraries PEAR Implementations HHVM HPHPc Parrot Phalanger Project Zero Quercus Zend Engine Web frameworks CakePHP CodeIgniter Drupal eZ Publish Fat-Free FuelPHP Horde Joomla! Laravel Lithium Midgard MODx Nette Framework PRADO Phalcon Qcodo Silex SilverStripe Symfony TYPO3 WordPress Xaraya XOOPS Yii Zend Framework Zeta Components Testing Behat PHPUnit PHP Unit Testing Framework SimpleTest Lime (Symfony) ORMs Doctrine Propel IDEs Aptana Codelobster Eclipse PDT NetBeans PHPEdit PhpStorm RadPHP Zend Studio Widget toolkit PHP-GTK PHP-Qt wxPHP Category Commons Retrieved from \"https:\/\/en.wikipedia.org\/w\/index.php?title=CodeIgniter&oldid=787103107\" Categories: Free software programmed in PHPPHP frameworksWeb frameworksSoftware using the MIT license Navigation menu Personal tools Not logged inTalkContributionsCreate accountLog in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store Interaction HelpAbout WikipediaCommunity portalRecent changesContact page Tools What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page Print\/export Create a bookDownload as PDFPrintable version Languages \u0627\u0644\u0639\u0631\u0628\u064a\u0629\u09ac\u09be\u0982\u09b2\u09beCatal\u00e0\u010ce\u0161tinaDeutschEspa\u00f1ol\u0641\u0627\u0631\u0633\u06ccFran\u00e7ais\ud55c\uad6d\uc5b4\u0540\u0561\u0575\u0565\u0580\u0565\u0576Bahasa IndonesiaItaliano\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02Nederlands\u65e5\u672c\u8a9ePolskiPortugu\u00easRom\u00e2n\u0103\u0420\u0443\u0441\u0441\u043a\u0438\u0439Sloven\u010dinaSvenska\u0e44\u0e17\u0e22T\u00fcrk\u00e7e\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430Ti\u1ebfng Vi\u1ec7t\u4e2d\u6587 Edit links This page was last edited on 23 June 2017, at 12:53. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view (window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"0.244\",\"walltime\":\"0.317\",\"ppvisitednodes\":{\"value\":1401,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":0,\"limit\":1500000},\"postexpandincludesize\":{\"value\":69798,\"limit\":2097152},\"templateargumentsize\":{\"value\":1619,\"limit\":2097152},\"expansiondepth\":{\"value\":25,\"limit\":40},\"expensivefunctioncount\":{\"value\":2,\"limit\":500},\"entityaccesscount\":{\"value\":1,\"limit\":400},\"timingprofile\":[\"100.00% 251.724 1 -total\",\" 42.94% 108.102 2 Template:Infobox\",\" 41.15% 103.587 1 Template:Infobox_software\",\" 34.89% 87.816 1 Template:Reflist\",\" 26.63% 67.039 12 Template:Cite_web\",\" 8.74% 21.989 1 Template:Official_URL\",\" 8.22% 20.696 1 Template:Infobox_software\/simple\",\" 7.89% 19.856 2 Template:Navbox\",\" 5.16% 12.995 1 Template:Web_frameworks\",\" 5.01% 12.612 1 Template:Official_website\"]},\"scribunto\":{\"limitreport-timeusage\":{\"value\":\"0.102\",\"limit\":\"10.000\"},\"limitreport-memusage\":{\"value\":4270448,\"limit\":52428800}},\"cachereport\":{\"origin\":\"mw1220\",\"timestamp\":\"20170711160002\",\"ttl\":2592000,\"transientcontent\":false}}});});(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgBackendResponseTime\":390,\"wgHostname\":\"mw1220\"});});","tags":"","url":"https:\/\/en.wikipedia.org\/wiki\/CodeIgniter"},{"title":"Phalcon (framework) - Wikipedia","text":"Phalcon (framework) From Wikipedia, the free encyclopedia Jump to: navigation, search Phalcon Developer(s) Andres Gutierrez and others Initial release November\u00a014,\u00a02012\u00a0(2012-11-14)[1] Stable release 3.0.3[2] \/ 24\u00a0December 2016; 6 months ago\u00a0(2016-12-24) Development status Active Written in C, PHP Platform Unix, Linux, Mac OS\u00a0X, Windows [3] Type Web application framework License BSD License [4] Website phalconphp.com\/en\/ Phalcon is a high-performance PHP web framework based on the model\u2013view\u2013controller (MVC) pattern. Originally released in 2012, it is an open-source framework licensed under the terms of the BSD License. Unlike most PHP frameworks, Phalcon is implemented as a web server extension written in Zephir and C, aiming to boost execution speed, reduce resource usage, and handle more HTTP requests per second than comparable frameworks written primarily in PHP. One drawback of this approach is that root\/administrative access is required on the server to install Phalcon by building a custom binary or using a precompiled one.[5] Contents 1 History 2 See also 3 References 4 External links History[edit] Phalcon was created by Andr\u00e9s Guti\u00e9rrez and collaborators looking for a new approach to traditional web application frameworks written in PHP. The original intention was to use \"Spark\" as the name,[6] but the combination of words \"PHP\" and \"Falcon\" (which is one of fastest animals[7]) ended as the name of the framework. Phalcon's initial release was made available on November 14, 2012. Phalcon\u00a00.3.5 includes an ORM written in C, MVC components, and cache components. This release was followed by the Phalcon\u00a00.5.0 that brought a high-level dialect of SQL called PHQL, and Phalcon\u00a00.6.0 that introduced Volt, a template engine similar to Jinja. Phalcon 1.0 was released on March 21, 2013.[citation needed] with Phalcon 1.3 being the last minor release in that series. Phalcon 2.0 saw most of the project ported from C to Zephir. Phalcon 3.0.0 was released on 29 July 2016,[8] this major release includes support for PHP 7 as well as being Phalcon's first LTS (Long Term Support) release. Phalcon also adopted SemVer for their next releases versioning. See also[edit] Zephir (programming language) Phalcon Slayer\u00a0\u2013 a wrapper that restructures the Phalcon framework References[edit] ^ \"Release Version 0.4.5 \u00b7 phalcon\/cphalcon\". github.com. 2012-11-14. Retrieved 2015-03-09.\u00a0 ^ \"Release Version 3.0.3 \u00b7 phalcon\/cphalcon\". github.com. 2016-12-24. Retrieved 2016-12-24.\u00a0 ^ \"Download Phalcon for Linux\/Unix\/Mac\". phalconphp.com.\u00a0 ^ \"cphalcon\/LICENSE.md at master \u00b7 phalcon\/cphalcon \u00b7 GitHub\". GitHub.\u00a0 ^ Lukasz Kujawa (2013-05-09). \"Is Phalcon the promised land for PHP?\". systemsarchitect.net. Retrieved 2015-03-14.\u00a0 ^ \"Interview with PhalconPHP Creator Andr\u00e9s Guti\u00e9rrez\". phalcon.io. 2015-05-19. Retrieved 2015-05-23.\u00a0 ^ \"10 Fastest Animals On Earth\". conservationinstitute.org. 2015-04-06. Retrieved 2015-05-23.\u00a0 ^ \"Phalcon 3.0.0 released - Phalcon Framework\". phalconphp.com. 2016-07-29. Retrieved 2016-07-29.\u00a0 External links[edit] Official website Source code from Github Monthly Fundraising Campaign Awesome Phalcon - A curated list of Phalcon libraries and resources Getting Started with Phalcon, a PHP Framework\u00a0\u2013 Part 2 v t e PHP People Andi Gutmans Rasmus Lerdorf Zeev Suraski Resources Accelerator (List) Composer Editors Libraries PEAR Implementations HHVM HPHPc Parrot Phalanger Project Zero Quercus Zend Engine Web frameworks CakePHP CodeIgniter Drupal eZ Publish Fat-Free FuelPHP Horde Joomla! Laravel Lithium Midgard MODx Nette Framework PRADO Phalcon Qcodo Silex SilverStripe Symfony TYPO3 WordPress Xaraya XOOPS Yii Zend Framework Zeta Components Testing Behat PHPUnit PHP Unit Testing Framework SimpleTest Lime (Symfony) ORMs Doctrine Propel IDEs Aptana Codelobster Eclipse PDT NetBeans PHPEdit PhpStorm RadPHP Zend Studio Widget toolkit PHP-GTK PHP-Qt wxPHP Category Commons v t e Web frameworks Comparison C++ CppCMS Wt CLI ASP.NET Core AJAX Dynamic Data MVC Razor Web Forms DNN BFC MonoRail OpenRasta Umbraco ColdFusion CFWheels ColdBox Platform ColdSpring Fusebox Mach-II Model-Glue Common Lisp Caveman2 CL-HTTP UnCommon Web Weblocks D Vibe.d Haskell Happstack Yesod Snap Java AppFuse Flexive Grails GWT ICEfaces ItsNat JavaServer Faces JHipster Jspx JWt OpenXava Play Reasonable Server Faces Remote Application Platform RIFE Seam Spring Stripes Struts Tapestry Vaadin Vert.x WebWork Wicket WaveMaker ZK JavaScript Ample SDK Angular\/AngularJS Backbone.js Chaplin.js Closure Dojo Toolkit Ember.js Ext JS jQuery Meteor MooTools Node.js OpenUI5 Prototype React Rico script.aculo.us Sencha Touch SproutCore Wakanda Perl Catalyst Dancer Mason Maypole Mojolicious WebGUI PHP CakePHP CodeIgniter Fat-Free FuelPHP Gyroscope Horde Kohana Laravel Lithium Midgard MODX Nette Phalcon PRADO Qcodo Silex SilverStripe Symfony TYPO3 Xaraya XOOPS Yii Zend Framework Python BlueBream CherryPy Django Flask Grok Nevow Pyjs Pylons Pyramid Quixote TACTIC Tornado TurboGears web2py Webware Zope 2 Ruby Camping Merb Padrino Ruby on Rails Sinatra Scala Lift Play Scalatra Smalltalk AIDA\/Web Seaside Other languages Application Express (PL\/SQL) Grails (Groovy) Kepler (Lua) OpenACS (Tcl) Phoenix (Elixir) SproutCore (JavaScript-Ruby) Yaws (Erlang) This Web-software-related article is a stub. You can help Wikipedia by expanding it. v t e Retrieved from \"https:\/\/en.wikipedia.org\/w\/index.php?title=Phalcon_(framework)&oldid=761806618\" Categories: PHP frameworksSoftware using the BSD licenseWeb software stubsHidden categories: Pages using deprecated image syntaxAll articles with unsourced statementsArticles with unsourced statements from May 2015Official website different in Wikidata and WikipediaAll stub articles Navigation menu Personal tools Not logged inTalkContributionsCreate accountLog in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store Interaction HelpAbout WikipediaCommunity portalRecent changesContact page Tools What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page Print\/export Create a bookDownload as PDFPrintable version Languages Deutsch\u0641\u0627\u0631\u0633\u06ccFran\u00e7ais\u0420\u0443\u0441\u0441\u043a\u0438\u0439T\u00fcrk\u00e7e\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u4e2d\u6587 Edit links This page was last edited on 24 January 2017, at 22:11. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view (window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"0.264\",\"walltime\":\"0.357\",\"ppvisitednodes\":{\"value\":1394,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":0,\"limit\":1500000},\"postexpandincludesize\":{\"value\":66968,\"limit\":2097152},\"templateargumentsize\":{\"value\":2198,\"limit\":2097152},\"expansiondepth\":{\"value\":25,\"limit\":40},\"expensivefunctioncount\":{\"value\":3,\"limit\":500},\"entityaccesscount\":{\"value\":1,\"limit\":400},\"timingprofile\":[\"100.00% 284.423 1 -total\",\" 47.72% 135.718 2 Template:Infobox\",\" 40.15% 114.207 1 Template:Infobox_Software\",\" 24.80% 70.549 1 Template:Reflist\",\" 20.72% 58.919 8 Template:Cite_web\",\" 13.71% 39.007 1 Template:Citation_needed\",\" 13.26% 37.722 1 Template:Infobox_software\/simple\",\" 12.38% 35.201 1 Template:Fix\",\" 7.74% 22.023 2 Template:Navbox\",\" 6.93% 19.724 2 Template:Category_handler\"]},\"scribunto\":{\"limitreport-timeusage\":{\"value\":\"0.120\",\"limit\":\"10.000\"},\"limitreport-memusage\":{\"value\":5016569,\"limit\":52428800}},\"cachereport\":{\"origin\":\"mw1184\",\"timestamp\":\"20170711160415\",\"ttl\":2592000,\"transientcontent\":false}}});});(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgBackendResponseTime\":89,\"wgHostname\":\"mw1270\"});});","tags":"","url":"https:\/\/en.wikipedia.org\/wiki\/Phalcon_(framework)"},{"title":"JavaScript - Wikipedia","text":"JavaScript From Wikipedia, the free encyclopedia Jump to: navigation, search Not to be confused with Java (programming language), Java (software platform), or Javanese script. JavaScript Paradigm Multi-paradigm: object-oriented (prototype-based), imperative, functional, event-driven[1] Designed\u00a0by Brendan Eich Developer Netscape Communications Corporation, Mozilla Foundation, Ecma International First\u00a0appeared December\u00a04, 1995; 21 years ago\u00a0(1995-12-04)[2] Stable release ECMAScript 2017[3] \/ June\u00a02017; 1\u00a0month ago\u00a0(2017-06) Typing discipline dynamic, duck Filename extensions .js Website Mozilla Major implementations V8, JavaScriptCore, SpiderMonkey, Chakra Influenced by Lua, Scheme, Perl, Self, Java, C, Python, AWK, HyperTalk Influenced ActionScript, AtScript, CoffeeScript, Dart, JScript .NET, LiveScript, Objective-J, Opa, Perl 6, QML, TypeScript JavaScript at Wikibooks JavaScript Filename extension .js Internet media\u00a0type application\/javascript text\/javascript\u00a0(obsolete)[4] Uniform Type Identifier\u00a0(UTI) com.netscape.javascript-source [5] Type of format Scripting language Part of a series on JavaScript JavaScript syntax JavaScript library Unobtrusive JavaScript JavaScript engine Lists of Frameworks and Libraries Ajax frameworks JavaScript web frameworks Comparison of JavaScript frameworks List of JavaScript libraries JavaScript unit testing frameworks JavaScript Object Notation See also ECMAScript v t e JavaScript (\/\u02c8d\u0292\u0251\u02d0v\u0259\u02ccskr\u026apt\/[6]), often abbreviated as JS, is a high-level, dynamic, weakly typed, object-based, multi-paradigm, and interpreted client-side programming language. Alongside HTML and CSS, JavaScript is one of the three core technologies of World Wide Web content production. It is used to make webpages interactive and provide online programs, including video games. The majority of websites employ it, and all modern web browsers support it without the need for plug-ins by means of a built-in JavaScript engine. Each of the many JavaScript engines represent a different implementation of JavaScript, all based on the ECMAScript specification, with some engines not supporting the spec fully, and with many engines supporting additional features beyond ECMA. As a multi-paradigm language, JavaScript supports event-driven, functional, and imperative (including object-oriented and prototype-based) programming styles. It has an API for working with text, arrays, dates, regular expressions, and basic manipulation of the DOM, but does not include any I\/O, such as networking, storage, or graphics facilities, relying for these upon the host environment in which it is embedded. Initially only implemented client-side in web browsers, JavaScript engines are now embedded in many other types of host software, including server-side in web servers and databases, and in non-web programs such as word processors and PDF software, and in runtime environments that make JavaScript available for writing mobile and desktop applications, including desktop widgets. Although there are strong outward similarities between JavaScript and Java, including language name, syntax, and respective standard libraries, the two languages are distinct and differ greatly in design; JavaScript was influenced by programming languages such as Self and Scheme.[7] Contents 1 History 1.1 Beginnings at Netscape 1.2 Server-side JavaScript 1.3 Adoption by Microsoft 1.4 Standardization 1.5 Later developments 2 Trademark 3 Vanilla JavaScript 4 Features 4.1 Universal support 4.2 Imperative and structured 4.3 Dynamic 4.4 Prototype-based (object-oriented) 4.5 Functional 4.6 Delegative 4.7 Miscellaneous 4.8 Vendor-specific extensions 5 Syntax 5.1 Simple examples 5.2 More advanced example 6 Use in Web pages 6.1 Example script 6.2 Compatibility considerations 7 Security 7.1 Cross-site vulnerabilities 7.2 Misplaced trust in the client 7.3 Misplaced trust in developers 7.4 Browser and plugin coding errors 7.5 Sandbox implementation errors 7.6 Hardware vulnerabilities 8 Uses outside Web pages 8.1 Embedded scripting language 8.2 Scripting engine 8.3 Application platform 9 Development tools 10 Benchmark tools for developers 11 Version history 12 Related languages and features 12.1 Use as an intermediate language 12.2 JavaScript and Java 13 See also 14 References 15 Further reading 16 External links History[edit] Beginnings at Netscape[edit] In 1993, the National Center for Supercomputing Applications (NCSA), a unit of the University of Illinois at Urbana-Champaign, released NCSA Mosaic, the first popular graphical Web browser, which played an important part in expanding the growth of the nascent World Wide Web. In 1994, a company called Mosaic Communications was founded in Mountain View, California and employed many of the original NCSA Mosaic authors to create Mosaic Netscape. However, it intentionally shared no code with NCSA Mosaic. The internal codename for the company's browser was Mozilla, which stood for \"Mosaic killer\", as the company's goal was to displace NCSA Mosaic as the world's number one web browser. The first version of the Web browser, Mosaic Netscape 0.9, was released in late 1994. Within four months it had already taken three-quarters of the browser market and became the main browser for the Internet in the 1990s. To avoid trademark ownership problems with the NCSA, the browser was subsequently renamed Netscape Navigator in the same year, and the company took the name Netscape Communications. Netscape Communications realized that the Web needed to become more dynamic. Marc Andreessen, the founder of the company believed that HTML needed a \"glue language\" that was easy to use by Web designers and part-time programmers to assemble components such as images and plugins, where the code could be written directly in the Web page markup. In 1995, the company recruited Brendan Eich with the goal of embedding the Scheme programming language into its Netscape Navigator. Before he could get started, Netscape Communications collaborated with Sun Microsystems to include in Netscape Navigator Sun's more static programming language Java, in order to compete with Microsoft for user adoption of Web technologies and platforms.[8] Netscape Communications then decided that the scripting language they wanted to create would complement Java and should have a similar syntax, which excluded adopting other languages such as Perl, Python, TCL, or Scheme. To defend the idea of JavaScript against competing proposals, the company needed a prototype. Eich wrote one in 10 days, in May 1995. Although it was developed under the name Mocha, the language was officially called LiveScript when it first shipped in beta releases of Netscape Navigator 2.0 in September 1995, but it was renamed JavaScript[2] when it was deployed in the Netscape Navigator 2.0 beta 3 in December.[9] The final choice of name caused confusion, giving the impression that the language was a spin-off of the Java programming language, and the choice has been characterized as a marketing ploy by Netscape to give JavaScript the cachet of what was then the hot new Web programming language. There is a common misconception that JavaScript was influenced by an earlier Web page scripting language developed by Nombas named C-- (not to be confused with the later C-- created in 1997).[10][11] Brendan Eich, however, had never heard of C-- before he created LiveScript.[12] Nombas did pitch their embedded Web page scripting to Netscape, though Web page scripting was not a new concept, as shown by the ViolaWWW Web browser.[13] Nombas later switched to offering JavaScript instead of C-- in their ScriptEase product and was part of the TC39 group that standardized ECMAScript.[14] Server-side JavaScript[edit] In December 1995, soon after releasing JavaScript for browsers, Netscape introduced an implementation of the language for server-side scripting with Netscape Enterprise Server.[15] Since the mid-2000s, additional server-side JavaScript implementations have been introduced, such as Node.js in 2009.[16] Adoption by Microsoft[edit] Microsoft script technologies including VBScript and JScript were released in 1996. JScript, a reverse-engineered implementation of Netscape's JavaScript, was part of Internet Explorer 3. JScript was also available for server-side scripting in Internet Information Server. Internet Explorer 3 also included Microsoft's first support for CSS and various extensions to HTML, but in each case the implementation was noticeably different to that found in Netscape Navigator at the time.[17][18] These differences made it difficult for designers and programmers to make a single website work well in both browsers, leading to the use of \"best viewed in Netscape\" and \"best viewed in Internet Explorer\" logos that characterized these early years of the browser wars.[19] JavaScript began to acquire a reputation for being one of the roadblocks to a cross-platform and standards-driven Web. Some developers took on the difficult task of trying to make their sites work in both major browsers, but many could not afford the time.[17] With the release of Internet Explorer 4, Microsoft introduced the concept of Dynamic HTML, but the differences in language implementations and the different and proprietary Document Object Models remained and were obstacles to widespread take-up of JavaScript on the Web.[17] Standardization[edit] In November 1996, Netscape submitted JavaScript to Ecma International to carve out a standard specification, which other browser vendors could then implement based on the work done at Netscape. This led to the official release of the language specification ECMAScript published in the first edition of the ECMA-262 standard in June 1997, with JavaScript being the most well known of the implementations. ActionScript and JScript are other well-known implementations of ECMAScript, with extensions. The standards process continued in cycles, with the release of ECMAScript 2 in June 1998, which brings some modifications to conform to the ISO\/IEC 16262 international standard. The release of ECMAScript 3 followed in December 1999, which is the baseline for modern day JavaScript. The original ECMAScript 4 work led by Waldemar Horwat (then at Netscape, now at Google) started in 2000 and at first, Microsoft seemed to participate and even implemented some of the proposals in their JScript .NET language. Over time it was clear though that Microsoft had no intention of cooperating or implementing proper JavaScript in Internet Explorer, even though they had no competing proposal and they had a partial (and diverged at this point) implementation on the .NET server side. So by 2003, the original ECMAScript 4 work was mothballed. The next major event was in 2005, with two major happenings in JavaScript's history. First, Brendan Eich and Mozilla rejoined Ecma International as a not-for-profit member and work started on ECMAScript for XML (E4X), the ECMA-357 standard, which came from ex-Microsoft employees at BEA Systems (originally acquired as Crossgain). This led to working jointly with Macromedia (later acquired by Adobe Systems), who were implementing E4X in ActionScript 3 (ActionScript 3 was a fork of original ECMAScript 4). So, along with Macromedia, work restarted on ECMAScript 4 with the goal of standardizing what was in ActionScript 3. To this end, Adobe Systems released the ActionScript Virtual Machine 2, code named Tamarin, as an open source project. But Tamarin and ActionScript 3 were too different from web JavaScript to converge, as was realized by the parties in 2007 and 2008. Alas, there was still turmoil between the various players; Douglas Crockford\u2014then at Yahoo!\u2014joined forces with Microsoft in 2007 to oppose ECMAScript 4, which led to the ECMAScript 3.1 effort. The development of ECMAScript 4 was never completed, but that work influenced subsequent versions.[20] While all of this was happening, the open source and developer communities set to work to revolutionize what could be done with JavaScript. This community effort was sparked in 2005 when Jesse James Garrett released a white paper in which he coined the term Ajax, and described a set of technologies, of which JavaScript was the backbone, used to create web applications where data can be loaded in the background, avoiding the need for full page reloads and leading to more dynamic applications. This resulted in a renaissance period of JavaScript usage spearheaded by open source libraries and the communities that formed around them, with libraries such as Prototype, jQuery, Dojo Toolkit, MooTools, and others being released. In July 2008, the disparate parties on either side came together in Oslo. This led to the eventual agreement in early 2009 to rename ECMAScript 3.1 to ECMAScript 5 and drive the language forward using an agenda that is known as Harmony. ECMAScript 5 was finally released in December 2009. In June 2011, ECMAScript 5.1 was released to fully align with the third edition of the ISO\/IEC 16262 international standard. ECMAScript 2015 was released in June 2015. ECMAScript 2016 was released in June 2016. The current version is ECMAScript 2017, released in June 2017.[21] Later developments[edit] JavaScript has become one of the most popular programming languages on the Web. Initially, however, many professional programmers denigrated the language because, among other reasons, its target audience consisted of Web authors and other such \"amateurs\".[22] The advent of Ajax returned JavaScript to the spotlight and brought more professional programming attention. The result was a proliferation of comprehensive frameworks and libraries, improved JavaScript programming practices, and increased usage of JavaScript outside Web browsers, as seen by the proliferation of server-side JavaScript platforms. In January 2009, the CommonJS project was founded with the goal of specifying a common standard library mainly for JavaScript development outside the browser.[23] With the rise of single-page applications and JavaScript-heavy sites, it is increasingly being used as a compile target for source-to-source compilers from both dynamic languages and static languages. Trademark[edit] \"JavaScript\" is a trademark of Oracle Corporation in the United States.[24] It is used under license for technology invented and implemented by Netscape Communications and current entities such as the Mozilla Foundation.[25] Vanilla JavaScript[edit] The terms Vanilla JavaScript and Vanilla JS refer to JavaScript not extended by any frameworks or additional libraries. Scripts written in Vanilla JS are plain JavaScript code. Features[edit] The following features are common to all conforming ECMAScript implementations, unless explicitly specified otherwise. Universal support[edit] All modern Web browsers support JavaScript with built-in interpreters. Imperative and structured[edit] JavaScript supports much of the structured programming syntax from C (e.g., if statements, while loops, switch statements, do while loops, etc.). One partial exception is scoping: JavaScript originally had only function scoping with var. ECMAScript 2015 added keywords let and const for block scoping, meaning JavaScript now has both function and block scoping. Like C, JavaScript makes a distinction between expressions and statements. One syntactic difference from C is automatic semicolon insertion, which allows the semicolons that would normally terminate statements to be omitted.[26] Dynamic[edit] Typing As with most scripting languages, JavaScript is dynamically typed; a type is associated with each value, rather than just with each expression. For example, a variable that is at one time bound to a number may later be re-bound to a string.[27] JavaScript supports various ways to test the type of an object, including duck typing.[28] Run-time evaluation JavaScript includes an eval function that can execute statements provided as strings at run-time. Prototype-based (object-oriented)[edit] JavaScript is almost entirely object-based. In JavaScript, an object is an associative array, augmented with a prototype (see below); each string key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (obj.x\u00a0=\u00a010) and bracket notation (obj['x']\u00a0=\u00a010). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object's prototype inheritance chain) can be enumerated using a for...in loop. JavaScript has a small number of built-in objects, including Function and Date. Prototypes JavaScript uses prototypes where many other object-oriented languages use classes for inheritance.[29] It is possible to simulate many class-based features with prototypes in JavaScript.[30] Functions as object constructors Functions double as object constructors, along with their typical role. Prefixing a function call with new will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the Object prototype).[31] ECMAScript 5 offers the Object.create method, allowing explicit creation of an instance without automatically inheriting from the Object prototype (older environments can assign the prototype to null).[32] The constructor's prototype property determines the object used for the new object's internal prototype. New methods can be added by modifying the prototype of the function used as a constructor. JavaScript's built-in constructors, such as Array or Object, also have prototypes that can be modified. While it is possible to modify the Object prototype, it is generally considered bad practice because most objects in JavaScript will inherit methods and properties from the Object prototype, and they may not expect the prototype to be modified.[33] Functions as methods Unlike many object-oriented languages, there is no distinction between a function definition and a method definition. Rather, the distinction occurs during function calling; when a function is called as a method of an object, the function's local this keyword is bound to that object for that invocation. Functional[edit] A function is first-class; a function is considered to be an object. As such, a function may have properties and methods, such as .call() and .bind().[34] A nested function is a function defined within another function. It is created each time the outer function is invoked. In addition, each nested function forms a lexical closure: The lexical scope of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.[35] JavaScript also supports anonymous functions. Delegative[edit] JavaScript supports implicit and explicit delegation. Functions as roles (Traits and Mixins) JavaScript natively supports various function-based implementations of Role[36] patterns like Traits[37][38] and Mixins.[39] Such a function defines additional behavior by at least one method bound to the this keyword within its function body. A Role then has to be delegated explicitly via call or apply to objects that need to feature additional behavior that is not shared via the prototype chain. Object composition and inheritance Whereas explicit function-based delegation does cover composition in JavaScript, implicit delegation already happens every time the prototype chain is walked in order to, e.g., find a method that might be related to but is not directly owned by an object. Once the method is found it gets called within this object's context. Thus inheritance in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor functions. Miscellaneous[edit] Run-time environment JavaScript typically relies on a run-time environment (e.g., a Web browser) to provide objects and methods by which scripts can interact with the environment (e.g., a webpage DOM). It also relies on the run-time environment to provide the ability to include\/import scripts (e.g., HTML elements). This is not a language feature per se, but it is common in most JavaScript implementations. JavaScript processes messages from a queue one at a time. Upon loading a new message, JavaScript calls a function associated with that message, which creates a call stack frame (the function's arguments and local variables). The call stack shrinks and grows based on the function's needs. Upon function completion, when the stack is empty, JavaScript proceeds to the next message in the queue. This is called the event loop, described as \"run to completion\" because each message is fully processed before the next message is considered. However, the language's concurrency model describes the event loop as non-blocking: program input\/output is performed using events and callback functions. This means, for instance, that JavaScript can process a mouse click while waiting for a database query to return information.[40] Variadic functions An indefinite number of parameters can be passed to a function. The function can access them through formal parameters and also through the local arguments object. Variadic functions can also be created by using the bind method. Array and object literals Like many scripting languages, arrays and objects (associative arrays in other languages) can each be created with a succinct shortcut syntax. In fact, these literals form the basis of the JSON data format. Regular expressions JavaScript also supports regular expressions in a manner similar to Perl, which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built-in string functions.[41] Vendor-specific extensions[edit] JavaScript is officially managed by Mozilla Foundation, and new language features are added periodically. However, only some JavaScript engines support these new features: property getter and setter functions (supported by WebKit, Gecko, Opera,[42] ActionScript, and Rhino)[43] conditional catch clauses iterator protocol (adopted from Python) shallow generators-coroutines (adopted from Python) array comprehensions and generator expressions (adopted from Python) proper block scope via the let keyword array and object destructuring (limited form of pattern matching) concise function expressions (function(args) expr) ECMAScript for XML (E4X), an extension that adds native XML support to ECMAScript (unsupported in Firefox since version 21[44]) Syntax[edit] Main article: JavaScript syntax Simple examples[edit] Variables in JavaScript can be defined using the var keyword:[45] var x; \/\/ defines the variable x and assigns to it the special value \"undefined\" (not to be confused with an undefined value) var y = 2; \/\/ defines the variable y and assigns to it the value 2 var z = \"Hello, World!\"; \/\/ defines the variable z and assigns to it a string entitled \"Hello, World!\" Note the comments in the example above, both of which were preceded with two forward slashes. There is no built-in I\/O functionality in JavaScript; the run-time environment provides that. The ECMAScript specification in edition 5.1 mentions:[46] \u2026 indeed, there are no provisions in this specification for input of external data or output of computed results. However, most runtime environments have a console object[47] that can be used to print output. Here is a minimalist Hello World program in JavaScript: console.log(\"Hello World!\"); A simple recursive function: function factorial(n) { if (n === 0 || n === 1) { return 1; \/\/ 0! = 1! = 1 } return n * factorial(n - 1); } factorial(3); \/\/ returns 6 An anonymous function (or lambda): function counter() { var count = 0; return function() { return ++count; }; } var closure = counter(); closure(); \/\/ returns 1 closure(); \/\/ returns 2 closure(); \/\/ returns 3 In JavaScript, objects are created in the same way as functions, this is known as a function object. Object example: function Ball(r) { this.radius = r; \/\/the radius variable is local to the ball object this.area = pi*r**2; this.show = function(){ \/\/objects can contain functions drawCircle(r); \/\/references a circle drawing function } } myBall = new Ball(5); \/\/creates a new instance of the ball object with radius 5 myBall.show(); \/\/this instance of the ball object has the show function performed on it This example shows that, in JavaScript, function closures capture their non-local variables by reference. Variadic function demonstration (arguments is a special variable):[48] function sum() { var x = 0; for (var i = 0; i < arguments.length; ++i) { x += arguments[i]; } return x; } sum(1, 2); \/\/ returns 3 sum(1, 2, 3); \/\/ returns 6 Immediately-invoked function expressions are often used to create modules, as before ECMAScript 2015 there was not built-in construct in the language. Modules allow gathering properties and methods in a namespace and making some of them private: var counter = (function () { var i = 0; \/\/ private property return { \/\/ public methods get: function () { alert(i); }, set: function (value) { i = value; }, increment: function () { alert(++i); } }; })(); \/\/ module counter.get(); \/\/ shows 0 counter.set(6); counter.increment(); \/\/ shows 7 counter.increment(); \/\/ shows 8 More advanced example[edit] This sample code displays various JavaScript features. \/* Finds the lowest common multiple (LCM) of two numbers *\/ function LCMCalculator(x, y) { \/\/ constructor function var checkInt = function(x) { \/\/ inner function if (x % 1 !== 0) { throw new TypeError(x + \"is not an integer\"); \/\/ var a = mouseX }; return x } this.a = checkInt(x) \/\/ semicolons ^^^^ are optional, a newline is enough this.b = checkInt(y); } \/\/ The prototype of object instances created by a constructor is \/\/ that constructor's \"prototype\" property. LCMCalculator.prototype = { \/\/ object literal constructor: LCMCalculator, \/\/ when reassigning a prototype, set the constructor property appropriately gcd: function() { \/\/ method that calculates the greatest common divisor \/\/ Euclidean algorithm: var a = Math.abs(this.a), b = Math.abs(this.b), t; if (a < b) { \/\/ swap variables t = b; b = a; a = t; } while (b !== 0) { t = b; b = a % b; a = t; } \/\/ Only need to calculate GCD once, so \"redefine\" this method. \/\/ (Actually not redefinition\u2014it's defined on the instance itself, \/\/ so that this.gcd refers to this \"redefinition\" instead of LCMCalculator.prototype.gcd. \/\/ Note that this leads to a wrong result if the LCMCalculator object members \"a\" and\/or \"b\" are altered afterwards.) \/\/ Also, 'gcd' === \"gcd\", this['gcd'] === this.gcd this['gcd'] = function() { return a; }; return a; }, \/\/ Object property names can be specified by strings delimited by double (\") or single (') quotes. lcm: function() { \/\/ Variable names don't collide with object properties, e.g., |lcm| is not |this.lcm|. \/\/ not using |this.a*this.b| to avoid FP precision issues var lcm = this.a \/ this.gcd() * this.b; \/\/ Only need to calculate lcm once, so \"redefine\" this method. this.lcm = function() { return lcm; }; return lcm; }, toString: function() { return \"LCMCalculator: a = \" + this.a + \", b = \" + this.b; } }; \/\/ Define generic output function; this implementation only works for Web browsers function output(x) { document.body.appendChild(document.createTextNode(x)); document.body.appendChild(document.createElement('br')); } \/\/ Note: Array's map() and forEach() are defined in JavaScript 1.6. \/\/ They are used here to demonstrate JavaScript's inherent functional nature. [ [25, 55], [21, 56], [22, 58], [28, 56] ].map(function(pair) { \/\/ array literal + mapping function return new LCMCalculator(pair[0], pair[1]); }).sort((a, b) => a.lcm() - b.lcm()) \/\/ sort with this comparative function; => is a shorthand form of a function, called \"arrow function\" .forEach(printResult); function printResult(obj) { output(obj + \", gcd = \" + obj.gcd() + \", lcm = \" + obj.lcm()); } The following output should be displayed in the browser window. LCMCalculator: a = 28, b = 56, gcd = 28, lcm = 56 LCMCalculator: a = 21, b = 56, gcd = 7, lcm = 168 LCMCalculator: a = 25, b = 55, gcd = 5, lcm = 275 LCMCalculator: a = 22, b = 58, gcd = 2, lcm = 638 Use in Web pages[edit] See also: Dynamic HTML and Ajax (programming) As of May 2017 94.5% of 10 million most popular web pages used JavaScript.[49] The most common use of JavaScript is to add client-side behavior to HTML pages, also known as Dynamic HTML (DHTML). Scripts are embedded in or included from HTML pages and interact with the Document Object Model (DOM) of the page. Some simple examples of this usage are: Loading new page content or submitting data to the server via Ajax without reloading the page (for example, a social network might allow the user to post status updates without leaving the page). Animation of page elements, fading them in and out, resizing them, moving them, etc. Interactive content, for example games, and playing audio and video. Validating input values of a Web form to make sure that they are acceptable before being submitted to the server. Transmitting information about the user's reading habits and browsing activities to various websites. Web pages frequently do this for Web analytics, ad tracking, personalization or other purposes.[50] Because JavaScript code can run locally in a user's browser (rather than on a remote server), the browser can respond to user actions quickly, making an application more responsive. Furthermore, JavaScript code can detect user actions that HTML alone cannot, such as individual keystrokes. Applications such as Gmail take advantage of this: much of the user-interface logic is written in JavaScript, and JavaScript dispatches requests for information (such as the content of an e-mail message) to the server. The wider trend of Ajax programming similarly exploits this strength. A JavaScript engine (also known as JavaScript interpreter or JavaScript implementation) is an interpreter that interprets JavaScript source code and executes the script accordingly. The first JavaScript engine was created by Brendan Eich at Netscape, for the Netscape Navigator Web browser. The engine, code-named SpiderMonkey, is implemented in C. It has since been updated (in JavaScript 1.5) to conform to ECMAScript 3. The Rhino engine, created primarily by Norris Boyd (formerly at Netscape, now at Google) is a JavaScript implementation in Java. Rhino, like SpiderMonkey, is ECMAScript 3 compliant. A Web browser is by far the most common host environment for JavaScript. Web browsers typically create \"host objects\" to represent the DOM in JavaScript. The Web server is another common host environment. A JavaScript Web server would typically expose host objects representing HTTP request and response objects, which a JavaScript program could then interrogate and manipulate to dynamically generate Web pages. Because JavaScript is the only language that the most popular browsers share support for, it has become a target language for many frameworks in other languages, even though JavaScript was never intended to be such a language.[51] Despite the performance limitations inherent to its dynamic nature, the increasing speed of JavaScript engines has made the language a surprisingly feasible compilation target. Example script[edit] Below is a minimal example of a standards-conforming Web page containing JavaScript (using HTML 5 syntax) and the DOM: Example Hello document.getElementById('hellobutton').onclick = function() { alert('Hello world!'); \/\/ Show a dialog var myTextNode = document.createTextNode('Some new words.'); document.body.appendChild(myTextNode); \/\/ Append \"Some new words\" to the page }; Compatibility considerations[edit] Main article: Web interoperability Because JavaScript runs in widely varying environments, an important part of testing and debugging is to test and verify that the JavaScript works across multiple browsers. The DOM interfaces for manipulating Web pages are not part of the ECMAScript standard, or of JavaScript itself. Officially, the DOM interfaces are defined by a separate standardization effort by the W3C; in practice, browser implementations differ from the standards and from each other, and not all browsers execute JavaScript. To deal with these differences, JavaScript authors can attempt to write standards-compliant code that will also be executed correctly by most browsers; failing that, they can write code that checks for the presence of certain browser features and behaves differently if they are not available.[52] In some cases, two browsers may both implement a feature but with different behavior, and authors may find it practical to detect what browser is running and change their script's behavior to match.[53][54] Programmers may also use libraries or toolkits that take browser differences into account. Furthermore, scripts may not work for some users. For example, a user may: use an old or rare browser with incomplete or unusual DOM support; use a PDA or mobile phone browser that cannot execute JavaScript; have JavaScript execution disabled as a security precaution; use a speech browser due to, for example, a visual disability. To support these users, Web authors can try to create pages that degrade gracefully on user agents (browsers) that do not support the page's JavaScript. In particular, the page should remain usable albeit without the extra features that the JavaScript would have added. Some sites use the HTML tag, which contains alt content if JS is disabled. An alternative approach that many find preferable is to first author content using basic technologies that work in all browsers, then enhance the content for users that have JavaScript enabled. This is known as progressive enhancement. Security[edit] See also: Browser security JavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the Web. Browser authors contain this risk using two restrictions. First, scripts run in a sandbox in which they can only perform Web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the same origin policy: scripts from one Web site do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox. There are subsets of general JavaScript\u2014ADsafe, Secure ECMAScript (SES)\u2014that provide greater levels of security, especially on code created by third parties (such as advertisements).[55][56] Caja is another project for safe embedding and isolation of third-party JavaScript and HTML. Content Security Policy is the main intended method of ensuring that only trusted code is executed on a Web page. See also: Content Security Policy Cross-site vulnerabilities[edit] Main articles: Cross-site scripting and Cross-site request forgery A common JavaScript-related security problem is cross-site scripting (XSS), a violation of the same-origin policy. XSS vulnerabilities occur when an attacker is able to cause a target Web site, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim's authorization. A solution to XSS vulnerabilities is to use HTML escaping whenever displaying untrusted data. Some browsers include partial protection against reflected XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server side can fully prevent XSS. XSS vulnerabilities can also occur because of implementation mistakes by browser authors.[57] Another cross-site vulnerability is cross-site request forgery (CSRF). In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user didn't intend at a target site (like transferring money at a bank). It works because, if the target site relies only on cookies to authenticate requests, then requests initiated by code on the attacker's site will carry the same legitimate login credentials as requests initiated by the user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help. \"JavaScript hijacking\" is a type of CSRF attack in which a tag on an attacker's site exploits a page on the victim's site that returns private information such as JSON or JavaScript. Possible solutions include: requiring an authentication token in the POST and GET parameters for any response that returns private information. Misplaced trust in the client[edit] Developers of client-server applications must recognize that untrusted clients may be under the control of attackers. The application author cannot assume that his JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are: Web site authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be obfuscated, but obfuscation can be reverse-engineered. JavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client. Scripts can be selectively disabled, so JavaScript can't be relied on to prevent operations such as right-clicking on an image to save it.[58] It is extremely bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker. Misplaced trust in developers[edit] Package management systems such as NPM and Bower are popular with JavaScript developers. Such systems allow a developer to easily manage their program's dependencies upon other developer's program libraries. Developers trust that the maintainers of the libraries will keep it secure and up to date, but that is not always the case. A vulnerability has emerged because of this blind trust. Relied upon libraries can release an update that causes bugs or vulnerabilities to appear in all programs that rely upon the library. Inversely, a library can go unpatched with known vulnerabilities out in the wild. In a study done looking over a sample of 133k websites, researchers found 37% of the websites included a library with at-least one known vulnerability.[59] \"The median lag between the oldest library version used on each website and the newest available version of that library is 1,177 days in ALEXA, and development of some libraries still in active use ceased years ago.\"[59] Another possibility is that the maintainer of a library may remove the library entirely. This occurred in March 2016 when Azer Ko\u00e7ulu removed his repository from NPM. This caused all tens of thousands of programs and websites depending upon his libraries to break.[60][61] Browser and plugin coding errors[edit] JavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as buffer overflows. These flaws can allow attackers to write scripts that would run any code they wish on the user's system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system's API with superuser privileges. These flaws have affected major browsers including Firefox,[62] Internet Explorer,[63] and Safari.[64] Plugins, such as video players, Adobe Flash, and the wide range of ActiveX controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past).[65][66] In Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges.[67] Google Chrome similarly confines its page renderers to their own \"sandbox\". Sandbox implementation errors[edit] Web browsers are capable of running JavaScript outside the sandbox, with the privileges necessary to, for example, create or delete files. Of course, such privileges aren't meant to be granted to code from the Web. Incorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer[68] and Firefox.[69] In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer.[70] Microsoft Windows allows JavaScript source files on a computer's hard drive to be launched as general-purpose, non-sandboxed programs (see: Windows Script Host). This makes JavaScript (like VBScript) a theoretically viable vector for a Trojan horse, although JavaScript Trojan horses are uncommon in practice.[71][not in citation given] Hardware vulnerabilities[edit] In 2017 a JavaScript based attack via browser was demonstrated that could bypass ASLR. It's called \"ASLR\u2295Cache\" or AnC.[72][73] Uses outside Web pages[edit] In addition to Web browsers and servers, JavaScript interpreters are embedded in a number of tools. Each of these applications provides its own object model that provides access to the host environment. The core JavaScript language remains mostly the same in each application. Embedded scripting language[edit] Google's Chrome extensions, Opera's extensions, Apple's Safari 5 extensions, Apple's Dashboard Widgets, Microsoft's Gadgets, Yahoo! Widgets, Google Desktop Gadgets, and Serence Klipfolio are implemented using JavaScript. The MongoDB database accepts queries written in JavaScript. MongoDB and NodeJS are the core components of MEAN: a solution stack for creating Web applications using just JavaScript. The Clusterpoint database accept queries written in JS\/SQL, which is a combination of SQL and JavaScript. Clusterpoint has built-in computing engine that allows execution of JavaScript code right inside the distributed database. Adobe's Acrobat and Adobe Reader support JavaScript in PDF files.[74] Tools in the Adobe Creative Suite, including Photoshop, Illustrator, Dreamweaver, and InDesign, allow scripting through JavaScript. OpenOffice.org, an office application suite, as well as its popular fork LibreOffice, allows JavaScript to be used as a scripting language. The visual programming language Max, released by Cycling '74, offers a JavaScript model of its environment for use by developers. It allows users to reduce visual clutter by using an object for a task rather than many. Apple's Logic Pro X digital audio workstation (DAW) software can create custom MIDI effects plugins using JavaScript.[75] ECMAScript was included in the VRML97 standard for scripting nodes of VRML scene description files.[citation needed] The Unity game engine supports a modified version of JavaScript for scripting via Mono.[76] DX Studio (3D engine) uses the SpiderMonkey implementation of JavaScript for game and simulation logic.[77] Maxwell Render (rendering software) provides an ECMA standard based scripting engine for tasks automation.[78] Google Apps Script in Google Spreadsheets and Google Sites allows users to create custom formulas, automate repetitive tasks and also interact with other Google products such as Gmail.[79] Many IRC clients, like ChatZilla or XChat, use JavaScript for their scripting abilities.[80][81] RPG Maker MV uses JavaScript as its scripting language.[82] The text editor UltraEdit uses JavaScript 1.7 as internal scripting language, introduced with version 13 in 2007. Scripting engine[edit] Microsoft's Active Scripting technology supports JScript as a scripting language.[83] Java introduced the javax.script package in version 6 that includes a JavaScript implementation based on Mozilla Rhino. Thus, Java applications can host scripts that access the application's variables and objects, much like Web browsers host scripts that access a webpage's Document Object Model (DOM).[84][85] The Qt C++ toolkit includes a QtScript module to interpret JavaScript, analogous to Java's javax.script package.[86] OS X Yosemite introduced JavaScript for Automation (JXA), which is built upon JavaScriptCore and the Open Scripting Architecture. It features an Objective-C bridge that enables entire Cocoa applications to be programmed in JavaScript. Late Night Software's JavaScript OSA (also known as JavaScript for OSA, or JSOSA) is a freeware alternative to AppleScript for OS X. It is based on the Mozilla JavaScript 1.5 implementation, with the addition of a MacOS object for interaction with the operating system and third-party applications. Application platform[edit] ActionScript, the programming language used in Adobe Flash, is another implementation of the ECMAScript standard. Adobe AIR (Adobe Integrated Runtime) is a JavaScript runtime that allows developers to create desktop applications. Electron is an open-source framework developed by GitHub. CA Technologies AutoShell cross-application scripting environment is built on the SpiderMonkey JavaScript engine. It contains preprocessor-like extensions for command definition, as well as custom classes for various system-related tasks like file I\/O, operation system command invocation and redirection, and COM scripting. Apache Cordova is a mobile application development framework Cocos2d is an open source software framework. It can be used to build games, apps and other cross platform GUI based interactive programs Chromium Embedded Framework (CEF) is an open source framework for embedding a web browser engine based on the Chromium core RhoMobile Suite is a set of development tools for creating data-centric, cross-platform, native mobile consumer and enterprise applications. NW.js call all Node.js modules directly from DOM and enable a new way of writing applications with all Web technologies.[87] GNOME Shell, the shell for the GNOME 3 desktop environment,[88] made JavaScript its default programming language in 2013.[89] The Mozilla application framework (XPFE) platform, which underlies Firefox, Thunderbird, and some other Web browsers, uses JavaScript to implement the graphical user interface (GUI) of its various products. Qt Quick's markup language (available since Qt 4.7) uses JavaScript for its application logic. Its declarative syntax is also similar to JavaScript. Ubuntu Touch provides a JavaScript API for its unified usability interface. Open webOS is the next generation of web-centric platforms built to run on a wide range of form factors.[90] enyo JS is a framework to develop apps for all major platforms, from phones and tablets to PCs and TVs[91] WinJS provides a special Windows Library for JavaScript functionality in Windows 8 that enables the development of Modern style (formerly Metro style) applications in HTML5 and JavaScript. NativeScript is an open-source framework to develop apps on the Apple iOS and Android platforms. Weex is a framework for building Mobile cross-platform UI, created by China Tech giant Alibaba[92] XULRunner is packaged version of the Mozilla platform to enable standalone desktop application development Development tools[edit] Within JavaScript, access to a debugger becomes invaluable when developing large, non-trivial programs. Because there can be implementation differences between the various browsers (particularly within the DOM), it is useful to have access to a debugger for each of the browsers that a Web application targets.[93] Script debuggers are integrated within Internet Explorer, Firefox, Safari, Google Chrome, Opera and Node.js.[94][95][96] In addition to the native Internet Explorer Developer Tools, three debuggers are available for Internet Explorer: Microsoft Visual Studio is the richest of the three, closely followed by Microsoft Script Editor (a component of Microsoft Office),[97] and finally the free Microsoft Script Debugger that is far more basic than the other two. The free Microsoft Visual Web Developer Express provides a limited version of the JavaScript debugging functionality in Microsoft Visual Studio. Internet Explorer has included developer tools since version 8. In comparison to Internet Explorer, Firefox has a more comprehensive set of developer tools, which include a debugger as well. Old versions of Firefox without these tools used a Firefox addon called Firebug, or the older Venkman debugger. Also, WebKit's Web Inspector includes a JavaScript debugger,[98] which is used in Safari. A modified version called Blink DevTools is used in Google Chrome. Node.js has Node Inspector, an interactive debugger that integrates with the Blink DevTools, available in Google Chrome. Opera includes a set of tools called Dragonfly.[99] In addition to the native computer software, there are online JavaScript IDEs, debugging aids that are themselves written in JavaScript and built to run on the Web. An example is the program JSLint, developed by Douglas Crockford who has written extensively on the language. JSLint scans JavaScript code for conformance to a set of standards and guidelines. Many libraries for JavaScript, such as three.js, provide links to demonstration code that can be edited by users. They are also used as a pedagogical tool by institutions such as Khan Academy[100] to allow students to experience writing code in an environment where they can see the output of their programs, without needing any setup beyond a Web browser. Benchmark tools for developers[edit] Since JavaScript is getting more important for web development (frontend overtakes many aspects which were done in backend before), there is also more consideration done about performance. Especially mobile devices could have problems with rendering and processing unoptimized complex logic. A library for doing benchmarks is benchmark.js. A benchmarking library that supports high-resolution timers and returns statistically significant results[citation needed]. Another tool is jsben.ch. An online JavaScript benchmarking tool, where code snippets can be tested against each other. Version history[edit] See also: ECMAScript \u00a7\u00a0Versions, and ECMAScript \u00a7\u00a0Version correspondence JavaScript was initially developed in 1996 for use in the Netscape Navigator Web browser. In the same year Microsoft released an implementation for Internet Explorer. This implementation was called JScript due to trademark issues. In 1997 the first standardized version of the language was released under the name ECMAScript in the first edition of the ECMA-252 standard. The explicit versioning and opt-in of language features was Mozilla-specific and has been removed. Firefox 4 was the last version which referred to a JavaScript version (1.8.5). With new editions of the ECMA-262 standard, JavaScript language features are now often mentioned with their initial definition in the ECMA-262 editions. The following table is based on information from multiple sources.[101][102][103] Version Release date Equivalent to Netscape Navigator Mozilla Firefox Internet Explorer Opera Safari Google Chrome Old version, no longer supported: 1.0 March 1996 2.0 3.0 Old version, no longer supported: 1.1 August 1996 3.0 Old version, no longer supported: 1.2 June 1997 4.0-4.05 3 Old version, no longer supported: 1.3 October 1998 ECMA-262 1st + 2nd edition 4.06-4.7x 4.0 5[104] Old version, no longer supported: 1.4 Netscape Server 6 Old version, no longer supported: 1.5 November 2000 ECMA-262 3rd edition 6.0 1.0 5.5 (JScript 5.5), 6 (JScript 5.6), 7 (JScript 5.7), 8 (JScript 5.8) 7.0 3.0-5 1.0-10.0.666 Old version, no longer supported: 1.6 November 2005 1.5 + array extras + array and string generics + E4X 1.5 Old version, no longer supported: 1.7 October 2006 1.6 + Pythonic generators + iterators + let 2.0 28.0.1500.95 Old version, no longer supported: 1.8 June 2008 1.7 + generator expressions + expression closures 3.0 11.50 Old version, no longer supported: 1.8.1 1.8 + native JSON support + minor updates 3.5 Old version, no longer supported: 1.8.2 June 22, 2009 1.8.1 + minor updates 3.6 Old version, no longer supported: 1.8.5 July 27, 2010 1.8.2 + new features for ECMA-262 5th edition compliance 4.0 Related languages and features[edit] JSON, or JavaScript Object Notation, is a general-purpose data interchange format that is defined as a subset of JavaScript's object literal syntax. Like much of JavaScript (regexps and anonymous functions as 1st class elements, closures, flexible classes, 'use strict'), JSON, except for replacing Perl's key-value operator '=>' by an RFC 822[105] inspired ':', is syntactically pure Perl. jQuery is a popular JavaScript library designed to simplify DOM-oriented client-side HTML scripting along with offering cross-browser compatibility because various browsers respond differently to certain vanilla JavaScript code. Underscore.js is a utility JavaScript library for data manipulation that is used in both client-side and server-side network applications. Angular and AngularJS are web application frameworks to use for developing single-page applications and also cross-platform mobile apps. React (JavaScript library) is an open-source JavaScript library providing a views that is rendered using components specified as custom HTML tags. Mozilla browsers currently support LiveConnect, a feature that allows JavaScript and Java to intercommunicate on the Web. However, Mozilla-specific support for LiveConnect was scheduled to be phased out in the future in favor of passing on the LiveConnect handling via NPAPI to the Java 1.6+ plug-in (not yet supported on the Mac as of March 2010[update]).[106] Most browser inspection tools, such as Firebug in Firefox, include JavaScript interpreters that can act on the visible page's DOM. asm.js is a subset of JavaScript that can be run in any JavaScript engine or run faster in an ahead-of-time (AOT) compiling engine.[107] JSFuck is an esoteric programming language. Programs are written using only six different characters, but are still valid JavaScript code. p5.js[108] is an object oriented JavaScript library designed for artists and designers. It is based on the ideas of the Processing project but is for the web. jsben.ch is an online JavaScript benchmarking tool, where different code snippets can be tested against each other. CRISP: A Strategy guiding Cloud Application Development for Beginners is a strategy proposed by Ayush Sahu to develop optimized and secure JavaScript application to be used in mobiles, PC's and other devices. CRISP (Conversion, Reformat code, Isolate module, Sandbox, Partition) strategy has been proposed for refined conversion of native application to JavaScript for cloud application development. JavaScript is chosen as medium for writing application because it is mostly used language among developers and provides rich API (Application Programming Interface) for writing applications.[109] Use as an intermediate language[edit] As JavaScript is the most widely supported client-side language that can run within a Web browser, it has become an intermediate language for other languages to target. This has included both newly created languages and ports of existing languages. Some of these include: OberonScript, a full implementation of the Oberon programming language that compiles to high-level JavaScript.[110] Objective-J, a superset of JavaScript that compiles to standard JavaScript. It adds traditional inheritance and Smalltalk\/Objective-C style dynamic dispatch and optional pseudo-static typing to JavaScript. Processing.js, a JavaScript port of the Processing programming language designed to write visualizations, images, and interactive content. It allows Web browsers to display animations, visual applications, games and other graphical rich content without the need for a Java applet or Flash plugin. CoffeeScript, an alternate syntax for JavaScript intended to be more concise and readable. It adds features like array comprehensions (also available in JavaScript since version 1.7)[111] and pattern matching. Like Objective-J, it compiles to JavaScript. Ruby and Python have been cited as influential on CoffeeScript syntax. Google Web Toolkit translates a subset of Java to JavaScript. Scala, an object-oriented and functional programming language, has a Scala-to-JavaScript compiler.[112] Pyjamas, a port of Google Web Toolkit to Python translates a subset of Python to JavaScript. Google Dart, an all purpose opensource language that runs faster than and compiles to JavaScript. Whalesong,[113] a Racket-to-JavaScript compiler. Emscripten, a LLVM-backend for porting native libraries to JavaScript, known as asm.js[114] Fantom a programming language that runs on JVM, .NET and JavaScript. TypeScript, a free and open-source programming language developed by Microsoft. It is a superset of JavaScript, and essentially adds support for optional type annotations and some other language extensions such as classes, interfaces and modules. A TS-script compiles into plain JavaScript and can be executed in any JS host supporting ECMAScript 3 or higher. The compiler is itself written in TypeScript. Haxe, an open-source high-level multiplatform programming language and compiler that can produce applications and source code for many different platforms including JavaScript. ClojureScript,[115] a compiler for Clojure that targets JavaScript. It is designed to emit JavaScript code that is compatible with the advanced compilation mode of the Google Closure optimizing compiler. Kotlin, a statically-typed language that also compiles to Java byte code. SqueakJS, a virtual machine and DOM environment for the open-source Squeak implementation of the Smalltalk programming language. As JavaScript has unusual limitations \u2013 such as no explicit integer type, only double-precision binary floating point \u2013 languages that compile to JavaScript and do not take care to use the integer-converting shift and bitwise logical operators may have slightly different behavior than in other environments. JavaScript and Java[edit] A common misconception is that JavaScript is similar or closely related to Java. It is true that both have a C-like syntax (the C language being their most immediate common ancestor language). They also are both typically sandboxed (when used inside a browser), and JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's Math and Date objects are based on classes from Java 1.0,[116] but the similarities end there. Java and JavaScript both first appeared on 23 May 1995, but Java was developed by James Gosling of Sun Microsystems, and JavaScript by Brendan Eich of NetScape Communications. The differences between the two languages are more prominent than their similarities. Java has static typing, while JavaScript's typing is dynamic. Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java's objects are class-based, while JavaScript's are prototype-based. Finally, Java did not support functional programming until Java 8, while JavaScript has done so from the beginning, being influenced by Scheme. See also[edit] Computer programming portal References[edit] ^ Flanagan 2011, pp.\u00a01\u20132. ^ a b Press release announcing JavaScript, \"Netscape and Sun announce JavaScript\", PR Newswire, December 4, 1995 ^ \"Standard ECMA-262\". Ecma International. 2017-07-03.\u00a0 ^ \"RFC 4329\". Apps.ietf.org. Archived from the original on 2014-03-16. Retrieved 16 February 2016.\u00a0 ^ \"System-Declared Uniform Type Identifiers\". Mac OS X Reference Library. Apple Inc. Retrieved 2010-03-05.\u00a0 ^ \"JavaScript\". Collins English Dictionary \u2013 Complete & Unabridged 2012 Digital Edition. William Collins Sons & Co. 2012. Retrieved 21 August 2015.\u00a0 ^ \"ECMAScript Language Overview\" (PDF). 2007-10-23. p.\u00a04. Retrieved 2009-05-03.\u00a0 ^ Severance, Charles (February 2012). \"JavaScript: Designing a Language in 10 Days\". Computer. IEEE Computer Society. 45 (2): 7\u20138. doi:10.1109\/MC.2012.57. Retrieved 23 March 2013.\u00a0 ^ \"TechVision: Innovators of the Net: Brendan Eich and JavaScript\". web.archive.org. Archived from the original on 2008-02-08.\u00a0 ^ \"The History of Programming Languages\". oreilly.com. O'Reilly Media. 2004. Retrieved 16 July 2016.\u00a0 ^ \"What Is JavaScript?\" (PDF). wiley.com. Wiley. Retrieved 16 July 2016.\u00a0 ^ Noorda, Brent (21 September 2013). \"Brent Noorda's Answers on ECMA\". quora.com. Retrieved 16 July 2016.\u00a0 ^ Noorda, Brent (24 June 2010). \"History of Nombas\". brent-noorda.com. Retrieved 16 July 2016.\u00a0 ^ Eich, Brendan (21 June 2011). \"New JavaScript Engine Module Owner\". brendaneich.com. Retrieved 16 July 2016.\u00a0 ^ Netscape Communications Corporation (11 December 1998). \"Server-Side JavaScript Guide\". oracle.com. Netscape Communications Corporation. Retrieved 2016-07-16.\u00a0 ^ Mahemoff, Michael (17 December 2009). \"Server-Side JavaScript, Back with a Vengeance\". readwrite.com. Retrieved 2016-07-16.\u00a0 ^ a b c Champeon, Steve (6 April 2001). \"JavaScript, How Did We Get Here?\". oreilly.com. Retrieved 16 July 2016.\u00a0 ^ \"Microsoft Internet Explorer 3.0 Beta Now Available\". microsoft.com. Microsoft. 29 May 1996. Retrieved 16 July 2016.\u00a0 ^ McCracken, Harry (16 September 2010). \"The Unwelcome Return of \"Best Viewed with Internet Explorer\"\". technologizer.com. Retrieved 16 July 2016.\u00a0 ^ \"Documentation\". ecmascript.org. Retrieved 16 July 2016.\u00a0 ^ \"Standard ECMA-262\". Ecma International. 2017-07-03.\u00a0 ^ Crockford, Douglas (2001). \"JavaScript, The World's Most Misunderstood Programming Language\". crockford.com. Retrieved 16 July 2016.\u00a0 ^ Kowal, Kris (1 December 2009). \"CommonJS Effort Sets JavaScript on Path for World Domination\". arstechnica.com. Retrieved 16 July 2016.\u00a0 ^ \"USPTO Copyright entry #75026640\". USPTO.\u00a0 ^ \"Sun Trademarks\". Sun Microsystems. Archived from the original on 28 May 2010. Retrieved 2007-11-08.\u00a0 ^ Flanagan 2006, p.\u00a016. ^ \"JavaScript data types and data structures - JavaScript | MDN\". Developer.mozilla.org. 2017-02-16. Retrieved 2017-02-24.\u00a0 ^ Flanagan 2006, pp.\u00a0176\u2013178. ^ \"Inheritance and the prototype chain\". Mozilla Developer Network. Mozilla. Retrieved 6 April 2013.\u00a0 ^ Herman, David (2013). Effective JavaScript. Addison-Wesley. p.\u00a083. ISBN\u00a0978-0-321-81218-6.\u00a0 ^ Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp.\u00a095\u201397. ISBN\u00a0978-1-59327-282-1.\u00a0 ^ Katz, Yehuda. \"Understanding \"Prototypes\" in JavaScript\". Retrieved 6 April 2013.\u00a0 ^ Herman, David (2013). Effective JavaScript. Addison-Wesley. pp.\u00a0125\u2013127. ISBN\u00a0978-0-321-81218-6.\u00a0 ^ \"Properties of the Function Object\". Es5.github.com. Retrieved 2013-05-26.\u00a0 ^ Flanagan 2006, p.\u00a0141. ^ The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins, Peterseliger.blogpsot.de, April 11, 2014. ^ Traits for JavaScript, 2010. ^ \"Home | CocktailJS\". Cocktailjs.github.io. Retrieved 2017-02-24.\u00a0 ^ Angus Croll, A fresh look at JavaScript Mixins, published May 31, 2011. ^ \"Concurrency model and Event Loop\". Mozilla Developer Network. Retrieved 2015-08-28.\u00a0 ^ Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp.\u00a0139\u2013149. ISBN\u00a0978-1-59327-282-1.\u00a0 ^ Robert Nyman, Getters And Setters With JavaScript \u2013 Code Samples And Demos, Robertnyman.com, published 29 May 2009, accessed 2 January 2010. ^ John Resig, JavaScript Getters and Setters, Ejohn.org, 18 July 2007, accessed 2 January 2010 ^ \"E4X \u2013 Archive of obsolete content | MDN\". Mozilla Developer Network. Mozilla Foundation. Feb 14, 2014. Retrieved 13 July 2014.\u00a0 ^ \"var \u2013 JavaScript \u2013 MDN\". The Mozilla Developer Network. Retrieved 22 December 2012.\u00a0 ^ \"ECMAScript Language Specification \u2013 ECMA-262 Edition 5.1\". Ecma International. Retrieved 22 December 2012.\u00a0 ^ \"console\". Mozilla Developer Network. Mozilla. Retrieved 6 April 2013.\u00a0 ^ \"arguments\". Mozilla Developer Network. Mozilla. Retrieved 6 April 2013.\u00a0 ^ https:\/\/w3techs.com\/technologies\/details\/cp-javascript\/all\/all ^ \"JavaScript tracking \u2013 Piwik\". Piwik. Retrieved 31 March 2012.\u00a0 ^ Hamilton, Naomi (2008-07-31). \"The A-Z of Programming Languages: JavaScript\". computerworld.com.au.\u00a0 ^ \"Javascript - Object detection\". Quirksmode.org. Retrieved 2017-02-24.\u00a0 ^ Peter-Paul Koch, Mission Impossible \u2013 mouse position ^ \"JavaScript - Browser detect\". Quirksmode.org. Retrieved 2017-02-24.\u00a0 ^ \"Making JavaScript Safe for Advertising\". ADsafe. Retrieved 2013-05-26.\u00a0 ^ \"Secure ECMA Script (SES)\". Code.google.com. Retrieved 2013-05-26.\u00a0 ^ \"Mozilla Cross-Site Scripting Vulnerability Reported and Fixed - MozillaZine Talkback\". Mozillazine.org. Retrieved 2017-02-24.\u00a0 ^ \"Right-click \"protection\"? Forget about it\". 2008-06-17. ISSN\u00a01797-1993. Retrieved 2008-06-17.\u00a0 ^ a b \"Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web\" (PDF). 2016-12-21. Retrieved 2017-02-22.\u00a0 ^ Quartz, How one programmer broke the internet by deleting a tiny piece of code ^ SC Magazine UK, Developer's 11 lines of deleted code 'breaks the internet' ^ Mozilla Corporation, Buffer overflow in crypto.signText() ^ Festa, Paul (August 19, 1998). \"Buffer-overflow bug in IE\". CNET. Archived from the original on December 25, 2002.\u00a0 ^ SecurityTracker.com, Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files ^ SecurityFocus, Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability ^ Fusion Authority, Macromedia Flash ActiveX Buffer Overflow ^ \"Protected Mode in Vista IE7 \u2013 IEBlog\". Blogs.msdn.com. 2006-02-09. Retrieved 2017-02-24.\u00a0 ^ US CERT, Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame ^ Mozilla Foundation, Mozilla Foundation Security Advisory 2005\u201341: Privilege escalation via DOM property overrides ^ Microsoft Corporation, Changes to Functionality in Microsoft Windows XP Service Pack 2: Part 5: Enhanced Browsing Security ^ For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, JS.Seeker.K ^ AnC VUSec, 2017 ^ New ASLR-busting JavaScript is about to make drive-by exploits much nastier Ars Technica, 2017 ^ \"JavaScript for Acrobat\". Retrieved 2009-08-18.\u00a0 ^ \"Logic Pro X\". Apple. Apple, Inc. Retrieved January 31, 2017.\u00a0 ^ \"Unity Scripting\". unity3d.com. Retrieved 2013-01-29.\u00a0 ^ \"Technical Specification\". dxstudio.com. Retrieved 2009-10-20.\u00a0 ^ THINK! The Maxwell Render Resourcer Center, Scripting References ^ Google Apps Script, Google Apps Script ^ \"ChatZilla! Frequently Asked Questions \u2013 4.5. How do I write scripts?\". Chatzilla.hacksrus.com. Retrieved 11 February 2011.\u00a0 ^ \"Xcdscript\". Archived from the original on 1 May 2011. Retrieved 11 February 2011.\u00a0 ^ \"RPG Maker MV | RPG Maker | Make Your Own Games!\". Retrieved 28 August 2015.\u00a0 ^ \"Version Information (JavaScript)\". Msdn.microsoft.com. Retrieved 2013-05-26.\u00a0 ^ \"javax.script release notes\". Java.sun.com. Retrieved 2009-05-19.\u00a0 ^ Flanagan 2006, pp.\u00a0214 et seq. ^ Nokia Corporation, QtScript Module ^ \"NW.js\". Nwjs.io. Retrieved 2017-02-24.\u00a0 ^ \"Behind the Scenes with Owen Taylor\". The GNOME Journal. Archived from the original on 2012-12-21. Retrieved 2010-01-23.\u00a0 ^ \"Answering the question: \"How do I develop an app for GNOME?\"\".\u00a0 ^ [1] ^ \"Enyo JavaScript Application Framework\". Enyojs.com. Retrieved 2017-02-24.\u00a0 ^ [2] ^ \"Advanced Debugging With JavaScript\". alistapart.com. 2009-02-03. Retrieved 2010-05-28.\u00a0 ^ \"The JavaScript Debugging Console\". javascript.about.com. 2010-05-28. Retrieved 2010-05-28.\u00a0 ^ \"SplineTech JavaScript Debugger \u2013 an independent standalone JavaScript Debugger\". javascript-debugger.com. 2013-08-26. Retrieved 2013-08-26.\u00a0 ^ \"Debugging with Node Inspector\". docs.strongloop.com. Retrieved 2014-05-07.\u00a0 ^ JScript development in Microsoft Office 11 (MS InfoPath 2003) ^ \"Introducing Drosera \u2013 Surfin' Safari\". Webkit.org. 2006-06-28. Retrieved 2009-05-19.\u00a0 ^ \"Opera DragonFly\". Opera Software.\u00a0 ^ \"Khan Academy Computer Science\". Retrieved 28 Sep 2012.\u00a0 ^ \"New in JavaScript\". developer.mozilla.org. 2014. Retrieved 2016-07-16.\u00a0 ^ \"JavaScript \u2013 JScript \u2013 ECMAScript version history\". Webmasterworld.com. Retrieved 2009-12-17.\u00a0 ^ John Resig. \"Versions of JavaScript\". Ejohn.org. Retrieved 2009-05-19.\u00a0 ^ \"What Version of Javascript\". Javascript.about.com. 2016-02-22. Retrieved 2017-02-24.\u00a0 ^ \"RFC 822 - STANDARD FOR THE FORMAT OF ARPA INTERNET TEXT MESSAGES\". Tools.ietf.org. 1982-08-13. Retrieved 2017-02-24.\u00a0 ^ Release Notes for the Next-Generation Java\u2122 Plug-In Technology (introduced in Java SE 6 update 10). Java.sun.com. Retrieved on 2013-06-13. ^ \"frequently asked questions\". asm.js. Retrieved 2014-04-13.\u00a0 ^ \"Home\". p5.js. 2017-01-21. Retrieved 2017-02-24.\u00a0 ^ \"Home\". dspace.thapar.edu:8080. 2016-08-26. Retrieved 2016-08-26.\u00a0 ^ Ralph Sommerer. \"Oberon Script. A Lightweight Compiler and Runtime System for the Web\". research.microsoft.com. Retrieved 2015-12-18.\u00a0 ^ \"New in JavaScript 1.7\". Developer.mozilla.org. 2012-12-05. Retrieved 2013-05-26.\u00a0 ^ S\u00e9bastien Doeraene. \"Scala.js\". Lampwww.epfl.ch. Retrieved 2014-04-13.\u00a0 ^ \"Whalesong: a Racket to JavaScript compiler\". Hashcollision.org. Retrieved 2014-04-13.\u00a0 ^ Walton, Zach (2012-04-04). \"Easily Port C++ To HTML5\/JavaScript With Emscripten\". WebProNews. iEntry Network.\u00a0 ^ \"clojure\/clojurescript \u00b7 GitHub\". Github.com. Retrieved 2014-04-13.\u00a0 ^ Brendan Eich (3 April 2008). \"Popularity\". Retrieved 2012-01-19.\u00a0 Further reading[edit] Bhangal, Sham; Jankowski, Tomasz (2003). Foundation Web Design: Essential HTML, JavaScript, CSS, PhotoShop, Fireworks, and Flash. APress L. P. ISBN\u00a01-59059-152-6.\u00a0 Burns, Joe; Growney, Andree S. (2001). JavaScript Goodies. Pearson Education. ISBN\u00a00-7897-2612-2.\u00a0 Duffy, Scott (2003). How to do Everything with JavaScript. Osborne. ISBN\u00a00-07-222887-3.\u00a0 Flanagan, David (2006). JavaScript: The Definitive Guide (5th ed.). O'Reilly & Associates. ISBN\u00a00-596-10199-6.\u00a0 Flanagan, David (2011). JavaScript: The Definitive Guide (6th ed.). O'Reilly & Associates. ISBN\u00a0978-0-596-80552-4.\u00a0 Goodman, Danny; Eich, Brendan (2001). JavaScript Bible. John Wiley & Sons. ISBN\u00a00-7645-3342-8.\u00a0 Goodman, Danny; Markel, Scott (2003). JavaScript and DHTML Cookbook. O'Reilly & Associates. ISBN\u00a00-596-00467-2.\u00a0 Harris, Andy (2001). JavaScript Programming for the Absolute Beginner. Premier Press. ISBN\u00a00-7615-3410-5.\u00a0 Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. ISBN\u00a0978-1-59327-282-1.\u00a0 Heinle, Nick; Koman, Richard (1997). Designing with JavaScript. O'Reilly & Associates. ISBN\u00a01-56592-300-6.\u00a0 Husted, Robert; Kuslich, JJ (1999). Server-Side JavaScript: Developing Integrated Web Applications (1st ed.). Addison-Wesley. ISBN\u00a00-201-43329-X.\u00a0 McDuffie, Tina Spain (2003). JavaScript Concepts & Techniques: Programming Interactive Web Sites. Franklin, Beedle & Associates. ISBN\u00a01-887902-69-4.\u00a0 McFarlane, Nigel (2003). Rapid Application Development with Mozilla. Prentice Hall Professional Technical References. ISBN\u00a00-13-142343-6.\u00a0 Powell, Thomas A.; Schneider, Fritz (2001). JavaScript: The Complete Reference. McGraw-Hill Companies. ISBN\u00a00-07-219127-9.\u00a0 Shelly, Gary B.; Cashman, Thomas J.; Dorin, William J.; Quasney, Jeffrey J. (2000). JavaScript: Complete Concepts and Techniques. Cambridge: Course Technology. ISBN\u00a00-7895-6233-2.\u00a0 Vander Veer, Emily A. (2004). JavaScript For Dummies (4th ed.). Wiley Pub. ISBN\u00a00-7645-7659-3.\u00a0 Watt, Andrew H.; Watt, Jonathan A.; Simon, Jinjer L. (2002). Teach Yourself JavaScript in 21 Days. Pearson Education. ISBN\u00a00-672-32297-8.\u00a0 Zakas, Nicholas C. (2012). Professional JavaScript for Web Developers (3rd ed.). Wrox. ISBN\u00a0978-1-118-02669-4.\u00a0 External links[edit] Find more aboutJavaScriptat Wikipedia's sister projects Definitions from Wiktionary Media from Commons Textbooks from Wikibooks Learning resources from Wikiversity Documentation from MediaWiki Listen to this article (info\/dl) This audio file was created from a revision of the \"JavaScript\" article dated 2013-08-20, and does not reflect subsequent edits to the article. (Audio help) More spoken articles Douglas Crockford's video lectures on JavaScript Douglas Crockford's A Survey of the JavaScript Programming Language JavaScript at DMOZ List of languages that compile to JS v t e JavaScript Code analysis JSHint JSLint Transcompilers CoffeeScript Dart Emscripten Google Closure Compiler Google Web Toolkit Morfik TypeScript AtScript Opa Haxe ClojureScript Concepts Ajax Client-side Dynamic HTML JavaScript library JavaScript syntax Unobtrusive JavaScript Debuggers Firebug Komodo IDE Microsoft Script Debugger Microsoft Script Editor Opera Dragonfly Venkman Web Inspector Doc generators JSDoc Editors (comparison) Ace Cloud9 IDE Atom CodeMirror Light Table Brackets Koding Orion Visual Studio Visual Studio Express Visual Studio Code Visual Studio Team Services Engines Comparison of layout engines List of ECMAScript engines List of JavaScript engines Frameworks Comparison of JavaScript frameworks List of JavaScript libraries Related technologies Cascading Style Sheets Document Object Model HTML JSON WebAssembly Package managers npm NuGet Server-side Active Server Pages CommonJS JSGI Node.js Wakanda Unit testing Jasmine Mocha QUnit List of JavaScript unit testing frameworks People Douglas Crockford Brendan Eich John Resig v t e Programming languages Comparison Timeline History Assembly BASIC C C++ C# COBOL Fortran Go Haskell Java JavaScript (JS) Lisp Lua Objective-C Pascal Perl PHP Python Ruby Shell Smalltalk Swift Visual Basic .NET (VB.NET) more... Category Comparison Lists Alphabetical Categorical Generational Non-English-based v t e ECMAScript Dialects ActionScript Caja JavaScript engines asm.js JScript JScript .NET QtScript TypeScript WMLScript Engines (comparison) Carakan Futhark InScript JavaScriptCore JScript KJS Linear B Narcissus QtScript Rhino SpiderMonkey TraceMonkey J\u00e4gerMonkey Tamarin V8 ChakraCore Chakra JScript .NET Nashorn Frameworks Client-side Ample SDK Chaplin.js Dojo Echo Ext JS Google Web Toolkit jQuery Lively Kernel midori MochiKit MooTools Prototype Pyjs qooxdoo Rialto Rico script.aculo.us SmartClient SproutCore Spry Wakanda Framework YUI Library Server-side AppJet Jaxer Node.js WakandaDB Multiple Cappuccino Objective-J PureMVC Libraries Backbone.js SWFObject SWFAddress Underscore.js People Brendan Eich Douglas Crockford John Resig Scott Isaacs Other DHTML Ecma International JSDoc JSGI JSHint JSLint JSON JSSS Sputnik SunSpider Asynchronous module definition CommonJS Lists JavaScript libraries Ajax frameworks Comparisons JavaScript frameworks server-side JavaScript v t e Web browsers Comparison lightweight History List for Unix Timeline Usage share Features Ad filtering Augmented browsing Bookmarks Bookmarklet Live bookmark Smart Bookmarks Browser extension Browser security Browser synchronizer comparison Cookies Download manager Favicon Incremental search Plug-in Privacy mode Tabs Universal Edit Button Web standards Acid tests Cascading Style Sheets HTML HTML5 JavaScript MathML OCSP SVG WebGL XHTML Related topics BrowserChoice.eu CRL HTTP HTTPS iLoo Internet suite Man-in-the-browser Mobile Web Offline reader PAC Pwn2Own Rich Internet application Site-specific browser SPDY SSL\/TLS WebSocket Widget World Wide Web WPAD XML Desktop Blink-based Chromium Brave Chrome Dragon Opera Sleipnir Slimjet SRWare Iron UC Browser Vivaldi Yandex Browser Sputnik SafeZone QupZilla Gecko-based AT&T Pogo Avant Camino Firefox Conkeror GNU IceCat IceDragon Swiftfox Swiftweasel TenFourFox Timberwolf Tor Browser Waterfox xB Browser Galeon Ghostzilla K-Meleon Kazehakase Kirix Strata Lotus Symphony Lunascape Mozilla Beonex Communicator Classilla Netscape SeaMonkey Trident-based AOL Explorer Avant Deepnet Explorer GreenBrowser Internet Explorer Lunascape Maxthon MediaBrowser MenuBox NeoPlanet NetCaptor SlimBrowser SpaceTime UltraBrowser WebbIE ZAC Browser WebKit-based Arora Avant Dooble Epic Flock Fluid iCab Konqueror Lunascape Maxthon Midori OmniWeb Origyn Web Browser Otter Browser QtWeb rekonq Safari Shiira SlimBoat surf Torch Uzbl Epiphany WebPositive xombrero Text-based ELinks Emacs\/W3 Line Mode Browser Links Lynx w3m Other abaco Amaya Arachne Arena Charon Dillo eww Gazelle HotJava IBM Home Page Reader IBrowse KidZui Microsoft Edge Mosaic Mothra NetPositive NetSurf Pale Moon Qihoo 360 Secure Browser Mobile Blink-based Android Browser Chromium Brave Chrome Opera Mobile Silk Gecko-based Firefox for Android MicroB Minimo Presto-based Opera Mini Trident-based Maxthon WebKit-based BOLT Dolphin Browser Firefox for iOS Maxthon Mercury Browser Nokia Browser for Symbian Rockmelt Safari Steel Other Blazer CM Browser Deepfish ibisBrowser Internet Explorer Mobile Iris Browser Konqueror Embedded Microsoft Edge NetFront Nokia Xpress Skweezer Skyfire Teashark ThunderHawk UC Browser Vision WinWAP Television and video game console Gecko-based Kylo Presto-based Internet Channel WebKit-based Google TV Nintendo 3DS Internet Browser Nintendo DS & DSi Browser NetFront Steam Overlay Wii U Internet Browser Other MSN TV Software no longer in development shown in italics Category Commons Internet portal Software portal v t e Node.js Platform Node.js NPM V8 CommonJS Frameworks MEAN MongoDB Express.js AngularJS\/Angular MEEN (substituted with Ember.js) Backbone.js Meteor Libraries Lodash Underscore.js React.js Languages JavaScript CoffeeScript TypeScript Hosts Joyent Nodejitsu OpenShift Linode DigitalOcean Authority control LCCN: sh96004880 GND: 4420180-1 SUDOC: 034781870 BNF: cb12549978q (data) BNE: XX542465 Retrieved from \"https:\/\/en.wikipedia.org\/w\/index.php?title=JavaScript&oldid=790920619\" Categories: JavaScript1995 introductionsAmerican inventionsCross-platform softwareDynamically typed programming languagesFunctional languagesObject-based programming languagesProgramming languages created in 1995Programming languages with an ISO standardPrototype-based programming languagesScripting languagesWeb programmingHidden categories: All articles with failed verificationArticles with failed verification from March 2017All articles with unsourced statementsArticles with unsourced statements from March 2016Articles with unsourced statements from November 2016Articles containing potentially dated statements from March 2010All articles containing potentially dated statementsSpoken articlesArticles with hAudio microformatsArticles with DMOZ linksWikipedia articles with LCCN identifiersWikipedia articles with GND identifiersWikipedia articles with BNF identifiersArticles with example JavaScript code Navigation menu Personal tools Not logged inTalkContributionsCreate accountLog in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store Interaction HelpAbout WikipediaCommunity portalRecent changesContact page Tools What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page Print\/export Create a bookDownload as PDFPrintable version In other projects Wikimedia CommonsWikibooksWikiversity Languages Afrikaans\u0627\u0644\u0639\u0631\u0628\u064a\u0629Az\u0259rbaycanca\u09ac\u09be\u0982\u09b2\u09beB\u00e2n-l\u00e2m-g\u00fa\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430)\u200e\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438Catal\u00e0\u0427\u04d1\u0432\u0430\u0448\u043b\u0430\u010ce\u0161tinaDanskDeutschEesti\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03acEspa\u00f1olEsperantoEuskara\u0641\u0627\u0631\u0633\u06ccFran\u00e7aisGalego\u5ba2\u5bb6\u8a9e\/Hak-k\u00e2-ng\u00ee\ud55c\uad6d\uc5b4\u0540\u0561\u0575\u0565\u0580\u0565\u0576\u0939\u093f\u0928\u094d\u0926\u0940HrvatskiBahasa IndonesiaInterlingua\u00cdslenskaItaliano\u05e2\u05d1\u05e8\u05d9\u05eaBasa Jawa\u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8\u049a\u0430\u0437\u0430\u049b\u0448\u0430\u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430Latvie\u0161uLietuvi\u0173LumbaartMagyar\u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02\u092e\u0930\u093e\u0920\u0940\u0645\u0627\u0632\u0650\u0631\u0648\u0646\u06ccBahasa MelayuM\u00ecng-d\u0115\u0324ng-ng\u1e73\u0304\u041c\u043e\u043d\u0433\u043e\u043b\u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102cNederlands\u0928\u0947\u092a\u093e\u0932\u0940\u65e5\u672c\u8a9eNorsk bokm\u00e5l\u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179aPolskiPortugu\u00easRom\u00e2n\u0103\u0420\u0443\u0441\u0441\u043a\u0438\u0439\u0421\u0430\u0445\u0430 \u0442\u044b\u043b\u0430ScotsShqip\u0dc3\u0dd2\u0d82\u0dc4\u0dbdSimple EnglishSloven\u010dinaSloven\u0161\u010dina\u0421\u0440\u043f\u0441\u043a\u0438 \/ srpskiSrpskohrvatski \/ \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438SuomiSvenskaTagalog\u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u0422\u0430\u0442\u0430\u0440\u0447\u0430\/tatar\u00e7a\u0c24\u0c46\u0c32\u0c41\u0c17\u0c41Tetun\u0e44\u0e17\u0e22\u0422\u043e\u04b7\u0438\u043a\u04e3T\u00fcrk\u00e7eT\u00fcrkmen\u00e7e\u1a05\u1a14 \u1a15\u1a18\u1a01\u1a17\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u0627\u0631\u062f\u0648Ti\u1ebfng Vi\u1ec7t\u7cb5\u8a9e\u017demait\u0117\u0161ka\u4e2d\u6587 Edit links This page was last edited on 16 July 2017, at 23:57. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view (window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"1.668\",\"walltime\":\"1.909\",\"ppvisitednodes\":{\"value\":7841,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":0,\"limit\":1500000},\"postexpandincludesize\":{\"value\":325952,\"limit\":2097152},\"templateargumentsize\":{\"value\":18195,\"limit\":2097152},\"expansiondepth\":{\"value\":24,\"limit\":40},\"expensivefunctioncount\":{\"value\":6,\"limit\":500},\"entityaccesscount\":{\"value\":1,\"limit\":400},\"timingprofile\":[\"100.00% 1546.530 1 -total\",\" 42.58% 658.563 1 Template:Reflist\",\" 31.26% 483.468 77 Template:Cite_web\",\" 11.49% 177.652 3 Template:Infobox\",\" 9.56% 147.877 22 Template:Cite_book\",\" 8.56% 132.380 1 Template:Infobox_programming_language\",\" 4.45% 68.806 1 Template:Web_browsers\",\" 4.22% 65.245 1 Template:Navbox_with_collapsible_groups\",\" 3.73% 57.681 2 Template:Start_date_and_age\",\" 3.70% 57.168 1 Template:Spoken_Wikipedia\"]},\"scribunto\":{\"limitreport-timeusage\":{\"value\":\"0.803\",\"limit\":\"10.000\"},\"limitreport-memusage\":{\"value\":7540959,\"limit\":52428800}},\"cachereport\":{\"origin\":\"mw1301\",\"timestamp\":\"20170716235744\",\"ttl\":86400,\"transientcontent\":true}}});});(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgBackendResponseTime\":69,\"wgHostname\":\"mw1254\"});});","tags":"","url":"https:\/\/en.wikipedia.org\/wiki\/JavaScript"},{"title":"jQuery - Wikipedia","text":"jQuery From Wikipedia, the free encyclopedia Jump to: navigation, search This article relies too much on references to primary sources. Please improve this by adding secondary or tertiary sources. (August 2016) (Learn how and when to remove this template message) jQuery Original author(s) John Resig Developer(s) jQuery Team Initial release August\u00a026, 2006; 10 years ago\u00a0(2006-08-26) Stable release 2.2.4 (May\u00a020, 2016; 13 months ago\u00a0(2016-05-20)) 3.2.1 (March\u00a020, 2017; 3 months ago\u00a0(2017-03-20))[1] Repository github.com\/jquery\/jquery Development status Active Written in JavaScript Platform See Browser support Size ver gzip prod dev 1.x 31kb 90.9kb 266kb 2.x 27.7kb 81.6kb 236kb 3.x 29.9kb 86.3kb 263kb (KB) Type JavaScript library License MIT license[2] Website jquery.com jQuery is a cross-platform JavaScript library designed to simplify the client-side scripting of HTML.[3] It is free, open-source software using the permissive MIT license.[2] Web analysis indicates that it is the most widely deployed JavaScript library by a large margin.[4][5] jQuery's syntax is designed to make it easier to navigate a document, select DOM elements, create animations, handle events, and develop Ajax applications. jQuery also provides capabilities for developers to create plug-ins on top of the JavaScript library. This enables developers to create abstractions for low-level interaction and animation, advanced effects and high-level, themeable widgets. The modular approach to the jQuery library allows the creation of powerful dynamic web pages and Web applications. The set of jQuery core features\u2014DOM element selections, traversal and manipulation\u2014enabled by its selector engine (named \"Sizzle\" from v1.3), created a new \"programming style\", fusing algorithms and DOM data structures. This style influenced the architecture of other JavaScript frameworks like YUI v3 and Dojo, later stimulating the creation of the standard Selectors API.[6] Microsoft and Nokia bundle jQuery on their platforms.[7] Microsoft includes it with Visual Studio[8] for use within Microsoft's ASP.NET AJAX and ASP.NET MVC frameworks while Nokia has integrated it into the Web Run-Time widget development platform.[9] Contents 1 Overview 2 History 3 Features 3.1 Browser support 4 Usage 4.1 Including the library 4.2 Usage styles 4.3 No-conflict mode 4.4 Typical start-point 4.5 Chaining 4.6 Creating new DOM elements 4.7 Utility functions 4.8 Ajax 4.8.1 Asynchronous 5 jQuery plug-ins 6 Release history 7 Testing framework 8 See also 9 References 10 Further reading 11 External links Overview[edit] jQuery, at its core, is a Document Object Model (DOM) manipulation library. The DOM is a tree-structure representation of all the elements of a Web page. jQuery simplifies the syntax for finding, selecting, and manipulating these DOM elements. For example, jQuery can be used for finding an element in the document with a certain property (e.g. all elements with an h1 tag), changing one or more of its attributes (e.g. color, visibility), or making it respond to an event (e.g. a mouse click). jQuery also provides a paradigm for event handling that goes beyond basic DOM element selection and manipulation. The event assignment and the event callback function definition are done in a single step in a single location in the code. jQuery also aims to incorporate other highly used JavaScript functionality (e.g. fade ins and fade outs when hiding elements, animations by manipulating CSS properties). The principles of developing with jQuery are: Separation of JavaScript and HTML: The jQuery library provides simple syntax for adding event handlers to the DOM using JavaScript, rather than adding HTML event attributes to call JavaScript functions. Thus, it encourages developers to completely separate JavaScript code from HTML markup. Brevity and clarity: jQuery promotes brevity and clarity with features like chainable functions and shorthand function names. Elimination of cross-browser incompatibilities: The JavaScript engines of different browsers differ slightly so JavaScript code that works for one browser may not work for another. Like other JavaScript toolkits, jQuery handles all these cross-browser inconsistencies and provides a consistent interface that works across different browsers. Extensibility: New events, elements, and methods can be easily added and then reused as a plugin. History[edit] jQuery was originally released in January 2006 at BarCamp NYC by John Resig and was influenced by Dean Edwards' earlier cssQuery library.[10][11] It is currently maintained by a team of developers led by Timmy Willison (with the jQuery selector engine, Sizzle, being led by Richard Gibson). jQuery also has an interesting software license history.[12] Originally licensed under the CC BY-SA 2.5, it was relicensed to the MIT license in 2006.[13] At the end of 2006, it was dual-licensed under GPL and MIT licenses.[14] As this led to some confusion, in 2012 the GPL was dropped and is now only licensed under the MIT license.[15] Features[edit] jQuery includes the following features: DOM element selections using the multi-browser open source selector engine Sizzle, a spin-off of the jQuery project[16] DOM manipulation based on CSS selectors that uses elements' names and attributes, such as id and class, as criteria to select nodes in the DOM Events Effects and animations Ajax Deferred and Promise objects to control asynchronous processing JSON parsing Extensibility through plug-ins Utilities, such as feature detection Compatibility methods that are natively available in modern browsers, but need fall backs for older ones, such as inArray() and each() Multi-browser (not to be confused with cross-browser) support Browser support[edit] Both versions 1.x and 2.x of jQuery support \"current-1 versions\" (meaning the current stable version of the browser and the version that preceded it) of Firefox, Chrome, Safari, and Opera. Version 1.x also supports Internet Explorer 6 or higher. However, jQuery version 2.x dropped Internet Explorer 6\u20138 support and supports only IE 9 and later versions.[17] Usage[edit] Including the library[edit] The jQuery library is a single JavaScript file containing all of its common DOM, event, effects, and Ajax functions. It can be included within a Web page by linking to a local copy or to one of the many copies available from public servers. jQuery has a content delivery network (CDN) hosted by MaxCDN.[18] Google[19] and Microsoft[20] host it as well. It is also possible to include jQuery directly from a CDN: Usage styles[edit] jQuery has two usage styles: Via the $ function, which is a factory method for the jQuery object. These functions, often called commands, are chainable as they all return jQuery objects. Via $.-prefixed functions. These are utility functions, which do not act upon the jQuery object directly. Access to and manipulation of multiple DOM nodes in jQuery typically begins with calling the $ function with a CSS selector string. This returns a jQuery object referencing all the matching elements in the HTML page. $(\"div.test\"), for example, returns a jQuery object with all the div elements of class test. This node set can be manipulated by calling methods on the returned jQuery object or on the nodes themselves. No-conflict mode[edit] jQuery also includes .noConflict() mode, which relinquishes control of $. This is helpful if jQuery is used with other libraries that also use $ as an identifier. In no-conflict mode, developers can use jQuery as a replacement for $ without losing functionality.[21] Typical start-point[edit] Typically, jQuery is used by putting initialization code and event handling functions in $(handler). This is triggered when the browser has constructed the DOM and sends a load event. $(function () { \/\/ This anonymous function is the first function to be called when the page loads. \/\/ jQuery code, event handling callbacks here }); or $(fn); \/\/ The function named fn, defined elsewhere, is the first function to be called when the page loads. or we can also use $(document).ready(function(){ \/\/ This is the first function to be called when the page loads. \/\/ jQuery code, event handling callbacks here }); Historically, $(document).ready(callback) has been the de facto signature for running code when the DOM is ready. However, since jQuery 3.0, developers are encouraged to use the much shorter $(handler) signature.[22] Callback functions for event handling on elements that aren't loaded yet can be registered inside .ready() as anonymous functions. These event handlers will only be called when the event is triggered. For example, the following code adds an event handler for a mouse click on an img image element. $(function () { $('img').on('click', function () { \/\/ handle the click event on any img element in the page }); }); The following syntaxes are equivalent, although only $(handler) should be used:[22] $(handler) $().ready(handler) $(document).ready(handler) $(\"selector\").ready(handler) Chaining[edit] jQuery commands typically return a jQuery object, so commands can be chained: $('div.test') .add('p.quote') .addClass('blue') .slideDown('slow'); This line finds the union of all div tags with class attribute test and all p tags with class attribute quote, adds the class attribute blue to each matched element, and then increases their height with an animation. The $ and add functions affect the matched set, while the addClass and slideDown affect the referenced nodes. Certain jQuery functions return specific values (such as $('#input-user-email').val()). In these cases, chaining will not work as the value does not reference the jQuery object. Creating new DOM elements[edit] Besides accessing DOM nodes through jQuery object hierarchy, it is also possible to create new DOM elements, if a string passed as the argument to $() looks like HTML. For example, this line finds an HTML select element with ID carmakes, and adds an option element with value \"VAG\" and text \"Volkswagen\": $('select#carmakes') .append($('') .attr({value:\"VAG\"}) .append(\"Volkswagen\")); Utility functions[edit] jQuery functions prefixed with $. are utility functions or functions that affect global properties and behaviour. The following example uses the function each(), which iterates through arrays: $.each([1,2,3], function() { console.log(this + 1); }); This writes \"2\", \"3\", \"4\" to the console. Ajax[edit] It is possible to perform cross-browser Ajax requests using $.ajax(). Its associated methods can be used to load and manipulate remote data. $.ajax({ type: 'POST', url: '\/process\/submit.php', data: { name : 'John', location : 'Boston', }, }).done(function(msg) { alert('Data Saved: ' + msg); }).fail(function(xmlHttpRequest, statusText, errorThrown) { alert( 'Your form submission failed.\\n\\n' + 'XML Http Request: ' + JSON.stringify(xmlHttpRequest) + ',\\nStatus Text: ' + statusText + ',\\nError Thrown: ' + errorThrown); }); This example posts the data name=John and location=Boston to \/process\/submit.php on the server. When this request finishes the success function is called to alert the user. If the request fails it will alert the user to the failure, the status of the request, and the specific error. Asynchronous[edit] Note that the above example uses the deferred nature of $.ajax() to handle its asynchronous nature: .done() and .fail() create callbacks that run only when the asynchronous process is complete. jQuery plug-ins[edit] jQuery's architecture allows developers to create plug-in code to extend its function. There are thousands of jQuery plug-ins available on the Web[23] that cover a range of functions, such as Ajax helpers, Web services, datagrids, dynamic lists, XML and XSLT tools, drag and drop, events, cookie handling, and modal windows. An important source of jQuery plug-ins is the plugins subdomain of the jQuery Project website.[23] The plugins in this subdomain, however, were accidentally deleted in December 2011 in an attempt to rid the site of spam.[24] The new site will include a GitHub-hosted repository, which will require developers to resubmit their plugins and to conform to new submission requirements.[25] There are alternative plug-in search engines[26] such as jquer.in that take more specialized approaches, such as listing only plug-ins that meet certain criteria (e.g. those that have a public code repository). jQuery provides a \"Learning Center\" that can help users understand JavaScript and get started developing jQuery plugins.[27] Release history[edit] Version number Release date Latest update Size Prod (KB) Additional notes 1.0 August\u00a026,\u00a02006\u00a0(2006-08-26) First stable release 1.1 January\u00a014,\u00a02007\u00a0(2007-01-14) 1.2 September\u00a010,\u00a02007\u00a0(2007-09-10) 1.3 January\u00a014,\u00a02009\u00a0(2009-01-14) 55.9 Sizzle Selector Engine introduced into core 1.4 January\u00a014,\u00a02010\u00a0(2010-01-14) 1.5 January\u00a031,\u00a02011\u00a0(2011-01-31) Deferred callback management, ajax module rewrite 1.6 May\u00a03,\u00a02011\u00a0(2011-05-03) Significant performance improvements to the attr() and val() functions 1.7 November\u00a03,\u00a02011\u00a0(2011-11-03) 1.7.2 (March\u00a021,\u00a02012\u00a0(2012-03-21)) New Event APIs: .on() and .off(), while the old APIs are still supported. 1.8 August\u00a09,\u00a02012\u00a0(2012-08-09) 1.8.3 (November\u00a013,\u00a02012\u00a0(2012-11-13)) 91.4 Sizzle Selector Engine rewritten, improved animations and $(html, props) flexibility. 1.9 January\u00a015,\u00a02013\u00a0(2013-01-15) 1.9.1 (February\u00a04,\u00a02013\u00a0(2013-02-04)) Removal of deprecated interfaces and code cleanup 1.10 May\u00a024,\u00a02013\u00a0(2013-05-24) 1.10.2 (July\u00a03,\u00a02013\u00a0(2013-07-03)) Incorporated bug fixes and differences reported from both the 1.9 and 2.0 beta cycles 1.11 January\u00a024,\u00a02014\u00a0(2014-01-24) 1.11.3 (April\u00a028,\u00a02015\u00a0(2015-04-28)) 95.9 1.12 January\u00a08,\u00a02016\u00a0(2016-01-08) 1.12.4 (May\u00a020,\u00a02016\u00a0(2016-05-20)) 95 2.0 April\u00a018,\u00a02013\u00a0(2013-04-18) 2.0.3 (July\u00a03,\u00a02013\u00a0(2013-07-03)) 81.1 Dropped IE 6\u20138 support for performance improvements and reduction in filesize 2.1 January\u00a024,\u00a02014\u00a0(2014-01-24) 2.1.4 (April\u00a028,\u00a02015\u00a0(2015-04-28)) 82.4 2.2 January\u00a08,\u00a02016\u00a0(2016-01-08) 2.2.4 (May\u00a020,\u00a02016\u00a0(2016-05-20)) 85.6 3.0[28] June\u00a09,\u00a02016\u00a0(2016-06-09) 3.0.0 (June\u00a09,\u00a02016\u00a0(2016-06-09)) 86.3 Promises\/A+ support for Deferreds, $.ajax and $.when, .data() HTML5-compatible 3.1 July\u00a07,\u00a02016\u00a0(2016-07-07) 3.1.1 (September\u00a023,\u00a02016\u00a0(2016-09-23)) 86.3 jQuery.readyException added, ready handler errors are now not silenced 3.2 March\u00a016,\u00a02017\u00a0(2017-03-16) 3.2.1 (March\u00a020,\u00a02017\u00a0(2017-03-20)) 84.6 Testing framework[edit] QUnit is a test automation framework used to test the jQuery project. The jQuery team developed it as an in-house unit testing library.[29] The jQuery team uses it to test its code and plugins, but it can test any generic JavaScript code, including server-side JavaScript code.[29] As of 2011, the jQuery Testing Team uses QUnit with TestSwarm to test each jQuery codebase release.[30] See also[edit] Free software portal Comparison of JavaScript frameworks jQuery Mobile jQuery UI Globalize References[edit] ^ jquery.org, jQuery Foundation-. \"jQuery 3.2.1 Released! - Official jQuery Blog\".\u00a0 ^ a b \"jQuery Project License\". jQuery Foundation. Retrieved 2017-03-11.\u00a0 ^ \"jQuery: The write less, do more, JavaScript library\". The jQuery Project. Retrieved 29 April 2010.\u00a0 ^ \"Usage of JavaScript libraries for websites\". Retrieved 2017-02-11.\u00a0 ^ \"Libscore\". Retrieved 2017-02-11.\u00a0 ^ \"Selectors API Level 1, W3C Recommendation\" (21 February 2013). This standard turned what was jQuery \"helper methods\" into JavaScript-native ones, and the wide use of jQuery stimulated the fast adoption of querySelector\/querySelectorAll into main Web browsers. ^ Resig, John (2008-09-28). \"jQuery, Microsoft, and Nokia\". jQuery Blog. jQuery. Retrieved 2009-01-29.\u00a0 ^ Guthrie, Scott (2008-09-28). \"jQuery and Microsoft\". ScottGu's Blog. Retrieved 2009-01-29.\u00a0 ^ \"Guarana UI: A jQuery Based UI Library for Nokia WRT\". Forum Nokia. Retrieved 2010-03-30.\u00a0 ^ York, Richard (2009). Beginning JavaScript and CSS Development with jQuery. Wiley. p.\u00a028. ISBN\u00a0978-0-470-22779-4.\u00a0 ^ Resig, John (2007-10-31). \"History of jQuery\". Retrieved 2017-01-28.\u00a0 ^ jquery history on softwarefreedom.org ^ jquery-under-the-mit-license on jquery.org (2006) ^ license on jquery.org (archived 2010) ^ jquery-licensing-changes on jquery.org (2012) ^ Resig, John (2009-01-14). \"jQuery 1.3 and the jQuery Foundation\". jQuery Blog. Retrieved 2009-05-04.\u00a0 ^ Browser Support | jQuery ^ jquery.org, jQuery Foundation -. \"jQuery CDN\".\u00a0 ^ \"Google Libraries API - Developer's Guide\". code.google.com. Retrieved March 11, 2012.\u00a0 ^ \"Microsoft Ajax Content Delivery Network\". ASP.net. Microsoft Corporation. Retrieved June 19, 2012.\u00a0 ^ \"jQuery.noConflict() jQuery API Documentation\".\u00a0 ^ a b jquery.org, jQuery Foundation -. \"jQuery Core 3.0 Upgrade Guide - jQuery\".\u00a0 ^ a b \"Plugins\". The jQuery Project. Retrieved 26 August 2010.\u00a0 ^ \"What Is Happening To The jQuery Plugins Site?\". Retrieved 22 April 2015.\u00a0 ^ \"jquery\/plugins.jquery.com\". GitHub. Retrieved 22 April 2015.\u00a0 ^ Kanakiya, Jay. \"jquery plugins\".\u00a0 ^ \"jQuery Learning Center\". jQuery Foundation. Retrieved 2014-07-02.\u00a0 ^ Chesters, James (2016-06-15). \"Long-awaited jQuery 3.0 Brings Slim Build\". infoq.com. Retrieved 2017-01-28.\u00a0 ^ a b \"History\". qunitjs.com. Retrieved 2014-07-02.\u00a0 ^ \"jQuery Testing Team Wiki\".\u00a0 Further reading[edit] John Resig (speaker) (2007-04-13). Advancing JavaScript with Libraries (Part 1) (Yahoo! Video). YUI Theater. Retrieved 2009-05-04.\u00a0 John Resig (speaker) (2007-04-13). Advancing JavaScript with Libraries (Part 2) (Yahoo! Video). YUI Theater. Retrieved 2009-05-04.\u00a0 Krill, Paul (2006-08-31). \"JavaScript, .Net developers aided in separate project\". InfoWorld. Retrieved 2009-05-04.\u00a0 Taft, Darryl K. (2006-08-30). \"jQuery Eases JavaScript, AJAX Development\". eWeek. Retrieved 2009-05-04.\u00a0 External links[edit] Wikimedia Commons has media related to JQuery. Dmitri Gaskin Google Tech Talk, 2008 on YouTube Official website v t e ECMAScript Dialects ActionScript Caja JavaScript engines asm.js JScript JScript .NET QtScript TypeScript WMLScript Engines (comparison) Carakan Futhark InScript JavaScriptCore JScript KJS Linear B Narcissus QtScript Rhino SpiderMonkey TraceMonkey J\u00e4gerMonkey Tamarin V8 ChakraCore Chakra JScript .NET Nashorn Frameworks Client-side Ample SDK Chaplin.js Dojo Echo Ext JS Google Web Toolkit jQuery Lively Kernel midori MochiKit MooTools Prototype Pyjs qooxdoo Rialto Rico script.aculo.us SmartClient SproutCore Spry Wakanda Framework YUI Library Server-side AppJet Jaxer Node.js WakandaDB Multiple Cappuccino Objective-J PureMVC Libraries Backbone.js SWFObject SWFAddress Underscore.js People Brendan Eich Douglas Crockford John Resig Scott Isaacs Other DHTML Ecma International JSDoc JSGI JSHint JSLint JSON JSSS Sputnik SunSpider Asynchronous module definition CommonJS Lists JavaScript libraries Ajax frameworks Comparisons JavaScript frameworks server-side JavaScript v t e Web frameworks Comparison C++ CppCMS Wt CLI ASP.NET Core AJAX Dynamic Data MVC Razor Web Forms DNN BFC MonoRail OpenRasta Umbraco ColdFusion CFWheels ColdBox Platform ColdSpring Fusebox Mach-II Model-Glue Common Lisp Caveman2 CL-HTTP UnCommon Web Weblocks D Vibe.d Haskell Happstack Yesod Snap Java AppFuse Flexive Grails GWT ICEfaces ItsNat JavaServer Faces JHipster Jspx JWt OpenXava Play Reasonable Server Faces Remote Application Platform RIFE Seam Spring Stripes Struts Tapestry Vaadin Vert.x WebWork Wicket WaveMaker ZK JavaScript Ample SDK Angular\/AngularJS Backbone.js Chaplin.js Closure Dojo Toolkit Ember.js Ext JS jQuery Meteor MooTools Node.js OpenUI5 Prototype React Rico script.aculo.us Sencha Touch SproutCore Wakanda Perl Catalyst Dancer Mason Maypole Mojolicious WebGUI PHP CakePHP CodeIgniter Fat-Free FuelPHP Gyroscope Horde Kohana Laravel Lithium Midgard MODX Nette Phalcon PRADO Qcodo Silex SilverStripe Symfony TYPO3 Xaraya XOOPS Yii Zend Framework Python BlueBream CherryPy Django Flask Grok Nevow Pyjs Pylons Pyramid Quixote TACTIC Tornado TurboGears web2py Webware Zope 2 Ruby Camping Merb Padrino Ruby on Rails Sinatra Scala Lift Play Scalatra Smalltalk AIDA\/Web Seaside Other languages Application Express (PL\/SQL) Grails (Groovy) Kepler (Lua) OpenACS (Tcl) Phoenix (Elixir) SproutCore (JavaScript-Ruby) Yaws (Erlang) v t e List of widget toolkits Low-level On AmigaOS Intuition On Classic Mac OS and macOS Unknown\/Native Macintosh Toolbox Object Pascal Carbon CLI Desktop Xamarin.Mac Mobile Xamarin.iOS On Windows Windows API On Unix, under X11 Xlib XCB X Toolkit Intrinsics, Xt, X-Toolkit On BeOS\/Haiku BeOS, ZETA, Haiku On Cross-platform CLI OpenTK C GDK Java JOGL On Android CLI Xamarin.Android High-level On AmigaOS BOOPSI MUI ReAction GUI Zune On Classic Mac OS and macOS Object Pascal Carbon MacApp Objective-C Desktop Cocoa Mobile Cocoa Touch C++ MacZoop PowerPlant On Windows CLI Desktop Windows Forms XAML (Silverlight, WinRT XAML, WPF) XNA Framework Web XAML (Silverlight) Mobile XNA Framework C++ MFC ATL WTL OWL Object Pascal VCL On Unix, under X11 Athena (Xaw) InterViews LessTif Motif OLIT XForms On Android C++ Qt for Android Cross-platform, by language C GTK+ IUP Tk wxC XForms XVT C++ CEGUI CLX FLTK FOX toolkit GLUI Gtkmm JUCE Nana Qt Rogue Wave Views TnFOX Ultimate++ VCF Wt wxWidgets YAAF Objective-C GNUstep CLI Desktop Gtk# Tao (OpenTK, TaoClassic) wx.NET UIML.NET MonoGame Web Moonlight Mobile MonoGame Xamarin.Forms D DFL DlangUI DWT GtkD QtD wxD Flash Apache Flex (MXML) Haskell Gtk2Hs wxHaskell Java Desktop AWT FXML (JavaFX) Qt Jambi Swing SWT wx4j jUIML Web GWT FXML (JavaFX) Mobile LWUIT JavaScript Dojo Toolkit Echo Ext JS Google Closure jQuery UI Qooxdoo YUI Common Lisp CAPI CLIM Common Graphics Ltk McCLIM Lua IUP wxLua Pascal Desktop LCL Mobile LCL Object Pascal Desktop CLX fpGUI IP Pascal LCL Mobile LCL Perl Perl\/Tk PHP PHP-GTK PHP-Qt wxPHP Python PyGObject PyGTK Pyjs PyQt PySide Tkinter wxPython Ruby Shoes QtRuby wxRuby Tcl Tcl\/Tk XML Ample SDK GladeXML Lively Kernel Pyjs Rialto Toolkit XAML XUI XUL Wt shell whiptail dialog Authority control GND: 7681087-2 Retrieved from \"https:\/\/en.wikipedia.org\/w\/index.php?title=JQuery&oldid=791144138\" Categories: 2006 softwareAjax (programming)Free software programmed in JavaScriptJavaScript librariesSoftware using the MIT licenseHidden categories: Articles lacking reliable references from August 2016All articles lacking reliable referencesPages using deprecated image syntaxOfficial website different in Wikidata and WikipediaWikipedia articles with GND identifiers Navigation menu Personal tools Not logged inTalkContributionsCreate accountLog in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store Interaction HelpAbout WikipediaCommunity portalRecent changesContact page Tools What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page Print\/export Create a bookDownload as PDFPrintable version In other projects Wikimedia CommonsMediaWiki Languages Afrikaans\u0627\u0644\u0639\u0631\u0628\u064a\u0629Az\u0259rbaycanca\u09ac\u09be\u0982\u09b2\u09be\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430)\u200e\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438Catal\u00e0\u010ce\u0161tinaDanskDeutsch\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03acEspa\u00f1olEuskara\u0641\u0627\u0631\u0633\u06ccFran\u00e7ais\ud55c\uad6d\uc5b4\u0540\u0561\u0575\u0565\u0580\u0565\u0576Bahasa IndonesiaItaliano\u05e2\u05d1\u05e8\u05d9\u05ea\u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8Latvie\u0161uMagyar\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02\u092e\u0930\u093e\u0920\u0940\u041c\u043e\u043d\u0433\u043e\u043bNederlands\u65e5\u672c\u8a9eNorsk bokm\u00e5l\u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179aPolskiPortugu\u00easRom\u00e2n\u0103\u0420\u0443\u0441\u0441\u043a\u0438\u0439ScotsShqipSimple EnglishSloven\u010dina\u0421\u0440\u043f\u0441\u043a\u0438 \/ srpskiSuomiSvenska\u0ba4\u0bae\u0bbf\u0bb4\u0bcd\u0e44\u0e17\u0e22T\u00fcrk\u00e7e\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u0627\u0631\u062f\u0648Ti\u1ebfng Vi\u1ec7t\u4e2d\u6587 Edit links This page was last edited on 18 July 2017, at 12:12. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view (window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"0.576\",\"walltime\":\"0.698\",\"ppvisitednodes\":{\"value\":12558,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":0,\"limit\":1500000},\"postexpandincludesize\":{\"value\":373132,\"limit\":2097152},\"templateargumentsize\":{\"value\":40181,\"limit\":2097152},\"expansiondepth\":{\"value\":21,\"limit\":40},\"expensivefunctioncount\":{\"value\":3,\"limit\":500},\"entityaccesscount\":{\"value\":1,\"limit\":400},\"timingprofile\":[\"100.00% 570.637 1 -total\",\" 42.18% 240.705 20 Template:Navbox\",\" 25.99% 148.287 16 Template:Navbox_subgroup\",\" 24.31% 138.737 2 Template:Infobox\",\" 23.70% 135.228 1 Template:Infobox_software\",\" 22.52% 128.522 1 Template:Reflist\",\" 19.95% 113.867 25 Template:Cite_web\",\" 13.89% 79.284 1 Template:Widget_toolkits\",\" 9.20% 52.517 1 Template:Primary\",\" 5.46% 31.169 1 Template:Infobox_software\/simple\"]},\"scribunto\":{\"limitreport-timeusage\":{\"value\":\"0.232\",\"limit\":\"10.000\"},\"limitreport-memusage\":{\"value\":5946921,\"limit\":52428800}},\"cachereport\":{\"origin\":\"mw1276\",\"timestamp\":\"20170718121219\",\"ttl\":2592000,\"transientcontent\":false}}});});(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgBackendResponseTime\":87,\"wgHostname\":\"mw1266\"});});","tags":"","url":"https:\/\/en.wikipedia.org\/wiki\/JQuery"},{"title":"jQuery Mobile - Wikipedia","text":"jQuery Mobile From Wikipedia, the free encyclopedia Jump to: navigation, search jQuery Mobile Developer(s) The jQuery Project Initial release October\u00a016,\u00a02010\u00a0(2010-10-16)[1] Stable release 1.4.5 \/ October\u00a031,\u00a02014\u00a0(2014-10-31) Development status Active Written in JavaScript Size 351\u00a0KB \/ 142\u00a0KB (minified) \/ 40\u00a0KB (minified, gzipped) Type Mobile application framework License MIT[2] Website jquerymobile.com jQuery Mobile is a touch-optimized web framework (also known as a mobile framework), more specifically a JavaScript library, currently being developed by the jQuery project team. The development focuses on creating a framework compatible with a wide variety of smartphones and tablet computers,[3] made necessary by the growing but heterogeneous tablet and smartphone market.[4] The jQuery Mobile framework is compatible with other mobile app frameworks[5] and platforms such as PhoneGap, Worklight[6] and more. Contents 1 Features 2 Example usage 3 A basic example 4 Theming 5 Mobile browser support 6 Release history 7 See also 8 References 9 Further reading 10 External links Features[edit] Compatible with all major desktop browsers as well as all major mobile platforms, including Android, iOS, Windows Phone, Blackberry, WebOS, Symbian. Built on top of jQuery core so it has a minimal learning curve for people already familiar with jQuery syntax. Theming framework that allows creation of custom themes. Limited dependencies and lightweight to optimize speed. The same underlying codebase will automatically scale to any screen. HTML5-driven configuration for laying out pages with minimal scripting. AJAX-powered navigation with animated page transitions that provides ability to create semantic URLs through pushState. UI widgets that are touch-optimized and platform-agnostic. (Source: from the jQuery Mobile website)[3] Example usage[edit] $('div').on('tap', function(event){ alert('element tapped '); }); $(document).ready(function(){ $('.myList li').on('click touchstart', function() { $('.myDiv').slideDown('500'); }); } A basic example[edit] What follows is a basic jQuery Mobile project utilizing HTML5 semantic elements. It is important to link to the jQuery and jQuery Mobile JavaScript libraries, and stylesheet (the files can be downloaded and hosted locally, but it is recommended to link to the files hosted on the jQuery CDN). A screen of the project is defined by a section HTML5 element, and data-role of page. Note that data-role is an example of the HTML5 data attribute, in this case being defined by jQuery Mobile. A page may have header and footer elements with data-role of header and footer, respectively. In between, there may be an article element, with a role of main and a class of ui-content. Lastly, a nav element, with data-role of navbar may be present. One HTML document can contain more than one section element, and thus more than one screenful of content. This way it is only necessary to load one file which includes multiple pages of content. One page can link to another page within the same file by referencing the page's id attribute (e.g. href=\"#second\"). In the example below, two other data- attributes are used. The data-theme attribute tells the browser what theme to render. The data-add-back-btn attribute adds a back button to the page if set to true. Lastly, icons can be added to elements via the data-icon attribute. jQuery Mobile has fifty commonly-used icons built in. A brief explanation of the Data Attributes used in this example: data-role \u2013 Specifies the role of the element, such as header, content, footer, etc. data-theme \u2013 Specifies which design theme to use for elements within a container. Can be set to: a or b. data-position \u2013 Specifies whether the element should be fixed, in which case it will render at the top (for header) or bottom (for footer). data-transition \u2013 Specifies one of ten built-in animations to use when loading new pages. data-icon \u2013 Specifies one of fifty built-in icons that can be added to an element. 1 2 3 4 5 jQuery Mobile Example 6 7 8 9 10 11 12 13 Page 1 Header 14 15 16 17 Hello, world! 18 Go to Page 2 19 20 21 22 Page 1 Footer 23 24 25 26 27 28 Page 2 Header 29 30 31 32 Example Page 33 34 35 36 Page 2 Footer 37 38 39 40 41 42 Theming[edit] jQuery Mobile provides a powerful theming framework that allows developers to customize color schemes and certain CSS aspects of UI features. Developers can use the jQuery Mobile ThemeRoller[7] application to customize these appearances and create highly branded experiences. After developing a theme in the ThemeRoller application, programmers can download a custom CSS file and include it in their project to use their custom theme.[8] Each theme can contain up to 26 unique color \"swatches,\" each of which consists of a header bar, content body, and button states. Combining different swatches allows developers to create a wider range of visual effects than they would be able to with just one swatch per theme. Switching between different swatches within a theme is as simple as adding an attribute called \"data-theme\" to HTML elements. The default jQuery Mobile theme comes with two different color swatches, named \"a\" and \"b\". Here is an example of how to create a toolbar with the \"b\" swatch: Page Title (Source: from the jQuery Mobile website)[3] There are already a handful of open source style themes that are developed and supported by third-party organizations. One such open source style theme is the Metro style theme that was developed and released by Microsoft Open Technologies, Inc.[9] The Metro style theme is meant to mimic the UI of the Metro (design language) that Microsoft uses in its mobile operating systems. Mobile browser support[edit] Platform Version Native Phone Gap Opera Mobile Opera Mini Fennec Ozone Net front 0.9 8.5, 8.65 9.5 10 4.0 5.0 1.0 1.1* 0.9 4.0 iOS v2.2.1 A A v3.1.3, v3.2 A A A v4-7.0 A A A Symbian S60 v3.1, v3.2 A A A A A C C v5.0 C C C A C A Symbian UIQ v3.0, v3.1 C 8.65 C v3.2 C C Symbian Platform v.3.0 A BlackBerry OS v4.5 C C C v4.6, v4.7 C C C B v5.0 B A C A v6.0 A A A Android v1.5, v1.6 A A v2.1 A A v2.2 A A A* C* A* Windows Mobile v6.1 C C C C B C B C v6.5.1 C C C A A C A v7.0 A A C A webOS 1.4.1 A A bada 1.0 A Maemo 5.0 B B C B* MeeGo 1.1* A* A* A* Key: A - High Quality. A browser that\u2019s capable of, at minimum, utilizing media queries (a requirement for jQuery Mobile). These browsers will be actively tested against, but may not receive the full capabilities of jQuery Mobile. B - Medium Quality. A capable browser that doesn\u2019t have enough market share to warrant day-to-day testing. Bug fixes will still be applied to help these browsers. C - Low Quality. A browser that is not capable of utilizing media queries. They will not be provided any jQuery Mobile scripting or CSS (falling back to plain HTML and simple CSS). * - Upcoming browser. This browser is not yet released but is in alpha\/beta testing. (Source: from the jQuery Mobile website)[3] Release history[edit] Release date Version number October 16 2010 1.0.0 Alpha 1 November 12, 2010 1.0.0 Alpha 2 February 4 2011 1.0.0 Alpha 3 March 31 2011 1.0.0 Alpha 4 April 7 2011 1.0.0 Alpha 4.1 June 20 2011 1.0.0 Beta 1 August 3 2011 1.0.0 Beta 2 September 8 2011 1.0.0 Beta 3 September 29 2011 1.0.0 RC1 October 19 2011 1.0.0 RC2 November 13 2011 1.0.0 RC3 November 16 2011 1.0.0 January 26 2012 1.0.1 February 28, 2012 1.1.0 RC1 April 6, 2012 1.1.0 RC2 April 13, 2012 1.1.0 June 28, 2012 1.1.1 RC1 July 12, 2012 1.1.1 August 1, 2012 1.2.0 Alpha September 5, 2012 1.2.0 Beta September 14, 2012 1.2.0 RC1 September 21, 2012 1.2.0 RC2 October 2, 2012 1.2.0 January 14, 2013 1.3.0 Beta February 4, 2013 1.3.0 RC1 February 20, 2013 1.3.0 March 19, 2013 1.1.2 March 22, 2013 1.2.1 April 10, 2013 1.3.1 July 19, 2013 1.3.2 July 25, 2013 1.4.0 Alpha 1 August 15, 2013 1.4.0 Alpha 2 September 24, 2013 1.4.0 Beta 1 October 24, 2013 1.4.0 RC 1 December 23, 2013 1.4.0 February 12, 2014 1.4.1 February 28, 2014 1.4.2 July 1, 2014 1.4.3 September 12, 2014 1.4.4 October 31, 2014 1.4.5 (Latest Stable Version) See also[edit] jQTouch jQuery Content adaptation DaVinci Studio iUI LungoJs PhoneGap Tizen ViziApps References[edit] ^ jQuery Foundation - jquerymobile.com (2010-10-16). \"jQuery Mobile Alpha 1 Released\". blog.jquerymobile.com. Retrieved 2014-05-22.\u00a0 ^ jQuery Foundation - jquery.org (2012-09-10). \"jQuery Licensing Changes\". Blog.jquery.com. Retrieved 2013-10-09.\u00a0 ^ a b c d \"Mobile Graded Browser Support\".\u00a0 ^ \"The Global Rise of the Smartphone\".\u00a0 ^ \"Resons why jQuery Mobile Is Suitable For Mobile Web App Development\".\u00a0 ^ \"IBM Worklight - United States\". Worklight.com. Retrieved 2013-10-09.\u00a0 ^ \"ThemeRoller\".\u00a0 ^ \"JQuery Mobile Theming Overview\".\u00a0 ^ \"More news from MS Open Tech: announcing the open source Metro style theme for jQuery Mobile\".\u00a0 Further reading[edit] Doyle, Matt (March 18, 2014). Master Mobile Web Apps with jQuery Mobile (4th ed.). Elated Books. p.\u00a0567. ISBN\u00a0978-0-9873115-3-5.\u00a0 Pelletier, Jeff (April 25, 2013). Mobile App Manual: The Blueprint (1st ed.). Withinsight Publishing. p.\u00a096. ISBN\u00a0978-0989072106.\u00a0 Bai, Giulio (June 23, 2011). jQuery Mobile First Look (1st ed.). Packt Publishing. p.\u00a0216. ISBN\u00a01-84951-590-5.\u00a0 Reid, Jon (July 7, 2011). jQuery Mobile (1st ed.). O'Reilly Media. p.\u00a0130. ISBN\u00a01-4493-0668-3.\u00a0 David, Matthew (September 21, 2011). HTML5 Mobile Websites: Turbocharging HTML5 with jQuery Mobile, Sencha Touch, and Other Frameworks (1st ed.). Focal Press. p.\u00a0250. ISBN\u00a00-240-81813-X.\u00a0 Broulik, Brad (November 30, 2011). Pro jQuery Mobile (1st ed.). Apress. p.\u00a0350. ISBN\u00a01-4302-3966-2.\u00a0 Holzner, Steven E. (January 2, 2012). Sams Teach Yourself jQuery Mobile in 10 Minutes (1st ed.). Sams. p.\u00a0240. ISBN\u00a00-672-33557-3.\u00a0 Firtman, Maximiliano (January 31, 2012). jQuery Mobile: Up and Running (1st ed.). O'Reilly Media. p.\u00a0250. ISBN\u00a01-4493-9765-4.\u00a0 Dutson, Phil (July 13, 2012). Sams Teach Yourself jQuery Mobile in 24 Hours (1st ed.). Sams. p.\u00a0475. ISBN\u00a00-672-33594-8.\u00a0 de Jonge, Adriaan, Dutson, Phillip (November 2, 2012). jQuery, jQuery UI, and jQuery Mobile: Recipes and Examples (1st ed.). Addison-Wesley Professional. p.\u00a0400. ISBN\u00a0978-0-321-82208-6.\u00a0 External links[edit] Official website The jQuery Project jQuery Mobile documentation and demo jQuery Mobile Framework: write less, do more jQuery Mobile C# ASP.NET By Matthew David Elgert PropertyCross, Helping you select a cross-platform mobile framework: jQuery Mobile Retrieved from \"https:\/\/en.wikipedia.org\/w\/index.php?title=JQuery_Mobile&oldid=783268746\" Categories: JavaScript librariesAjax (programming)Web frameworksResponsive web designMobile WebHidden categories: Pages using deprecated image syntax Navigation menu Personal tools Not logged inTalkContributionsCreate accountLog in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store Interaction HelpAbout WikipediaCommunity portalRecent changesContact page Tools What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page Print\/export Create a bookDownload as PDFPrintable version Languages \u0627\u0644\u0639\u0631\u0628\u064a\u0629\u010ce\u0161tinaDeutschEspa\u00f1ol\u0641\u0627\u0631\u0633\u06ccFran\u00e7ais\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02Nederlands\u65e5\u672c\u8a9e\u0420\u0443\u0441\u0441\u043a\u0438\u0439\u0421\u0440\u043f\u0441\u043a\u0438 \/ srpski Edit links This page was last edited on 1 June 2017, at 05:20. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view (window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"0.280\",\"walltime\":\"0.328\",\"ppvisitednodes\":{\"value\":2052,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":0,\"limit\":1500000},\"postexpandincludesize\":{\"value\":43909,\"limit\":2097152},\"templateargumentsize\":{\"value\":1675,\"limit\":2097152},\"expansiondepth\":{\"value\":25,\"limit\":40},\"expensivefunctioncount\":{\"value\":2,\"limit\":500},\"entityaccesscount\":{\"value\":1,\"limit\":400},\"timingprofile\":[\"100.00% 271.808 1 -total\",\" 37.04% 100.670 2 Template:Infobox\",\" 35.47% 96.414 1 Template:Infobox_software\",\" 31.74% 86.285 1 Template:Reflist\",\" 27.02% 73.447 9 Template:Cite_web\",\" 13.53% 36.767 10 Template:Cite_book\",\" 7.41% 20.145 1 Template:Infobox_software\/simple\",\" 5.19% 14.116 1 Template:Official_website\",\" 3.84% 10.432 2 Template:Release_date\",\" 2.31% 6.267 3 Template:Font_color\"]},\"scribunto\":{\"limitreport-timeusage\":{\"value\":\"0.125\",\"limit\":\"10.000\"},\"limitreport-memusage\":{\"value\":3764715,\"limit\":52428800}},\"cachereport\":{\"origin\":\"mw1269\",\"timestamp\":\"20170630074130\",\"ttl\":2592000,\"transientcontent\":false}}});});(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgBackendResponseTime\":86,\"wgHostname\":\"mw1187\"});});","tags":"","url":"https:\/\/en.wikipedia.org\/wiki\/JQuery_Mobile"},{"title":"jQuery UI - Wikipedia","text":"jQuery UI From Wikipedia, the free encyclopedia Jump to: navigation, search JQuery UI Developer(s) Paul Bakaus Scott Gonz\u00e1lez J\u00f6rn Zaefferer Felix Nagel Mike Sherov Rafael Xavier de Souza[1] Stable release 1.12.1 \/ 14\u00a0September\u00a02016\u00a0(2016-09-14)[2] Development status Active Written in JavaScript Type Plug-in License MIT License[3] Website jqueryui.com Free software portal jQuery UI is a collection of GUI widgets, animated visual effects, and themes implemented with jQuery (a JavaScript library), Cascading Style Sheets, and HTML.[4] According to JavaScript analytics service, Libscore, jQuery UI is used on over 197,000 of the top one million websites, making it the second most popular JavaScript library.[5] Notable users include Pinterest, PayPal, IMDb, The Huffington Post, and Netflix.[6] Both jQuery and jQuery UI are free and open-source software distributed by the jQuery Foundation under the MIT License; jQuery UI was first published in September 2007.[3][7] Contents 1 Features 1.1 Interactions 1.2 Widgets 1.3 Effects 1.4 Utilities 2 Example 3 Release history 4 References 5 Further reading 6 External links Features[edit] As of the 1.11.4 release:[8] Interactions[edit] Draggable, Droppable, Resizable, Selectable, Sortable Widgets[edit] All of jQuery UI's widgets are fully themeable using a consolidated, coordinated theme mechanism.[9] Accordion \u2013 Accordion containers Autocomplete \u2013 Auto-complete boxes based on what the user types Button \u2013 Enhanced button appearance, turn radio buttons and checkboxes into pushbuttons Datepicker \u2013 Advanced date-picker Dialog \u2013 Show dialog boxes on top of other content, easily and robustly Menu \u2013 Show a Menu Progressbar \u2013 Progress bars, both animated and not Selectmenu \u2013 Duplicates and extends the functionality of a native HTML select element to overcome the limitations of the native control Slider \u2013 Fully customizable sliders Spinner \u2013 Show a Number Spinner Tabs \u2013 Tabbed user interface handling, with both inline and demand-loaded content Tooltip \u2013 Show a Tooltip Effects[edit] Color Animation \u2013 Animate the transition from one color to another Toggle Class, Add Class, Remove Class, Switch Class \u2013 Animate the transition from one set of styles to another Effect \u2013 A variety of effects (appear, slide-down, explode, fade-in, etc.) Toggle \u2013 Toggle an effect on and off Hide, Show - Using the effects above Utilities[edit] Position \u2013 Set an element's position relative to another element's position (alignment) Widget Factory \u2013 Create stateful jQuery plugins using the same abstraction as all jQuery UI widgets Example[edit] \/\/ Make the element with id \"draggable\" draggable $(function () { $(\"#draggable\").draggable(); }); Drag me around This makes the div with the ID \"draggable\" draggable by the user's mouse. Release history[edit] jQuery UI was launched on September 17, 2007.[7] Release date[10] Version number jQuery Dependency Additional notes Sep 17, 2007 1.2.1+ Initial release[7] Jun 8, 2008 1.5 Apr 16, 2009 1.6 1.2.6+ Compatibility release for jQuery 1.2.6. Mar 3, 2009 1.7 1.3.2+ Mar 18, 2010 1.8 1.3.2+ Jan 19, 2011 1.8.9 1.3.2+ Feb 22, 2011 1.8.10 1.3.2+ Mar 15, 2011 1.8.11 1.3.2+ Apr 13, 2011 1.8.12 1.3.2+ May 12, 2011 1.8.13 1.3.2+ Jun 17, 2011 1.8.14 1.3.2+ Aug 1, 2011 1.8.15 1.3.2+ Aug 15, 2011 1.8.16 1.3.2+ Jan 10, 2012 1.8.17 1.3.2+ Feb 20, 2012 1.8.18 1.3.2+ Apr 16, 2012 1.8.19 1.3.2+ Apr 30, 2012 1.8.20 1.3.2+ Jun 5, 2012 1.8.21 1.3.2+ Jul 24, 2012 1.8.22 1.3.2+ Aug 15, 2012 1.8.23 1.3.2+ Sep 28, 2012 1.8.24 1.3.2+ Oct 8, 2012 1.9.0 1.6+ Oct 25, 2012 1.9.1 1.6+ Nov 23, 2012 1.9.2 1.6+ Jan 17, 2013 1.10.0 1.6+ Dropped support for IE6[11] Feb 15, 2013 1.10.1 1.6+ Mar 14, 2013 1.10.2 1.6+ May 3, 2013 1.10.3 1.6+ Jan 17, 2014 1.10.4 1.6+ Apr 25, 2014 1.11.0-beta.1 1.6+ Dropped support for IE7[12] May 23, 2014 1.11.0-beta.2 1.6+ Jun 26, 2014 1.11.0 1.6+ Aug 13, 2014 1.11.1 1.6+ Oct 16, 2014 1.11.2 1.6+ Feb 12, 2015 1.11.3 1.6+ Mar 11, 2015 1.11.4 1.6+ Jan 26, 2016 1.12.0-beta.1 1.7+ Dropped support for IE8, IE9, IE10[13] Mar 17, 2016 1.12.0-rc.1 1.7+ Apr 21, 2016 1.12.0-rc.2 1.7+ Jul 8, 2016 1.12.0 (unannounced) 1.7+ Sep 14, 2016 1.12.1 1.7+ References[edit] ^ \"jQuery UI Team\". jqueryui.com. The jQuery Foundation. Retrieved 5 February 2016.\u00a0 ^ \"jQuery UI 1.12.1\". jqueryui.com. 14 September 2016.\u00a0 ^ a b \"License\". jQuery.com. The jQuery Foundation. Retrieved 12 June 2014.\u00a0 ^ Sarrion, Eric (2012). jQuery UI. Sebastopol: O'Reilly Media. pp.\u00a01\u20134. ISBN\u00a09781449316990. OCLC\u00a0768796881.\u00a0 ^ http:\/\/libscore.com\/#libs ^ http:\/\/libscore.com\/#$.ui ^ a b c John Resig (17 September 2007). \"jQuery UI: Interactions and plug-ins\". jQuery blog. Retrieved 12 August 2012.\u00a0 ^ \"jQuery UI Demos\". jQuery UI. Retrieved 5 February 2016.\u00a0 ^ \"jQuery UI: ThemeRoller\". jQuery UI. Retrieved 5 February 2016.\u00a0 ^ \"jQuery UI - Documentation: UIChangelog\". Retrieved April 2, 2012.\u00a0 ^ jQuery UI 1.10.0, retrieved on Feb 15, 2013 ^ jQuery UI 1.11.0-beta.1, retrieved on May 1, 2014 ^ jQuery UI 1.12.0-beta.1, retrieved on Feb 5, 2016 Further reading[edit] Sarrion, Eric (March 24, 2012). jQuery UI (1st ed.). O'Reilly Media. p.\u00a0244. ISBN\u00a0978-1449316990.\u00a0 Wellman, Dan (August 23, 2011). jQuery UI 1.8: The User Interface Library for jQuery (1st ed.). Packt Publishing. p.\u00a0424. ISBN\u00a0978-1849516525.\u00a0 de Jonge, Adriaan, Dutson, Phillip (November 2, 2012). jQuery, jQuery UI, and jQuery Mobile: Recipes and Examples (1st ed.). Addison-Wesley Professional. p.\u00a0400. ISBN\u00a0978-0-321-82208-6.\u00a0 External links[edit] Official website v t e List of widget toolkits Low-level On AmigaOS Intuition On Classic Mac OS and macOS Unknown\/Native Macintosh Toolbox Object Pascal Carbon CLI Desktop Xamarin.Mac Mobile Xamarin.iOS On Windows Windows API On Unix, under X11 Xlib XCB X Toolkit Intrinsics, Xt, X-Toolkit On BeOS\/Haiku BeOS, ZETA, Haiku On Cross-platform CLI OpenTK C GDK Java JOGL On Android CLI Xamarin.Android High-level On AmigaOS BOOPSI MUI ReAction GUI Zune On Classic Mac OS and macOS Object Pascal Carbon MacApp Objective-C Desktop Cocoa Mobile Cocoa Touch C++ MacZoop PowerPlant On Windows CLI Desktop Windows Forms XAML (Silverlight, WinRT XAML, WPF) XNA Framework Web XAML (Silverlight) Mobile XNA Framework C++ MFC ATL WTL OWL Object Pascal VCL On Unix, under X11 Athena (Xaw) InterViews LessTif Motif OLIT XForms On Android C++ Qt for Android Cross-platform, by language C GTK+ IUP Tk wxC XForms XVT C++ CEGUI CLX FLTK FOX toolkit GLUI Gtkmm JUCE Nana Qt Rogue Wave Views TnFOX Ultimate++ VCF Wt wxWidgets YAAF Objective-C GNUstep CLI Desktop Gtk# Tao (OpenTK, TaoClassic) wx.NET UIML.NET MonoGame Web Moonlight Mobile MonoGame Xamarin.Forms D DFL DlangUI DWT GtkD QtD wxD Flash Apache Flex (MXML) Haskell Gtk2Hs wxHaskell Java Desktop AWT FXML (JavaFX) Qt Jambi Swing SWT wx4j jUIML Web GWT FXML (JavaFX) Mobile LWUIT JavaScript Dojo Toolkit Echo Ext JS Google Closure jQuery UI Qooxdoo YUI Common Lisp CAPI CLIM Common Graphics Ltk McCLIM Lua IUP wxLua Pascal Desktop LCL Mobile LCL Object Pascal Desktop CLX fpGUI IP Pascal LCL Mobile LCL Perl Perl\/Tk PHP PHP-GTK PHP-Qt wxPHP Python PyGObject PyGTK Pyjs PyQt PySide Tkinter wxPython Ruby Shoes QtRuby wxRuby Tcl Tcl\/Tk XML Ample SDK GladeXML Lively Kernel Pyjs Rialto Toolkit XAML XUI XUL Wt shell whiptail dialog Authority control GND: 1031219404 Retrieved from \"https:\/\/en.wikipedia.org\/w\/index.php?title=JQuery_UI&oldid=791102494\" Categories: JavaScript libraries2006 introductionsSoftware using the MIT licenseCSS frameworksHidden categories: Pages using deprecated image syntaxOfficial website different in Wikidata and WikipediaWikipedia articles with GND identifiers Navigation menu Personal tools Not logged inTalkContributionsCreate accountLog in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store Interaction HelpAbout WikipediaCommunity portalRecent changesContact page Tools What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page Print\/export Create a bookDownload as PDFPrintable version Languages \u010ce\u0161tinaDeutschEspa\u00f1ol\u0641\u0627\u0631\u0633\u06ccFran\u00e7aisItaliano\u65e5\u672c\u8a9e\u0420\u0443\u0441\u0441\u043a\u0438\u0439T\u00fcrk\u00e7e\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\u4e2d\u6587 Edit links This page was last edited on 18 July 2017, at 04:26. Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia\u00ae is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Cookie statement Mobile view (window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgPageParseReport\":{\"limitreport\":{\"cputime\":\"0.404\",\"walltime\":\"0.656\",\"ppvisitednodes\":{\"value\":7504,\"limit\":1000000},\"ppgeneratednodes\":{\"value\":0,\"limit\":1500000},\"postexpandincludesize\":{\"value\":280013,\"limit\":2097152},\"templateargumentsize\":{\"value\":36722,\"limit\":2097152},\"expansiondepth\":{\"value\":25,\"limit\":40},\"expensivefunctioncount\":{\"value\":2,\"limit\":500},\"entityaccesscount\":{\"value\":1,\"limit\":400},\"timingprofile\":[\"100.00% 571.219 1 -total\",\" 67.99% 388.391 17 Template:Navbox\",\" 45.95% 262.475 16 Template:Navbox_subgroup\",\" 24.24% 138.478 1 Template:Widget_toolkits\",\" 20.44% 116.740 2 Template:Infobox\",\" 17.37% 99.242 1 Template:Infobox_software\",\" 13.44% 76.763 1 Template:Reflist\",\" 9.38% 53.589 7 Template:Cite_web\",\" 5.80% 33.116 1 Template:Infobox_software\/simple\",\" 4.10% 23.403 1 Template:Official_website\"]},\"scribunto\":{\"limitreport-timeusage\":{\"value\":\"0.162\",\"limit\":\"10.000\"},\"limitreport-memusage\":{\"value\":4439600,\"limit\":52428800}},\"cachereport\":{\"origin\":\"mw1191\",\"timestamp\":\"20170718042654\",\"ttl\":2592000,\"transientcontent\":false}}});});(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({\"wgBackendResponseTime\":120,\"wgHostname\":\"mw1262\"});});","tags":"","url":"https:\/\/en.wikipedia.org\/wiki\/JQuery_UI"}]